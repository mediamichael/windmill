// This file is auto-generated by @hey-api/openapi-ts

export const $Script = {
    type: 'object',
    properties: {
        workspace_id: {
            type: 'string'
        },
        hash: {
            type: 'string'
        },
        path: {
            type: 'string'
        },
        parent_hashes: {
            type: 'array',
            description: `The first element is the direct parent of the script, the second is the parent of the first, etc
`,
            items: {
                type: 'string'
            }
        },
        summary: {
            type: 'string'
        },
        description: {
            type: 'string'
        },
        content: {
            type: 'string'
        },
        created_by: {
            type: 'string'
        },
        created_at: {
            type: 'string',
            format: 'date-time'
        },
        archived: {
            type: 'boolean'
        },
        schema: {
            type: 'object'
        },
        deleted: {
            type: 'boolean'
        },
        is_template: {
            type: 'boolean'
        },
        extra_perms: {
            type: 'object',
            additionalProperties: {
                type: 'boolean'
            }
        },
        lock: {
            type: 'string'
        },
        lock_error_logs: {
            type: 'string'
        },
        language: {
            type: 'string',
            enum: ['python3', 'deno', 'go', 'bash', 'powershell', 'postgresql', 'mysql', 'bigquery', 'snowflake', 'mssql', 'graphql', 'nativets', 'bun', 'php']
        },
        kind: {
            type: 'string',
            enum: ['script', 'failure', 'trigger', 'command', 'approval']
        },
        starred: {
            type: 'boolean'
        },
        tag: {
            type: 'string'
        },
        has_draft: {
            type: 'boolean'
        },
        draft_only: {
            type: 'boolean'
        },
        envs: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        concurrent_limit: {
            type: 'integer'
        },
        concurrency_time_window_s: {
            type: 'integer'
        },
        concurrency_key: {
            type: 'string'
        },
        cache_ttl: {
            type: 'number'
        },
        dedicated_worker: {
            type: 'boolean'
        },
        ws_error_handler_muted: {
            type: 'boolean'
        },
        priority: {
            type: 'integer'
        },
        restart_unless_cancelled: {
            type: 'boolean'
        },
        timeout: {
            type: 'integer'
        },
        delete_after_use: {
            type: 'boolean'
        },
        visible_to_runner_only: {
            type: 'boolean'
        },
        no_main_func: {
            type: 'boolean'
        },
        codebase: {
            type: 'string'
        }
    },
    required: ['hash', 'path', 'summary', 'description', 'content', 'created_by', 'created_at', 'archived', 'deleted', 'is_template', 'extra_perms', 'language', 'kind', 'starred', 'no_main_func']
} as const;

export const $NewScript = {
    type: 'object',
    properties: {
        path: {
            type: 'string'
        },
        parent_hash: {
            type: 'string'
        },
        summary: {
            type: 'string'
        },
        description: {
            type: 'string'
        },
        content: {
            type: 'string'
        },
        schema: {
            type: 'object'
        },
        is_template: {
            type: 'boolean'
        },
        lock: {
            type: 'string'
        },
        language: {
            type: 'string',
            enum: ['python3', 'deno', 'go', 'bash', 'powershell', 'postgresql', 'mysql', 'bigquery', 'snowflake', 'mssql', 'graphql', 'nativets', 'bun', 'php']
        },
        kind: {
            type: 'string',
            enum: ['script', 'failure', 'trigger', 'command', 'approval']
        },
        tag: {
            type: 'string'
        },
        draft_only: {
            type: 'boolean'
        },
        envs: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        concurrent_limit: {
            type: 'integer'
        },
        concurrency_time_window_s: {
            type: 'integer'
        },
        cache_ttl: {
            type: 'number'
        },
        dedicated_worker: {
            type: 'boolean'
        },
        ws_error_handler_muted: {
            type: 'boolean'
        },
        priority: {
            type: 'integer'
        },
        restart_unless_cancelled: {
            type: 'boolean'
        },
        timeout: {
            type: 'integer'
        },
        delete_after_use: {
            type: 'boolean'
        },
        deployment_message: {
            type: 'string'
        },
        concurrency_key: {
            type: 'string'
        },
        visible_to_runner_only: {
            type: 'boolean'
        },
        no_main_func: {
            type: 'boolean'
        },
        codebase: {
            type: 'string'
        }
    },
    required: ['path', 'summary', 'description', 'content', 'language']
} as const;

export const $NewScriptWithDraft = {
    allOf: [
        {
            '$ref': '#/components/schemas/NewScript'
        },
        {
            type: 'object',
            properties: {
                draft: {
                    '$ref': '#/components/schemas/NewScript'
                },
                hash: {
                    type: 'string'
                }
            },
            required: ['hash']
        }
    ]
} as const;

export const $ScriptHistory = {
    type: 'object',
    properties: {
        script_hash: {
            type: 'string'
        },
        deployment_msg: {
            type: 'string'
        }
    },
    required: ['script_hash']
} as const;

export const $ScriptArgs = {
    type: 'object',
    additionalProperties: {}
} as const;

export const $Input = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        created_by: {
            type: 'string'
        },
        created_at: {
            type: 'string',
            format: 'date-time'
        },
        is_public: {
            type: 'boolean'
        },
        success: {
            type: 'boolean'
        }
    },
    required: ['id', 'name', 'args', 'created_by', 'created_at', 'is_public']
} as const;

export const $CreateInput = {
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        args: {
            type: 'object'
        }
    },
    required: ['name', 'args', 'created_by']
} as const;

export const $UpdateInput = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        is_public: {
            type: 'boolean'
        }
    },
    required: ['id', 'name', 'is_public']
} as const;

export const $RunnableType = {
    type: 'string',
    enum: ['ScriptHash', 'ScriptPath', 'FlowPath']
} as const;

export const $QueuedJob = {
    type: 'object',
    properties: {
        workspace_id: {
            type: 'string'
        },
        id: {
            type: 'string',
            format: 'uuid'
        },
        parent_job: {
            type: 'string',
            format: 'uuid'
        },
        created_by: {
            type: 'string'
        },
        created_at: {
            type: 'string',
            format: 'date-time'
        },
        started_at: {
            type: 'string',
            format: 'date-time'
        },
        scheduled_for: {
            type: 'string',
            format: 'date-time'
        },
        running: {
            type: 'boolean'
        },
        script_path: {
            type: 'string'
        },
        script_hash: {
            type: 'string'
        },
        args: {
            '$ref': '#/components/schemas/ScriptArgs'
        },
        logs: {
            type: 'string'
        },
        raw_code: {
            type: 'string'
        },
        canceled: {
            type: 'boolean'
        },
        canceled_by: {
            type: 'string'
        },
        canceled_reason: {
            type: 'string'
        },
        last_ping: {
            type: 'string',
            format: 'date-time'
        },
        job_kind: {
            type: 'string',
            enum: ['script', 'preview', 'dependencies', 'flowdependencies', 'appdependencies', 'flow', 'flowpreview', 'script_hub', 'identity', 'deploymentcallback', 'singlescriptflow']
        },
        schedule_path: {
            type: 'string'
        },
        permissioned_as: {
            type: 'string',
            description: `The user (u/userfoo) or group (g/groupfoo) whom 
the execution of this script will be permissioned_as and by extension its DT_TOKEN.
`
        },
        flow_status: {
            '$ref': '#/components/schemas/FlowStatus'
        },
        raw_flow: {
            '$ref': '#/components/schemas/FlowValue'
        },
        is_flow_step: {
            type: 'boolean'
        },
        language: {
            type: 'string',
            enum: ['python3', 'deno', 'go', 'bash', 'powershell', 'postgresql', 'mysql', 'bigquery', 'snowflake', 'mssql', 'graphql', 'nativets', 'bun', 'php']
        },
        email: {
            type: 'string'
        },
        visible_to_owner: {
            type: 'boolean'
        },
        mem_peak: {
            type: 'integer'
        },
        tag: {
            type: 'string'
        },
        priority: {
            type: 'integer'
        },
        self_wait_time_ms: {
            type: 'number'
        },
        aggregate_wait_time_ms: {
            type: 'number'
        }
    },
    required: ['id', 'running', 'canceled', 'job_kind', 'permissioned_as', 'is_flow_step', 'email', 'visible_to_owner', 'tag']
} as const;

export const $CompletedJob = {
    type: 'object',
    properties: {
        workspace_id: {
            type: 'string'
        },
        id: {
            type: 'string',
            format: 'uuid'
        },
        parent_job: {
            type: 'string',
            format: 'uuid'
        },
        created_by: {
            type: 'string'
        },
        created_at: {
            type: 'string',
            format: 'date-time'
        },
        started_at: {
            type: 'string',
            format: 'date-time'
        },
        duration_ms: {
            type: 'integer'
        },
        success: {
            type: 'boolean'
        },
        script_path: {
            type: 'string'
        },
        script_hash: {
            type: 'string'
        },
        args: {
            '$ref': '#/components/schemas/ScriptArgs'
        },
        result: {},
        logs: {
            type: 'string'
        },
        deleted: {
            type: 'boolean'
        },
        raw_code: {
            type: 'string'
        },
        canceled: {
            type: 'boolean'
        },
        canceled_by: {
            type: 'string'
        },
        canceled_reason: {
            type: 'string'
        },
        job_kind: {
            type: 'string',
            enum: ['script', 'preview', 'dependencies', 'flow', 'flowdependencies', 'appdependencies', 'flowpreview', 'script_hub', 'identity', 'deploymentcallback', 'singlescriptflow']
        },
        schedule_path: {
            type: 'string'
        },
        permissioned_as: {
            type: 'string',
            description: `The user (u/userfoo) or group (g/groupfoo) whom 
the execution of this script will be permissioned_as and by extension its DT_TOKEN.
`
        },
        flow_status: {
            '$ref': '#/components/schemas/FlowStatus'
        },
        raw_flow: {
            '$ref': '#/components/schemas/FlowValue'
        },
        is_flow_step: {
            type: 'boolean'
        },
        language: {
            type: 'string',
            enum: ['python3', 'deno', 'go', 'bash', 'powershell', 'postgresql', 'mysql', 'bigquery', 'snowflake', 'mssql', 'graphql', 'nativets', 'bun', 'php']
        },
        is_skipped: {
            type: 'boolean'
        },
        email: {
            type: 'string'
        },
        visible_to_owner: {
            type: 'boolean'
        },
        mem_peak: {
            type: 'integer'
        },
        tag: {
            type: 'string'
        },
        priority: {
            type: 'integer'
        },
        labels: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        self_wait_time_ms: {
            type: 'number'
        },
        aggregate_wait_time_ms: {
            type: 'number'
        }
    },
    required: ['id', 'created_by', 'duration_ms', 'created_at', 'started_at', 'success', 'canceled', 'job_kind', 'permissioned_as', 'is_flow_step', 'is_skipped', 'email', 'visible_to_owner', 'tag']
} as const;

export const $ObscuredJob = {
    type: 'object',
    properties: {
        typ: {
            type: 'string'
        },
        started_at: {
            type: 'string',
            format: 'date-time'
        },
        duration_ms: {
            type: 'number'
        }
    }
} as const;

export const $Job = {
    oneOf: [
        {
            allOf: [
                {
                    '$ref': '#/components/schemas/CompletedJob'
                },
                {
                    type: 'object',
                    properties: {
                        type: {
                            type: 'string',
                            enum: ['CompletedJob']
                        }
                    }
                }
            ]
        },
        {
            allOf: [
                {
                    '$ref': '#/components/schemas/QueuedJob'
                },
                {
                    type: 'object',
                    properties: {
                        type: {
                            type: 'string',
                            enum: ['QueuedJob']
                        }
                    }
                }
            ]
        }
    ],
    discriminator: {
        propertyName: 'type'
    }
} as const;

export const $User = {
    type: 'object',
    properties: {
        email: {
            type: 'string'
        },
        username: {
            type: 'string'
        },
        is_admin: {
            type: 'boolean'
        },
        is_super_admin: {
            type: 'boolean'
        },
        created_at: {
            type: 'string',
            format: 'date-time'
        },
        operator: {
            type: 'boolean'
        },
        disabled: {
            type: 'boolean'
        },
        groups: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        folders: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        folders_owners: {
            type: 'array',
            items: {
                type: 'string'
            }
        }
    },
    required: ['email', 'username', 'is_admin', 'is_super_admin', 'created_at', 'operator', 'disabled', 'folders', 'folders_owners']
} as const;

export const $UserUsage = {
    type: 'object',
    properties: {
        email: {
            type: 'string'
        },
        executions: {
            type: 'number'
        }
    }
} as const;

export const $Login = {
    type: 'object',
    properties: {
        email: {
            type: 'string'
        },
        password: {
            type: 'string'
        }
    },
    required: ['email', 'password']
} as const;

export const $EditWorkspaceUser = {
    type: 'object',
    properties: {
        is_admin: {
            type: 'boolean'
        },
        operator: {
            type: 'boolean'
        },
        disabled: {
            type: 'boolean'
        }
    }
} as const;

export const $TruncatedToken = {
    type: 'object',
    properties: {
        label: {
            type: 'string'
        },
        expiration: {
            type: 'string',
            format: 'date-time'
        },
        token_prefix: {
            type: 'string'
        },
        created_at: {
            type: 'string',
            format: 'date-time'
        },
        last_used_at: {
            type: 'string',
            format: 'date-time'
        },
        scopes: {
            type: 'array',
            items: {
                type: 'string'
            }
        }
    },
    required: ['token_prefix', 'created_at', 'last_used_at']
} as const;

export const $NewToken = {
    type: 'object',
    properties: {
        label: {
            type: 'string'
        },
        expiration: {
            type: 'string',
            format: 'date-time'
        },
        scopes: {
            type: 'array',
            items: {
                type: 'string'
            }
        }
    }
} as const;

export const $NewTokenImpersonate = {
    type: 'object',
    properties: {
        label: {
            type: 'string'
        },
        expiration: {
            type: 'string',
            format: 'date-time'
        },
        impersonate_email: {
            type: 'string'
        }
    },
    required: ['impersonate_email']
} as const;

export const $ListableVariable = {
    type: 'object',
    properties: {
        workspace_id: {
            type: 'string'
        },
        path: {
            type: 'string'
        },
        value: {
            type: 'string'
        },
        is_secret: {
            type: 'boolean'
        },
        description: {
            type: 'string'
        },
        account: {
            type: 'integer'
        },
        is_oauth: {
            type: 'boolean'
        },
        extra_perms: {
            type: 'object',
            additionalProperties: {
                type: 'boolean'
            }
        },
        is_expired: {
            type: 'boolean'
        },
        refresh_error: {
            type: 'string'
        },
        is_linked: {
            type: 'boolean'
        },
        is_refreshed: {
            type: 'boolean'
        },
        expires_at: {
            type: 'string',
            format: 'date-time'
        }
    },
    required: ['workspace_id', 'path', 'is_secret', 'extra_perms']
} as const;

export const $ContextualVariable = {
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        value: {
            type: 'string'
        },
        description: {
            type: 'string'
        },
        is_custom: {
            type: 'boolean'
        }
    },
    required: ['name', 'value', 'description', 'is_custom']
} as const;

export const $CreateVariable = {
    type: 'object',
    properties: {
        path: {
            type: 'string'
        },
        value: {
            type: 'string'
        },
        is_secret: {
            type: 'boolean'
        },
        description: {
            type: 'string'
        },
        account: {
            type: 'integer'
        },
        is_oauth: {
            type: 'boolean'
        },
        expires_at: {
            type: 'string',
            format: 'date-time'
        }
    },
    required: ['path', 'value', 'is_secret', 'description']
} as const;

export const $EditVariable = {
    type: 'object',
    properties: {
        path: {
            type: 'string'
        },
        value: {
            type: 'string'
        },
        is_secret: {
            type: 'boolean'
        },
        description: {
            type: 'string'
        }
    }
} as const;

export const $AuditLog = {
    type: 'object',
    properties: {
        id: {
            type: 'integer'
        },
        timestamp: {
            type: 'string',
            format: 'date-time'
        },
        username: {
            type: 'string'
        },
        operation: {
            type: 'string',
            enum: ['jobs.run', 'jobs.run.script', 'jobs.run.preview', 'jobs.run.flow', 'jobs.run.flow_preview', 'jobs.run.script_hub', 'jobs.run.dependencies', 'jobs.run.identity', 'jobs.run.noop', 'jobs.flow_dependencies', 'jobs', 'jobs.cancel', 'jobs.force_cancel', 'jobs.disapproval', 'jobs.delete', 'account.delete', 'openai.request', 'resources.create', 'resources.update', 'resources.delete', 'resource_types.create', 'resource_types.update', 'resource_types.delete', 'schedule.create', 'schedule.setenabled', 'schedule.edit', 'schedule.delete', 'scripts.create', 'scripts.update', 'scripts.archive', 'scripts.delete', 'users.create', 'users.delete', 'users.update', 'users.login', 'users.logout', 'users.accept_invite', 'users.decline_invite', 'users.token.create', 'users.token.delete', 'users.add_to_workspace', 'users.add_global', 'users.setpassword', 'users.impersonate', 'users.leave_workspace', 'oauth.login', 'oauth.signup', 'variables.create', 'variables.delete', 'variables.update', 'flows.create', 'flows.update', 'flows.delete', 'flows.archive', 'apps.create', 'apps.update', 'apps.delete', 'folder.create', 'folder.update', 'folder.delete', 'folder.add_owner', 'folder.remove_owner', 'group.create', 'group.delete', 'group.edit', 'group.adduser', 'group.removeuser', 'igroup.create', 'igroup.delete', 'igroup.adduser', 'igroup.removeuser', 'variables.decrypt_secret', 'workspaces.edit_command_script', 'workspaces.edit_deploy_to', 'workspaces.edit_auto_invite_domain', 'workspaces.edit_webhook', 'workspaces.edit_copilot_config', 'workspaces.edit_error_handler', 'workspaces.create', 'workspaces.update', 'workspaces.archive', 'workspaces.unarchive', 'workspaces.delete']
        },
        action_kind: {
            type: 'string',
            enum: ['Created', 'Updated', 'Delete', 'Execute']
        },
        resource: {
            type: 'string'
        },
        parameters: {
            type: 'object'
        }
    },
    required: ['id', 'timestamp', 'username', 'operation', 'action_kind']
} as const;

export const $MainArgSignature = {
    type: 'object',
    properties: {
        type: {
            type: 'string',
            enum: ['Valid', 'Invalid']
        },
        error: {
            type: 'string'
        },
        star_args: {
            type: 'boolean'
        },
        star_kwargs: {
            type: 'boolean'
        },
        args: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    name: {
                        type: 'string'
                    },
                    typ: {
                        oneOf: [
                            {
                                type: 'string',
                                enum: ['float', 'int', 'bool', 'email', 'unknown', 'bytes', 'dict', 'datetime', 'sql']
                            },
                            {
                                type: 'object',
                                properties: {
                                    resource: {
                                        type: 'string',
                                        nullable: true
                                    }
                                },
                                required: ['resource']
                            },
                            {
                                type: 'object',
                                properties: {
                                    str: {
                                        type: 'array',
                                        items: {
                                            type: 'string'
                                        },
                                        nullable: true
                                    }
                                },
                                required: ['str']
                            },
                            {
                                type: 'object',
                                properties: {
                                    object: {
                                        type: 'array',
                                        items: {
                                            type: 'object',
                                            properties: {
                                                key: {
                                                    type: 'string'
                                                },
                                                typ: {
                                                    oneOf: [
                                                        {
                                                            type: 'string',
                                                            enum: ['float', 'int', 'bool', 'email', 'unknown', 'bytes', 'dict', 'datetime', 'sql']
                                                        },
                                                        {
                                                            type: 'object',
                                                            properties: {
                                                                str: {}
                                                            },
                                                            required: ['str']
                                                        }
                                                    ]
                                                }
                                            },
                                            required: ['key', 'typ']
                                        }
                                    }
                                },
                                required: ['object']
                            },
                            {
                                type: 'object',
                                properties: {
                                    list: {
                                        oneOf: [
                                            {
                                                type: 'string',
                                                enum: ['float', 'int', 'bool', 'email', 'unknown', 'bytes', 'dict', 'datetime', 'sql']
                                            },
                                            {
                                                type: 'object',
                                                properties: {
                                                    str: {}
                                                },
                                                required: ['str']
                                            }
                                        ],
                                        nullable: true
                                    }
                                },
                                required: ['list']
                            }
                        ]
                    },
                    has_default: {
                        type: 'boolean'
                    },
                    default: {}
                },
                required: ['name', 'typ']
            }
        },
        no_main_func: {
            type: 'boolean',
            nullable: true
        }
    },
    required: ['star_args', 'start_kwargs', 'args', 'type', 'error', 'no_main_func']
} as const;

export const $Preview = {
    type: 'object',
    properties: {
        content: {
            type: 'string'
        },
        path: {
            type: 'string'
        },
        args: {
            '$ref': '#/components/schemas/ScriptArgs'
        },
        language: {
            type: 'string',
            enum: ['python3', 'deno', 'go', 'bash', 'powershell', 'postgresql', 'mysql', 'bigquery', 'snowflake', 'mssql', 'graphql', 'nativets', 'bun', 'php']
        },
        tag: {
            type: 'string'
        },
        kind: {
            type: 'string',
            enum: ['code', 'identity', 'http']
        },
        dedicated_worker: {
            type: 'boolean'
        },
        lock: {
            type: 'string'
        }
    },
    required: ['args']
} as const;

export const $WorkflowTask = {
    type: 'object',
    properties: {
        args: {
            '$ref': '#/components/schemas/ScriptArgs'
        }
    },
    required: ['args']
} as const;

export const $WorkflowStatusRecord = {
    type: 'object',
    additionalProperties: {
        '$ref': '#/components/schemas/WorkflowStatus'
    }
} as const;

export const $WorkflowStatus = {
    type: 'object',
    properties: {
        scheduled_for: {
            type: 'string',
            format: 'date-time'
        },
        started_at: {
            type: 'string',
            format: 'date-time'
        },
        duration_ms: {
            type: 'number'
        },
        name: {
            type: 'string'
        }
    }
} as const;

export const $CreateResource = {
    type: 'object',
    properties: {
        path: {
            type: 'string'
        },
        value: {},
        description: {
            type: 'string'
        },
        resource_type: {
            type: 'string'
        }
    },
    required: ['path', 'value', 'resource_type']
} as const;

export const $EditResource = {
    type: 'object',
    properties: {
        path: {
            type: 'string'
        },
        description: {
            type: 'string'
        },
        value: {}
    }
} as const;

export const $Resource = {
    type: 'object',
    properties: {
        workspace_id: {
            type: 'string'
        },
        path: {
            type: 'string'
        },
        description: {
            type: 'string'
        },
        resource_type: {
            type: 'string'
        },
        value: {},
        is_oauth: {
            type: 'boolean'
        },
        extra_perms: {
            type: 'object',
            additionalProperties: {
                type: 'boolean'
            }
        },
        created_by: {
            type: 'string'
        },
        edited_at: {
            type: 'string',
            format: 'date-time'
        }
    },
    required: ['path', 'resource_type', 'is_oauth']
} as const;

export const $ListableResource = {
    type: 'object',
    properties: {
        workspace_id: {
            type: 'string'
        },
        path: {
            type: 'string'
        },
        description: {
            type: 'string'
        },
        resource_type: {
            type: 'string'
        },
        value: {},
        is_oauth: {
            type: 'boolean'
        },
        extra_perms: {
            type: 'object',
            additionalProperties: {
                type: 'boolean'
            }
        },
        is_expired: {
            type: 'boolean'
        },
        refresh_error: {
            type: 'string'
        },
        is_linked: {
            type: 'boolean'
        },
        is_refreshed: {
            type: 'boolean'
        },
        account: {
            type: 'number'
        },
        created_by: {
            type: 'string'
        },
        edited_at: {
            type: 'string',
            format: 'date-time'
        }
    },
    required: ['path', 'resource_type', 'is_oauth', 'is_linked', 'is_refreshed']
} as const;

export const $ResourceType = {
    type: 'object',
    properties: {
        workspace_id: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        schema: {},
        description: {
            type: 'string'
        },
        created_by: {
            type: 'string'
        },
        edited_at: {
            type: 'string',
            format: 'date-time'
        }
    },
    required: ['name']
} as const;

export const $EditResourceType = {
    type: 'object',
    properties: {
        schema: {},
        description: {
            type: 'string'
        }
    }
} as const;

export const $Schedule = {
    type: 'object',
    properties: {
        path: {
            type: 'string'
        },
        edited_by: {
            type: 'string'
        },
        edited_at: {
            type: 'string',
            format: 'date-time'
        },
        schedule: {
            type: 'string'
        },
        timezone: {
            type: 'string'
        },
        enabled: {
            type: 'boolean'
        },
        script_path: {
            type: 'string'
        },
        is_flow: {
            type: 'boolean'
        },
        args: {
            '$ref': '#/components/schemas/ScriptArgs'
        },
        extra_perms: {
            type: 'object',
            additionalProperties: {
                type: 'boolean'
            }
        },
        email: {
            type: 'string'
        },
        error: {
            type: 'string'
        },
        on_failure: {
            type: 'string'
        },
        on_failure_times: {
            type: 'number'
        },
        on_failure_exact: {
            type: 'boolean'
        },
        on_failure_extra_args: {
            '$ref': '#/components/schemas/ScriptArgs'
        },
        on_recovery: {
            type: 'string'
        },
        on_recovery_times: {
            type: 'number'
        },
        on_recovery_extra_args: {
            '$ref': '#/components/schemas/ScriptArgs'
        },
        ws_error_handler_muted: {
            type: 'boolean'
        },
        retry: {
            '$ref': '#/components/schemas/Retry'
        },
        summary: {
            type: 'string'
        },
        no_flow_overlap: {
            type: 'boolean'
        },
        tag: {
            type: 'string'
        },
        paused_until: {
            type: 'string',
            format: 'date-time'
        }
    },
    required: ['path', 'edited_by', 'edited_at', 'schedule', 'script_path', 'timezone', 'extra_perms', 'is_flow', 'enabled', 'email']
} as const;

export const $ScheduleWJobs = {
    allOf: [
        {
            '$ref': '#/components/schemas/Schedule'
        },
        {
            type: 'object',
            properties: {
                jobs: {
                    type: 'array',
                    items: {
                        type: 'object',
                        properties: {
                            id: {
                                type: 'string'
                            },
                            success: {
                                type: 'boolean'
                            },
                            duration_ms: {
                                type: 'number'
                            }
                        },
                        required: ['id', 'success', 'duration_ms']
                    }
                }
            }
        }
    ]
} as const;

export const $NewSchedule = {
    type: 'object',
    properties: {
        path: {
            type: 'string'
        },
        schedule: {
            type: 'string'
        },
        timezone: {
            type: 'string'
        },
        script_path: {
            type: 'string'
        },
        is_flow: {
            type: 'boolean'
        },
        args: {
            '$ref': '#/components/schemas/ScriptArgs'
        },
        enabled: {
            type: 'boolean'
        },
        on_failure: {
            type: 'string'
        },
        on_failure_times: {
            type: 'number'
        },
        on_failure_exact: {
            type: 'boolean'
        },
        on_failure_extra_args: {
            '$ref': '#/components/schemas/ScriptArgs'
        },
        on_recovery: {
            type: 'string'
        },
        on_recovery_times: {
            type: 'number'
        },
        on_recovery_extra_args: {
            '$ref': '#/components/schemas/ScriptArgs'
        },
        ws_error_handler_muted: {
            type: 'boolean'
        },
        retry: {
            '$ref': '#/components/schemas/Retry'
        },
        no_flow_overlap: {
            type: 'boolean'
        },
        summary: {
            type: 'string'
        },
        tag: {
            type: 'string'
        },
        paused_until: {
            type: 'string',
            format: 'date-time'
        }
    },
    required: ['path', 'schedule', 'timezone', 'script_path', 'is_flow', 'args']
} as const;

export const $EditSchedule = {
    type: 'object',
    properties: {
        schedule: {
            type: 'string'
        },
        timezone: {
            type: 'string'
        },
        args: {
            '$ref': '#/components/schemas/ScriptArgs'
        },
        on_failure: {
            type: 'string'
        },
        on_failure_times: {
            type: 'number'
        },
        on_failure_exact: {
            type: 'boolean'
        },
        on_failure_extra_args: {
            '$ref': '#/components/schemas/ScriptArgs'
        },
        on_recovery: {
            type: 'string'
        },
        on_recovery_times: {
            type: 'number'
        },
        on_recovery_extra_args: {
            '$ref': '#/components/schemas/ScriptArgs'
        },
        ws_error_handler_muted: {
            type: 'boolean'
        },
        retry: {
            '$ref': '#/components/schemas/Retry'
        },
        no_flow_overlap: {
            type: 'boolean'
        },
        summary: {
            type: 'string'
        },
        tag: {
            type: 'string'
        },
        paused_until: {
            type: 'string',
            format: 'date-time'
        }
    },
    required: ['schedule', 'timezone', 'script_path', 'is_flow', 'args']
} as const;

export const $Group = {
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        summary: {
            type: 'string'
        },
        members: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        extra_perms: {
            type: 'object',
            additionalProperties: {
                type: 'boolean'
            }
        }
    },
    required: ['name']
} as const;

export const $InstanceGroup = {
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        summary: {
            type: 'string'
        },
        emails: {
            type: 'array',
            items: {
                type: 'string'
            }
        }
    },
    required: ['name']
} as const;

export const $Folder = {
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        owners: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        extra_perms: {
            type: 'object',
            additionalProperties: {
                type: 'boolean'
            }
        },
        summary: {
            type: 'string'
        },
        created_by: {
            type: 'string'
        },
        edited_at: {
            type: 'string',
            format: 'date-time'
        }
    },
    required: ['name', 'owners', 'extra_perms']
} as const;

export const $WorkerPing = {
    type: 'object',
    properties: {
        worker: {
            type: 'string'
        },
        worker_instance: {
            type: 'string'
        },
        last_ping: {
            type: 'number'
        },
        started_at: {
            type: 'string',
            format: 'date-time'
        },
        ip: {
            type: 'string'
        },
        jobs_executed: {
            type: 'integer'
        },
        custom_tags: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        worker_group: {
            type: 'string'
        },
        wm_version: {
            type: 'string'
        },
        current_job_id: {
            type: 'string'
        },
        current_job_workspace_id: {
            type: 'string'
        },
        occupancy_rate: {
            type: 'number'
        },
        memory: {
            type: 'number'
        },
        vcpus: {
            type: 'number'
        },
        memory_usage: {
            type: 'number'
        },
        wm_memory_usage: {
            type: 'number'
        }
    },
    required: ['worker', 'worker_instance', 'ping_at', 'started_at', 'ip', 'jobs_executed', 'worker_group', 'wm_version']
} as const;

export const $UserWorkspaceList = {
    type: 'object',
    properties: {
        email: {
            type: 'string'
        },
        workspaces: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    id: {
                        type: 'string'
                    },
                    name: {
                        type: 'string'
                    },
                    username: {
                        type: 'string'
                    }
                },
                required: ['id', 'name', 'username']
            }
        }
    },
    required: ['email', 'workspaces']
} as const;

export const $CreateWorkspace = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        username: {
            type: 'string'
        }
    },
    required: ['id', 'name']
} as const;

export const $Workspace = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        owner: {
            type: 'string'
        },
        domain: {
            type: 'string'
        }
    },
    required: ['id', 'name', 'owner']
} as const;

export const $WorkspaceInvite = {
    type: 'object',
    properties: {
        workspace_id: {
            type: 'string'
        },
        email: {
            type: 'string'
        },
        is_admin: {
            type: 'boolean'
        },
        operator: {
            type: 'boolean'
        }
    },
    required: ['workspace_id', 'email', 'is_admin', 'operator']
} as const;

export const $GlobalUserInfo = {
    type: 'object',
    properties: {
        email: {
            type: 'string'
        },
        login_type: {
            type: 'string',
            enum: ['password', 'github']
        },
        super_admin: {
            type: 'boolean'
        },
        verified: {
            type: 'boolean'
        },
        name: {
            type: 'string'
        },
        company: {
            type: 'string'
        },
        username: {
            type: 'string'
        }
    },
    required: ['email', 'login_type', 'super_admin', 'verified']
} as const;

export const $Flow = {
    allOf: [
        {
            '$ref': '#/components/schemas/OpenFlow'
        },
        {
            '$ref': '#/components/schemas/FlowMetadata'
        }
    ]
} as const;

export const $ExtraPerms = {
    type: 'object',
    additionalProperties: {
        type: 'boolean'
    }
} as const;

export const $FlowMetadata = {
    type: 'object',
    properties: {
        workspace_id: {
            type: 'string'
        },
        path: {
            type: 'string'
        },
        edited_by: {
            type: 'string'
        },
        edited_at: {
            type: 'string',
            format: 'date-time'
        },
        archived: {
            type: 'boolean'
        },
        extra_perms: {
            '$ref': '#/components/schemas/ExtraPerms'
        },
        starred: {
            type: 'boolean'
        },
        draft_only: {
            type: 'boolean'
        },
        tag: {
            type: 'string'
        },
        ws_error_handler_muted: {
            type: 'boolean'
        },
        priority: {
            type: 'integer'
        },
        dedicated_worker: {
            type: 'boolean'
        },
        timeout: {
            type: 'number'
        },
        visible_to_runner_only: {
            type: 'boolean'
        }
    },
    required: ['path', 'edited_by', 'edited_at', 'archived', 'extra_perms']
} as const;

export const $OpenFlowWPath = {
    allOf: [
        {
            '$ref': '#/components/schemas/OpenFlow'
        },
        {
            type: 'object',
            properties: {
                path: {
                    type: 'string'
                },
                tag: {
                    type: 'string'
                },
                ws_error_handler_muted: {
                    type: 'boolean'
                },
                priority: {
                    type: 'integer'
                },
                dedicated_worker: {
                    type: 'boolean'
                },
                timeout: {
                    type: 'number'
                },
                visible_to_runner_only: {
                    type: 'boolean'
                }
            },
            required: ['path']
        }
    ]
} as const;

export const $FlowPreview = {
    type: 'object',
    properties: {
        value: {
            '$ref': '#/components/schemas/FlowValue'
        },
        path: {
            type: 'string'
        },
        args: {
            '$ref': '#/components/schemas/ScriptArgs'
        },
        tag: {
            type: 'string'
        },
        restarted_from: {
            '$ref': '#/components/schemas/RestartedFrom'
        }
    },
    required: ['value', 'content', 'args']
} as const;

export const $RestartedFrom = {
    type: 'object',
    properties: {
        flow_job_id: {
            type: 'string',
            format: 'uuid'
        },
        step_id: {
            type: 'string'
        },
        branch_or_iteration_n: {
            type: 'integer'
        }
    }
} as const;

export const $Policy = {
    type: 'object',
    properties: {
        triggerables: {
            type: 'object',
            additionalProperties: {
                type: 'object'
            }
        },
        triggerables_v2: {
            type: 'object',
            additionalProperties: {
                type: 'object'
            }
        },
        execution_mode: {
            type: 'string',
            enum: ['viewer', 'publisher', 'anonymous']
        },
        on_behalf_of: {
            type: 'string'
        },
        on_behalf_of_email: {
            type: 'string'
        }
    }
} as const;

export const $ListableApp = {
    type: 'object',
    properties: {
        id: {
            type: 'integer'
        },
        workspace_id: {
            type: 'string'
        },
        path: {
            type: 'string'
        },
        summary: {
            type: 'string'
        },
        version: {
            type: 'integer'
        },
        extra_perms: {
            type: 'object',
            additionalProperties: {
                type: 'boolean'
            }
        },
        starred: {
            type: 'boolean'
        },
        edited_at: {
            type: 'string',
            format: 'date-time'
        },
        execution_mode: {
            type: 'string',
            enum: ['viewer', 'publisher', 'anonymous']
        }
    },
    required: ['id', 'workspace_id', 'path', 'summary', 'version', 'extra_perms', 'edited_at', 'execution_mode']
} as const;

export const $ListableRawApp = {
    type: 'object',
    properties: {
        workspace_id: {
            type: 'string'
        },
        path: {
            type: 'string'
        },
        summary: {
            type: 'string'
        },
        extra_perms: {
            type: 'object',
            additionalProperties: {
                type: 'boolean'
            }
        },
        starred: {
            type: 'boolean'
        },
        version: {
            type: 'number'
        },
        edited_at: {
            type: 'string',
            format: 'date-time'
        }
    },
    required: ['workspace_id', 'path', 'summary', 'extra_perms', 'version', 'edited_at']
} as const;

export const $AppWithLastVersion = {
    type: 'object',
    properties: {
        id: {
            type: 'integer'
        },
        workspace_id: {
            type: 'string'
        },
        path: {
            type: 'string'
        },
        summary: {
            type: 'string'
        },
        versions: {
            type: 'array',
            items: {
                type: 'integer'
            }
        },
        created_by: {
            type: 'string'
        },
        created_at: {
            type: 'string',
            format: 'date-time'
        },
        value: {
            type: 'object'
        },
        policy: {
            '$ref': '#/components/schemas/Policy'
        },
        execution_mode: {
            type: 'string',
            enum: ['viewer', 'publisher', 'anonymous']
        },
        extra_perms: {
            type: 'object',
            additionalProperties: {
                type: 'boolean'
            }
        }
    },
    required: ['id', 'workspace_id', 'path', 'summary', 'versions', 'created_by', 'created_at', 'value', 'policy', 'execution_mode', 'extra_perms']
} as const;

export const $AppWithLastVersionWDraft = {
    allOf: [
        {
            '$ref': '#/components/schemas/AppWithLastVersion'
        },
        {
            type: 'object',
            properties: {
                draft_only: {
                    type: 'boolean'
                },
                draft: {}
            }
        }
    ]
} as const;

export const $AppHistory = {
    type: 'object',
    properties: {
        version: {
            type: 'integer'
        },
        deployment_msg: {
            type: 'string'
        }
    },
    required: ['version']
} as const;

export const $FlowVersion = {
    type: 'object',
    properties: {
        id: {
            type: 'integer'
        },
        created_at: {
            type: 'string',
            format: 'date-time'
        },
        deployment_msg: {
            type: 'string'
        }
    },
    required: ['id', 'created_at']
} as const;

export const $SlackToken = {
    type: 'object',
    properties: {
        access_token: {
            type: 'string'
        },
        team_id: {
            type: 'string'
        },
        team_name: {
            type: 'string'
        },
        bot: {
            type: 'object',
            properties: {
                bot_access_token: {
                    type: 'string'
                }
            }
        }
    },
    required: ['access_token', 'team_id', 'team_name', 'bot']
} as const;

export const $TokenResponse = {
    type: 'object',
    properties: {
        access_token: {
            type: 'string'
        },
        expires_in: {
            type: 'integer'
        },
        refresh_token: {
            type: 'string'
        },
        scope: {
            type: 'array',
            items: {
                type: 'string'
            }
        }
    },
    required: ['access_token']
} as const;

export const $HubScriptKind = {
    name: 'kind',
    schema: {
        type: 'string',
        enum: ['script', 'failure', 'trigger', 'approval']
    }
} as const;

export const $PolarsClientKwargs = {
    type: 'object',
    properties: {
        region_name: {
            type: 'string'
        }
    },
    required: ['region_name']
} as const;

export const $LargeFileStorage = {
    type: 'object',
    properties: {
        type: {
            type: 'string',
            enum: ['S3Storage', 'AzureBlobStorage', 'AzureWorkloadIdentity', 'S3AwsOidc']
        },
        s3_resource_path: {
            type: 'string'
        },
        azure_blob_resource_path: {
            type: 'string'
        },
        public_resource: {
            type: 'boolean'
        },
        secondary_storage: {
            type: 'object',
            additionalProperties: {
                type: 'object',
                properties: {
                    type: {
                        type: 'string',
                        enum: ['S3Storage', 'AzureBlobStorage', 'AzureWorkloadIdentity', 'S3AwsOidc']
                    },
                    s3_resource_path: {
                        type: 'string'
                    },
                    azure_blob_resource_path: {
                        type: 'string'
                    },
                    public_resource: {
                        type: 'boolean'
                    }
                }
            }
        }
    }
} as const;

export const $WindmillLargeFile = {
    type: 'object',
    properties: {
        s3: {
            type: 'string'
        }
    },
    required: ['s3']
} as const;

export const $WindmillFileMetadata = {
    type: 'object',
    properties: {
        mime_type: {
            type: 'string'
        },
        size_in_bytes: {
            type: 'integer'
        },
        last_modified: {
            type: 'string',
            format: 'date-time'
        },
        expires: {
            type: 'string',
            format: 'date-time'
        },
        version_id: {
            type: 'string'
        }
    }
} as const;

export const $WindmillFilePreview = {
    type: 'object',
    properties: {
        msg: {
            type: 'string'
        },
        content: {
            type: 'string'
        },
        content_type: {
            type: 'string',
            enum: ['RawText', 'Csv', 'Parquet', 'Unknown']
        }
    },
    required: ['content_type']
} as const;

export const $S3Resource = {
    type: 'object',
    properties: {
        bucket: {
            type: 'string'
        },
        region: {
            type: 'string'
        },
        endPoint: {
            type: 'string'
        },
        useSSL: {
            type: 'boolean'
        },
        accessKey: {
            type: 'string'
        },
        secretKey: {
            type: 'string'
        },
        pathStyle: {
            type: 'boolean'
        }
    },
    required: ['bucket', 'region', 'endPoint', 'useSSL', 'pathStyle']
} as const;

export const $WorkspaceGitSyncSettings = {
    type: 'object',
    properties: {
        include_path: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        include_type: {
            type: 'array',
            items: {
                type: 'string',
                enum: ['script', 'flow', 'app', 'folder', 'resource', 'variable', 'secret', 'resourcetype', 'schedule', 'user', 'group']
            }
        },
        repositories: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GitRepositorySettings'
            }
        }
    }
} as const;

export const $WorkspaceDeployUISettings = {
    type: 'object',
    properties: {
        include_path: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        include_type: {
            type: 'array',
            items: {
                type: 'string',
                enum: ['script', 'flow', 'app', 'resource', 'variable', 'secret']
            }
        }
    }
} as const;

export const $WorkspaceDefaultScripts = {
    type: 'object',
    properties: {
        order: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        hidden: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        default_script_content: {
            additionalProperties: {
                type: 'string'
            }
        }
    }
} as const;

export const $GitRepositorySettings = {
    type: 'object',
    properties: {
        script_path: {
            type: 'string'
        },
        git_repo_resource_path: {
            type: 'string'
        },
        use_individual_branch: {
            type: 'boolean'
        },
        group_by_folder: {
            type: 'boolean'
        },
        exclude_types_override: {
            type: 'array',
            items: {
                type: 'string',
                enum: ['script', 'flow', 'app', 'folder', 'resource', 'variable', 'secret', 'resourcetype', 'schedule', 'user', 'group']
            }
        }
    },
    required: ['script_path', 'git_repo_resource_path']
} as const;

export const $UploadFilePart = {
    type: 'object',
    properties: {
        part_number: {
            type: 'integer'
        },
        tag: {
            type: 'string'
        }
    },
    required: ['part_number', 'tag']
} as const;

export const $MetricMetadata = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        name: {
            type: 'string'
        }
    },
    required: ['id']
} as const;

export const $ScalarMetric = {
    type: 'object',
    properties: {
        metric_id: {
            type: 'string'
        },
        value: {
            type: 'number'
        }
    },
    required: ['id', 'value']
} as const;

export const $TimeseriesMetric = {
    type: 'object',
    properties: {
        metric_id: {
            type: 'string'
        },
        values: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/MetricDataPoint'
            }
        }
    },
    required: ['id', 'values']
} as const;

export const $MetricDataPoint = {
    type: 'object',
    properties: {
        timestamp: {
            type: 'string',
            format: 'date-time'
        },
        value: {
            type: 'number'
        }
    },
    required: ['timestamp', 'value']
} as const;

export const $RawScriptForDependencies = {
    type: 'object',
    properties: {
        raw_code: {
            type: 'string'
        },
        path: {
            type: 'string'
        },
        language: {
            type: 'string',
            enum: ['python3', 'deno', 'go', 'bash', 'powershell', 'postgresql', 'mysql', 'bigquery', 'snowflake', 'mssql', 'graphql', 'nativets', 'bun', 'php']
        }
    },
    required: ['raw_code', 'path', 'language']
} as const;

export const $ConcurrencyGroup = {
    type: 'object',
    properties: {
        concurrency_key: {
            type: 'string'
        },
        total_running: {
            type: 'number'
        }
    },
    required: ['concurrency_key', 'total_running']
} as const;

export const $ExtendedJobs = {
    type: 'object',
    properties: {
        jobs: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Job'
            }
        },
        obscured_jobs: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ObscuredJob'
            }
        },
        omitted_obscured_jobs: {
            description: 'Obscured jobs omitted for security because of too specific filtering',
            type: 'boolean'
        }
    },
    required: ['jobs', 'obscured_jobs']
} as const;

export const $ExportedUser = {
    type: 'object',
    properties: {
        email: {
            type: 'string'
        },
        password_hash: {
            type: 'string'
        },
        super_admin: {
            type: 'boolean'
        },
        verified: {
            type: 'boolean'
        },
        name: {
            type: 'string'
        },
        company: {
            type: 'string'
        },
        first_time_user: {
            type: 'boolean'
        },
        username: {
            type: 'string'
        }
    },
    required: ['email', 'super_admin', 'verified', 'first_time_user']
} as const;

export const $GlobalSetting = {
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        value: {
            type: 'object'
        }
    },
    required: ['name', 'value']
} as const;

export const $Config = {
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        config: {
            type: 'object'
        }
    },
    required: ['name']
} as const;

export const $ExportedInstanceGroup = {
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        summary: {
            type: 'string'
        },
        emails: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        id: {
            type: 'string'
        },
        scim_display_name: {
            type: 'string'
        },
        external_id: {
            type: 'string'
        }
    },
    required: ['name']
} as const;

export const $JobSearchHit = {
    type: 'object',
    properties: {
        dancer: {
            type: 'string'
        }
    }
} as const;

export const $OpenFlow = {
    type: 'object',
    properties: {
        summary: {
            type: 'string'
        },
        description: {
            type: 'string'
        },
        value: {
            '$ref': '#/components/schemas/FlowValue'
        },
        schema: {
            type: 'object'
        }
    },
    required: ['summary', 'value']
} as const;

export const $FlowValue = {
    type: 'object',
    properties: {
        modules: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/FlowModule'
            }
        },
        failure_module: {
            '$ref': '#/components/schemas/FlowModule'
        },
        same_worker: {
            type: 'boolean'
        },
        concurrent_limit: {
            type: 'number'
        },
        concurrency_key: {
            type: 'string'
        },
        concurrency_time_window_s: {
            type: 'number'
        },
        skip_expr: {
            type: 'string'
        },
        cache_ttl: {
            type: 'number'
        },
        priority: {
            type: 'number'
        },
        early_return: {
            type: 'string'
        }
    },
    required: ['modules']
} as const;

export const $Retry = {
    type: 'object',
    properties: {
        constant: {
            type: 'object',
            properties: {
                attempts: {
                    type: 'integer'
                },
                seconds: {
                    type: 'integer'
                }
            }
        },
        exponential: {
            type: 'object',
            properties: {
                attempts: {
                    type: 'integer'
                },
                multiplier: {
                    type: 'integer'
                },
                seconds: {
                    type: 'integer'
                },
                random_factor: {
                    type: 'integer',
                    minimum: 0,
                    maximum: 100
                }
            }
        }
    }
} as const;

export const $FlowModule = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        value: {
            '$ref': '#/components/schemas/FlowModuleValue'
        },
        stop_after_if: {
            type: 'object',
            properties: {
                skip_if_stopped: {
                    type: 'boolean'
                },
                expr: {
                    type: 'string'
                }
            },
            required: ['expr']
        },
        sleep: {
            '$ref': '#/components/schemas/InputTransform'
        },
        cache_ttl: {
            type: 'number'
        },
        timeout: {
            type: 'number'
        },
        delete_after_use: {
            type: 'boolean'
        },
        summary: {
            type: 'string'
        },
        mock: {
            type: 'object',
            properties: {
                enabled: {
                    type: 'boolean'
                },
                return_value: {}
            }
        },
        suspend: {
            type: 'object',
            properties: {
                required_events: {
                    type: 'integer'
                },
                timeout: {
                    type: 'integer'
                },
                resume_form: {
                    type: 'object',
                    properties: {
                        schema: {
                            type: 'object'
                        }
                    }
                },
                user_auth_required: {
                    type: 'boolean'
                },
                user_groups_required: {
                    '$ref': '#/components/schemas/InputTransform'
                },
                self_approval_disabled: {
                    type: 'boolean'
                },
                hide_cancel: {
                    type: 'boolean'
                }
            }
        },
        priority: {
            type: 'number'
        },
        continue_on_error: {
            type: 'boolean'
        },
        retry: {
            '$ref': '#/components/schemas/Retry'
        }
    },
    required: ['value', 'id']
} as const;

export const $InputTransform = {
    oneOf: [
        {
            '$ref': '#/components/schemas/StaticTransform'
        },
        {
            '$ref': '#/components/schemas/JavascriptTransform'
        }
    ],
    discriminator: {
        propertyName: 'type',
        mapping: {
            static: '#/components/schemas/StaticTransform',
            javascript: '#/components/schemas/JavascriptTransform'
        }
    }
} as const;

export const $StaticTransform = {
    type: 'object',
    properties: {
        value: {},
        type: {
            type: 'string',
            enum: ['javascript']
        }
    },
    required: ['expr', 'type']
} as const;

export const $JavascriptTransform = {
    type: 'object',
    properties: {
        expr: {
            type: 'string'
        },
        type: {
            type: 'string',
            enum: ['javascript']
        }
    },
    required: ['expr', 'type']
} as const;

export const $FlowModuleValue = {
    oneOf: [
        {
            '$ref': '#/components/schemas/RawScript'
        },
        {
            '$ref': '#/components/schemas/PathScript'
        },
        {
            '$ref': '#/components/schemas/PathFlow'
        },
        {
            '$ref': '#/components/schemas/ForloopFlow'
        },
        {
            '$ref': '#/components/schemas/WhileloopFlow'
        },
        {
            '$ref': '#/components/schemas/BranchOne'
        },
        {
            '$ref': '#/components/schemas/BranchAll'
        },
        {
            '$ref': '#/components/schemas/Identity'
        }
    ],
    discriminator: {
        propertyName: 'type',
        mapping: {
            rawscript: '#/components/schemas/RawScript',
            script: '#/components/schemas/PathScript',
            flow: '#/components/schemas/PathFlow',
            forloopflow: '#/components/schemas/ForloopFlow',
            whileloopflow: '#/components/schemas/WhileloopFlow',
            branchone: '#/components/schemas/BranchOne',
            branchall: '#/components/schemas/BranchAll',
            identity: '#/components/schemas/Identity'
        }
    }
} as const;

export const $RawScript = {
    type: 'object',
    properties: {
        input_transforms: {
            type: 'object',
            additionalProperties: {
                '$ref': '#/components/schemas/InputTransform'
            }
        },
        content: {
            type: 'string'
        },
        language: {
            type: 'string',
            enum: ['deno', 'bun', 'python3', 'go', 'bash', 'powershell', 'postgresql', 'mysql', 'bigquery', 'snowflake', 'mssql', 'graphql', 'nativets', 'php']
        },
        path: {
            type: 'string'
        },
        lock: {
            type: 'string'
        },
        type: {
            type: 'string',
            enum: ['rawscript']
        },
        tag: {
            type: 'string'
        },
        concurrent_limit: {
            type: 'number'
        },
        concurrency_time_window_s: {
            type: 'number'
        },
        custom_concurrency_key: {
            type: 'string'
        }
    },
    required: ['type', 'content', 'language', 'input_transforms']
} as const;

export const $PathScript = {
    type: 'object',
    properties: {
        input_transforms: {
            type: 'object',
            additionalProperties: {
                '$ref': '#/components/schemas/InputTransform'
            }
        },
        path: {
            type: 'string'
        },
        hash: {
            type: 'string'
        },
        type: {
            type: 'string',
            enum: ['script']
        }
    },
    required: ['type', 'path', 'input_transforms']
} as const;

export const $PathFlow = {
    type: 'object',
    properties: {
        input_transforms: {
            type: 'object',
            additionalProperties: {
                '$ref': '#/components/schemas/InputTransform'
            }
        },
        path: {
            type: 'string'
        },
        type: {
            type: 'string',
            enum: ['flow']
        }
    },
    required: ['type', 'path', 'input_transforms']
} as const;

export const $ForloopFlow = {
    type: 'object',
    properties: {
        modules: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/FlowModule'
            }
        },
        iterator: {
            '$ref': '#/components/schemas/InputTransform'
        },
        skip_failures: {
            type: 'boolean'
        },
        type: {
            type: 'string',
            enum: ['forloopflow']
        },
        parallel: {
            type: 'boolean'
        },
        parallelism: {
            type: 'integer'
        }
    },
    required: ['modules', 'iterator', 'skip_failures', 'type']
} as const;

export const $WhileloopFlow = {
    type: 'object',
    properties: {
        modules: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/FlowModule'
            }
        },
        skip_failures: {
            type: 'boolean'
        },
        type: {
            type: 'string',
            enum: ['forloopflow']
        },
        parallel: {
            type: 'boolean'
        },
        parallelism: {
            type: 'integer'
        }
    },
    required: ['modules', 'skip_failures', 'type']
} as const;

export const $BranchOne = {
    type: 'object',
    properties: {
        branches: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    summary: {
                        type: 'string'
                    },
                    expr: {
                        type: 'string'
                    },
                    modules: {
                        type: 'array',
                        items: {
                            '$ref': '#/components/schemas/FlowModule'
                        }
                    }
                },
                required: ['modules', 'expr']
            }
        },
        default: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/FlowModule'
            },
            required: ['modules']
        },
        type: {
            type: 'string',
            enum: ['branchone']
        }
    },
    required: ['branches', 'default', 'type']
} as const;

export const $BranchAll = {
    type: 'object',
    properties: {
        branches: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    summary: {
                        type: 'string'
                    },
                    skip_failure: {
                        type: 'boolean'
                    },
                    modules: {
                        type: 'array',
                        items: {
                            '$ref': '#/components/schemas/FlowModule'
                        }
                    }
                },
                required: ['modules', 'expr']
            }
        },
        type: {
            type: 'string',
            enum: ['branchall']
        },
        parallel: {
            type: 'boolean'
        }
    },
    required: ['branches', 'type']
} as const;

export const $Identity = {
    type: 'object',
    properties: {
        type: {
            type: 'string',
            enum: ['identity']
        },
        flow: {
            type: 'boolean'
        }
    },
    required: ['type']
} as const;

export const $FlowStatus = {
    type: 'object',
    properties: {
        step: {
            type: 'integer'
        },
        modules: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/FlowStatusModule'
            }
        },
        user_states: {
            additionalProperties: true
        },
        failure_module: {
            allOf: [
                {
                    '$ref': '#/components/schemas/FlowStatusModule'
                },
                {
                    type: 'object',
                    properties: {
                        parent_module: {
                            type: 'string'
                        }
                    }
                }
            ]
        },
        retry: {
            type: 'object',
            properties: {
                fail_count: {
                    type: 'integer'
                },
                failed_jobs: {
                    type: 'array',
                    items: {
                        type: 'string',
                        format: 'uuid'
                    }
                }
            }
        }
    },
    required: ['step', 'modules', 'failure_module']
} as const;

export const $FlowStatusModule = {
    type: 'object',
    properties: {
        type: {
            type: 'string',
            enum: ['WaitingForPriorSteps', 'WaitingForEvents', 'WaitingForExecutor', 'InProgress', 'Success', 'Failure']
        },
        id: {
            type: 'string'
        },
        job: {
            type: 'string',
            format: 'uuid'
        },
        count: {
            type: 'integer'
        },
        iterator: {
            type: 'object',
            properties: {
                index: {
                    type: 'integer'
                },
                itered: {
                    type: 'array',
                    items: {}
                },
                args: {}
            }
        },
        flow_jobs: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        flow_jobs_success: {
            type: 'array',
            items: {
                type: 'boolean'
            }
        },
        branch_chosen: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['branch', 'default']
                },
                branch: {
                    type: 'integer'
                }
            },
            required: ['type']
        },
        branchall: {
            type: 'object',
            properties: {
                branch: {
                    type: 'integer'
                },
                len: {
                    type: 'integer'
                }
            },
            required: ['branch', 'len']
        },
        approvers: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    resume_id: {
                        type: 'integer'
                    },
                    approver: {
                        type: 'string'
                    }
                },
                required: ['resume_id', 'approver']
            }
        },
        failed_retries: {
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            }
        }
    },
    required: ['type']
} as const;