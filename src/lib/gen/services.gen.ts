// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { BackendVersionResponse, BackendUptodateResponse, GetLicenseIdResponse, GetOpenApiYamlResponse, GetAuditLogData, GetAuditLogResponse, ListAuditLogsData, ListAuditLogsResponse, LoginData, LoginResponse, LogoutResponse, GetUserData, GetUserResponse, UpdateUserData, UpdateUserResponse, IsOwnerOfPathData, IsOwnerOfPathResponse, SetPasswordData, SetPasswordResponse, CreateUserGloballyData, CreateUserGloballyResponse, GlobalUserUpdateData, GlobalUserUpdateResponse, GlobalUsernameInfoData, GlobalUsernameInfoResponse, GlobalUserRenameData, GlobalUserRenameResponse, GlobalUserDeleteData, GlobalUserDeleteResponse, GlobalUsersOverwriteData, GlobalUsersOverwriteResponse, GlobalUsersExportResponse, DeleteUserData, DeleteUserResponse, GetCurrentEmailResponse, RefreshUserTokenResponse, GetTutorialProgressResponse, UpdateTutorialProgressData, UpdateTutorialProgressResponse, LeaveInstanceResponse, GetUsageResponse, GetRunnableResponse, GlobalWhoamiResponse, ListWorkspaceInvitesResponse, WhoamiData, WhoamiResponse, AcceptInviteData, AcceptInviteResponse, DeclineInviteData, DeclineInviteResponse, WhoisData, WhoisResponse, ExistsEmailData, ExistsEmailResponse, ListUsersAsSuperAdminData, ListUsersAsSuperAdminResponse, ListUsersData, ListUsersResponse, ListUsersUsageData, ListUsersUsageResponse, ListUsernamesData, ListUsernamesResponse, UsernameToEmailData, UsernameToEmailResponse, CreateTokenData, CreateTokenResponse, CreateTokenImpersonateData, CreateTokenImpersonateResponse, DeleteTokenData, DeleteTokenResponse, ListTokensData, ListTokensResponse, LoginWithOauthData, LoginWithOauthResponse, ListWorkspacesResponse, IsDomainAllowedResponse, ListUserWorkspacesResponse, ListWorkspacesAsSuperAdminData, ListWorkspacesAsSuperAdminResponse, CreateWorkspaceData, CreateWorkspaceResponse, ExistsWorkspaceData, ExistsWorkspaceResponse, ExistsUsernameData, ExistsUsernameResponse, InviteUserData, InviteUserResponse, AddUserData, AddUserResponse, DeleteInviteData, DeleteInviteResponse, ArchiveWorkspaceData, ArchiveWorkspaceResponse, UnarchiveWorkspaceData, UnarchiveWorkspaceResponse, DeleteWorkspaceData, DeleteWorkspaceResponse, LeaveWorkspaceData, LeaveWorkspaceResponse, GetWorkspaceNameData, GetWorkspaceNameResponse, ChangeWorkspaceNameData, ChangeWorkspaceNameResponse, ChangeWorkspaceIdData, ChangeWorkspaceIdResponse, ListPendingInvitesData, ListPendingInvitesResponse, GetSettingsData, GetSettingsResponse, GetDeployToData, GetDeployToResponse, GetIsPremiumData, GetIsPremiumResponse, GetPremiumInfoData, GetPremiumInfoResponse, SetAutomaticBillingData, SetAutomaticBillingResponse, EditSlackCommandData, EditSlackCommandResponse, RunSlackMessageTestJobData, RunSlackMessageTestJobResponse, EditDeployToData, EditDeployToResponse, EditAutoInviteData, EditAutoInviteResponse, EditWebhookData, EditWebhookResponse, EditCopilotConfigData, EditCopilotConfigResponse, GetCopilotInfoData, GetCopilotInfoResponse, EditErrorHandlerData, EditErrorHandlerResponse, EditLargeFileStorageConfigData, EditLargeFileStorageConfigResponse, EditWorkspaceGitSyncConfigData, EditWorkspaceGitSyncConfigResponse, EditWorkspaceDeployUiSettingsData, EditWorkspaceDeployUiSettingsResponse, EditWorkspaceDefaultAppData, EditWorkspaceDefaultAppResponse, EditDefaultScriptsData, EditDefaultScriptsResponse, GetDefaultScriptsData, GetDefaultScriptsResponse, SetEnvironmentVariableData, SetEnvironmentVariableResponse, GetWorkspaceEncryptionKeyData, GetWorkspaceEncryptionKeyResponse, SetWorkspaceEncryptionKeyData, SetWorkspaceEncryptionKeyResponse, GetWorkspaceDefaultAppData, GetWorkspaceDefaultAppResponse, GetLargeFileStorageConfigData, GetLargeFileStorageConfigResponse, GetWorkspaceUsageData, GetWorkspaceUsageResponse, GetGlobalData, GetGlobalResponse, SetGlobalData, SetGlobalResponse, GetLocalResponse, TestSmtpData, TestSmtpResponse, TestLicenseKeyData, TestLicenseKeyResponse, TestObjectStorageConfigData, TestObjectStorageConfigResponse, SendStatsResponse, GetLatestKeyRenewalAttemptResponse, RenewLicenseKeyResponse, CreateCustomerPortalSessionResponse, TestMetadataData, TestMetadataResponse, ListGlobalSettingsResponse, GetOidcTokenData, GetOidcTokenResponse, CreateVariableData, CreateVariableResponse, EncryptValueData, EncryptValueResponse, DeleteVariableData, DeleteVariableResponse, UpdateVariableData, UpdateVariableResponse, GetVariableData, GetVariableResponse, GetVariableValueData, GetVariableValueResponse, ExistsVariableData, ExistsVariableResponse, ListVariableData, ListVariableResponse, ListContextualVariablesData, ListContextualVariablesResponse, ConnectSlackCallbackData, ConnectSlackCallbackResponse, ConnectCallbackData, ConnectCallbackResponse, CreateAccountData, CreateAccountResponse, RefreshTokenData, RefreshTokenResponse, DisconnectAccountData, DisconnectAccountResponse, DisconnectSlackData, DisconnectSlackResponse, ListOauthLoginsResponse, ListOauthConnectsResponse, GetOauthConnectData, GetOauthConnectResponse, CreateResourceData, CreateResourceResponse, DeleteResourceData, DeleteResourceResponse, UpdateResourceData, UpdateResourceResponse, UpdateResourceValueData, UpdateResourceValueResponse, GetResourceData, GetResourceResponse, GetResourceValueInterpolatedData, GetResourceValueInterpolatedResponse, GetResourceValueData, GetResourceValueResponse, ExistsResourceData, ExistsResourceResponse, ListResourceData, ListResourceResponse, ListSearchResourceData, ListSearchResourceResponse, ListResourceNamesData, ListResourceNamesResponse, CreateResourceTypeData, CreateResourceTypeResponse, DeleteResourceTypeData, DeleteResourceTypeResponse, UpdateResourceTypeData, UpdateResourceTypeResponse, GetResourceTypeData, GetResourceTypeResponse, ExistsResourceTypeData, ExistsResourceTypeResponse, ListResourceTypeData, ListResourceTypeResponse, ListResourceTypeNamesData, ListResourceTypeNamesResponse, QueryResourceTypesData, QueryResourceTypesResponse, ListHubIntegrationsData, ListHubIntegrationsResponse, ListHubFlowsResponse, GetHubFlowByIdData, GetHubFlowByIdResponse, ListFlowPathsData, ListFlowPathsResponse, ListSearchFlowData, ListSearchFlowResponse, ListFlowsData, ListFlowsResponse, GetFlowHistoryData, GetFlowHistoryResponse, GetFlowVersionData, GetFlowVersionResponse, UpdateFlowHistoryData, UpdateFlowHistoryResponse, GetFlowByPathData, GetFlowByPathResponse, ToggleWorkspaceErrorHandlerForFlowData, ToggleWorkspaceErrorHandlerForFlowResponse, GetFlowByPathWithDraftData, GetFlowByPathWithDraftResponse, ExistsFlowByPathData, ExistsFlowByPathResponse, CreateFlowData, CreateFlowResponse, UpdateFlowData, UpdateFlowResponse, ArchiveFlowByPathData, ArchiveFlowByPathResponse, DeleteFlowByPathData, DeleteFlowByPathResponse, GetFlowInputHistoryByPathData, GetFlowInputHistoryByPathResponse, ListHubAppsResponse, GetHubAppByIdData, GetHubAppByIdResponse, ListSearchAppData, ListSearchAppResponse, ListAppsData, ListAppsResponse, CreateAppData, CreateAppResponse, ExistsAppData, ExistsAppResponse, GetAppByPathData, GetAppByPathResponse, GetAppByPathWithDraftData, GetAppByPathWithDraftResponse, GetAppHistoryByPathData, GetAppHistoryByPathResponse, UpdateAppHistoryData, UpdateAppHistoryResponse, GetPublicAppBySecretData, GetPublicAppBySecretResponse, GetPublicResourceData, GetPublicResourceResponse, GetPublicSecretOfAppData, GetPublicSecretOfAppResponse, GetAppByVersionData, GetAppByVersionResponse, DeleteAppData, DeleteAppResponse, UpdateAppData, UpdateAppResponse, ExecuteComponentData, ExecuteComponentResponse, GetHubScriptContentByPathData, GetHubScriptContentByPathResponse, GetHubScriptByPathData, GetHubScriptByPathResponse, GetTopHubScriptsData, GetTopHubScriptsResponse, QueryHubScriptsData, QueryHubScriptsResponse, ListSearchScriptData, ListSearchScriptResponse, ListScriptsData, ListScriptsResponse, ListScriptPathsData, ListScriptPathsResponse, CreateScriptData, CreateScriptResponse, ToggleWorkspaceErrorHandlerForScriptData, ToggleWorkspaceErrorHandlerForScriptResponse, ArchiveScriptByPathData, ArchiveScriptByPathResponse, ArchiveScriptByHashData, ArchiveScriptByHashResponse, DeleteScriptByHashData, DeleteScriptByHashResponse, DeleteScriptByPathData, DeleteScriptByPathResponse, GetScriptByPathData, GetScriptByPathResponse, GetScriptByPathWithDraftData, GetScriptByPathWithDraftResponse, GetScriptHistoryByPathData, GetScriptHistoryByPathResponse, UpdateScriptHistoryData, UpdateScriptHistoryResponse, RawScriptByPathData, RawScriptByPathResponse, RawScriptByPathTokenedData, RawScriptByPathTokenedResponse, ExistsScriptByPathData, ExistsScriptByPathResponse, GetScriptByHashData, GetScriptByHashResponse, RawScriptByHashData, RawScriptByHashResponse, GetScriptDeploymentStatusData, GetScriptDeploymentStatusResponse, CreateDraftData, CreateDraftResponse, DeleteDraftData, DeleteDraftResponse, GetCustomTagsResponse, GeDefaultTagsResponse, IsDefaultTagsPerWorkspaceResponse, ListWorkersData, ListWorkersResponse, ExistsWorkerWithTagData, ExistsWorkerWithTagResponse, GetQueueMetricsResponse, RunScriptByPathData, RunScriptByPathResponse, OpenaiSyncScriptByPathData, OpenaiSyncScriptByPathResponse, RunWaitResultScriptByPathData, RunWaitResultScriptByPathResponse, RunWaitResultScriptByPathGetData, RunWaitResultScriptByPathGetResponse, OpenaiSyncFlowByPathData, OpenaiSyncFlowByPathResponse, RunWaitResultFlowByPathData, RunWaitResultFlowByPathResponse, ResultByIdData, ResultByIdResponse, RunFlowByPathData, RunFlowByPathResponse, RestartFlowAtStepData, RestartFlowAtStepResponse, RunScriptByHashData, RunScriptByHashResponse, RunScriptPreviewData, RunScriptPreviewResponse, RunCodeWorkflowTaskData, RunCodeWorkflowTaskResponse, RunRawScriptDependenciesData, RunRawScriptDependenciesResponse, RunFlowPreviewData, RunFlowPreviewResponse, ListQueueData, ListQueueResponse, GetQueueCountData, GetQueueCountResponse, GetCompletedCountData, GetCompletedCountResponse, ListFilteredUuidsData, ListFilteredUuidsResponse, CancelSelectionData, CancelSelectionResponse, ListCompletedJobsData, ListCompletedJobsResponse, ListJobsData, ListJobsResponse, GetDbClockResponse, GetJobData, GetJobResponse, GetRootJobIdData, GetRootJobIdResponse, GetJobLogsData, GetJobLogsResponse, GetJobArgsData, GetJobArgsResponse, GetJobUpdatesData, GetJobUpdatesResponse, GetLogFileFromStoreData, GetLogFileFromStoreResponse, GetFlowDebugInfoData, GetFlowDebugInfoResponse, GetCompletedJobData, GetCompletedJobResponse, GetCompletedJobResultData, GetCompletedJobResultResponse, GetCompletedJobResultMaybeData, GetCompletedJobResultMaybeResponse, DeleteCompletedJobData, DeleteCompletedJobResponse, CancelQueuedJobData, CancelQueuedJobResponse, CancelPersistentQueuedJobsData, CancelPersistentQueuedJobsResponse, ForceCancelQueuedJobData, ForceCancelQueuedJobResponse, CreateJobSignatureData, CreateJobSignatureResponse, GetResumeUrlsData, GetResumeUrlsResponse, ResumeSuspendedJobGetData, ResumeSuspendedJobGetResponse, ResumeSuspendedJobPostData, ResumeSuspendedJobPostResponse, SetFlowUserStateData, SetFlowUserStateResponse, GetFlowUserStateData, GetFlowUserStateResponse, ResumeSuspendedFlowAsOwnerData, ResumeSuspendedFlowAsOwnerResponse, CancelSuspendedJobGetData, CancelSuspendedJobGetResponse, CancelSuspendedJobPostData, CancelSuspendedJobPostResponse, GetSuspendedJobFlowData, GetSuspendedJobFlowResponse, ListExtendedJobsData, ListExtendedJobsResponse, ListRawAppsData, ListRawAppsResponse, ExistsRawAppData, ExistsRawAppResponse, GetRawAppDataData, GetRawAppDataResponse, CreateRawAppData, CreateRawAppResponse, UpdateRawAppData, UpdateRawAppResponse, DeleteRawAppData, DeleteRawAppResponse, PreviewScheduleData, PreviewScheduleResponse, CreateScheduleData, CreateScheduleResponse, UpdateScheduleData, UpdateScheduleResponse, SetScheduleEnabledData, SetScheduleEnabledResponse, DeleteScheduleData, DeleteScheduleResponse, GetScheduleData, GetScheduleResponse, ExistsScheduleData, ExistsScheduleResponse, ListSchedulesData, ListSchedulesResponse, ListSchedulesWithJobsData, ListSchedulesWithJobsResponse, SetDefaultErrorOrRecoveryHandlerData, SetDefaultErrorOrRecoveryHandlerResponse, ListInstanceGroupsResponse, GetInstanceGroupData, GetInstanceGroupResponse, CreateInstanceGroupData, CreateInstanceGroupResponse, UpdateInstanceGroupData, UpdateInstanceGroupResponse, DeleteInstanceGroupData, DeleteInstanceGroupResponse, AddUserToInstanceGroupData, AddUserToInstanceGroupResponse, RemoveUserFromInstanceGroupData, RemoveUserFromInstanceGroupResponse, ExportInstanceGroupsResponse, OverwriteInstanceGroupsData, OverwriteInstanceGroupsResponse, ListGroupsData, ListGroupsResponse, ListGroupNamesData, ListGroupNamesResponse, CreateGroupData, CreateGroupResponse, UpdateGroupData, UpdateGroupResponse, DeleteGroupData, DeleteGroupResponse, GetGroupData, GetGroupResponse, AddUserToGroupData, AddUserToGroupResponse, RemoveUserToGroupData, RemoveUserToGroupResponse, ListFoldersData, ListFoldersResponse, ListFolderNamesData, ListFolderNamesResponse, CreateFolderData, CreateFolderResponse, UpdateFolderData, UpdateFolderResponse, DeleteFolderData, DeleteFolderResponse, GetFolderData, GetFolderResponse, GetFolderUsageData, GetFolderUsageResponse, AddOwnerToFolderData, AddOwnerToFolderResponse, RemoveOwnerToFolderData, RemoveOwnerToFolderResponse, ListWorkerGroupsResponse, GetConfigData, GetConfigResponse, UpdateConfigData, UpdateConfigResponse, DeleteConfigData, DeleteConfigResponse, ListConfigsResponse, GetGranularAclsData, GetGranularAclsResponse, AddGranularAclsData, AddGranularAclsResponse, RemoveGranularAclsData, RemoveGranularAclsResponse, UpdateCaptureData, UpdateCaptureResponse, CreateCaptureData, CreateCaptureResponse, GetCaptureData, GetCaptureResponse, StarData, StarResponse, UnstarData, UnstarResponse, GetInputHistoryData, GetInputHistoryResponse, GetArgsFromHistoryOrSavedInputData, GetArgsFromHistoryOrSavedInputResponse, ListInputsData, ListInputsResponse, CreateInputData, CreateInputResponse, UpdateInputData, UpdateInputResponse, DeleteInputData, DeleteInputResponse, DuckdbConnectionSettingsData, DuckdbConnectionSettingsResponse, DuckdbConnectionSettingsV2Data, DuckdbConnectionSettingsV2Response, PolarsConnectionSettingsData, PolarsConnectionSettingsResponse, PolarsConnectionSettingsV2Data, PolarsConnectionSettingsV2Response, S3ResourceInfoData, S3ResourceInfoResponse, DatasetStorageTestConnectionData, DatasetStorageTestConnectionResponse, ListStoredFilesData, ListStoredFilesResponse, LoadFileMetadataData, LoadFileMetadataResponse, LoadFilePreviewData, LoadFilePreviewResponse, LoadParquetPreviewData, LoadParquetPreviewResponse, LoadCsvPreviewData, LoadCsvPreviewResponse, DeleteS3FileData, DeleteS3FileResponse, MoveS3FileData, MoveS3FileResponse, FileUploadData, FileUploadResponse, FileDownloadData, FileDownloadResponse, FileDownloadParquetAsCsvData, FileDownloadParquetAsCsvResponse, GetJobMetricsData, GetJobMetricsResponse, ListConcurrencyGroupsResponse, DeleteConcurrencyGroupData, DeleteConcurrencyGroupResponse, GetConcurrencyKeyData, GetConcurrencyKeyResponse, SearchJobsIndexData, SearchJobsIndexResponse } from './types.gen';

export class SettingsService {
    /**
     * get backend version
     * @returns string git version of backend
     * @throws ApiError
     */
    public static backendVersion(): CancelablePromise<BackendVersionResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/version'
        });
    }
    
    /**
     * is backend up to date
     * @returns string is backend up to date
     * @throws ApiError
     */
    public static backendUptodate(): CancelablePromise<BackendUptodateResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/uptodate'
        });
    }
    
    /**
     * get license id
     * @returns string get license id (empty if not ee)
     * @throws ApiError
     */
    public static getLicenseId(): CancelablePromise<GetLicenseIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/ee_license'
        });
    }
    
    /**
     * get openapi yaml spec
     * @returns string openapi yaml file content
     * @throws ApiError
     */
    public static getOpenApiYaml(): CancelablePromise<GetOpenApiYamlResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/openapi.yaml'
        });
    }
    
}

export class AuditService {
    /**
     * get audit log (requires admin privilege)
     * @param data The data for the request.
     * @param data.workspace
     * @param data.id
     * @returns AuditLog an audit log
     * @throws ApiError
     */
    public static getAuditLog(data: GetAuditLogData): CancelablePromise<GetAuditLogResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/audit/get/{id}',
            path: {
                workspace: data.workspace,
                id: data.id
            }
        });
    }
    
    /**
     * list audit logs (requires admin privilege)
     * @param data The data for the request.
     * @param data.workspace
     * @param data.page which page to return (start at 1, default 1)
     * @param data.perPage number of items to return for a given page (default 30, max 100)
     * @param data.before filter on created before (exclusive) timestamp
     * @param data.after filter on created after (exclusive) timestamp
     * @param data.username filter on exact username of user
     * @param data.operation filter on exact or prefix name of operation
     * @param data.operations comma separated list of exact operations to include
     * @param data.excludeOperations comma separated list of operations to exclude
     * @param data.resource filter on exact or prefix name of resource
     * @param data.actionKind filter on type of operation
     * @returns AuditLog a list of audit logs
     * @throws ApiError
     */
    public static listAuditLogs(data: ListAuditLogsData): CancelablePromise<ListAuditLogsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/audit/list',
            path: {
                workspace: data.workspace
            },
            query: {
                page: data.page,
                per_page: data.perPage,
                before: data.before,
                after: data.after,
                username: data.username,
                operation: data.operation,
                operations: data.operations,
                exclude_operations: data.excludeOperations,
                resource: data.resource,
                action_kind: data.actionKind
            }
        });
    }
    
}

export class UserService {
    /**
     * login with password
     * @param data The data for the request.
     * @param data.requestBody credentials
     * @returns string Successfully authenticated. The session ID is returned in a cookie named `token` and as plaintext response. Preferred method of authorization is through the bearer token. The cookie is only for browser convenience.
     *
     * @throws ApiError
     */
    public static login(data: LoginData): CancelablePromise<LoginResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/auth/login',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * logout
     * @returns string clear cookies and clear token (if applicable)
     * @throws ApiError
     */
    public static logout(): CancelablePromise<LogoutResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/auth/logout'
        });
    }
    
    /**
     * get user (require admin privilege)
     * @param data The data for the request.
     * @param data.workspace
     * @param data.username
     * @returns User user created
     * @throws ApiError
     */
    public static getUser(data: GetUserData): CancelablePromise<GetUserResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/users/{username}',
            path: {
                workspace: data.workspace,
                username: data.username
            }
        });
    }
    
    /**
     * update user (require admin privilege)
     * @param data The data for the request.
     * @param data.workspace
     * @param data.username
     * @param data.requestBody new user
     * @returns string edited user
     * @throws ApiError
     */
    public static updateUser(data: UpdateUserData): CancelablePromise<UpdateUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/users/update/{username}',
            path: {
                workspace: data.workspace,
                username: data.username
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * is owner of path
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @returns boolean is owner
     * @throws ApiError
     */
    public static isOwnerOfPath(data: IsOwnerOfPathData): CancelablePromise<IsOwnerOfPathResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/users/is_owner/{path}',
            path: {
                workspace: data.workspace,
                path: data.path
            }
        });
    }
    
    /**
     * set password
     * @param data The data for the request.
     * @param data.requestBody set password
     * @returns string password set
     * @throws ApiError
     */
    public static setPassword(data: SetPasswordData): CancelablePromise<SetPasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/users/setpassword',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * create user
     * @param data The data for the request.
     * @param data.requestBody user info
     * @returns string user created
     * @throws ApiError
     */
    public static createUserGlobally(data: CreateUserGloballyData): CancelablePromise<CreateUserGloballyResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/users/create',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * global update user (require super admin)
     * @param data The data for the request.
     * @param data.email
     * @param data.requestBody new user info
     * @returns string user updated
     * @throws ApiError
     */
    public static globalUserUpdate(data: GlobalUserUpdateData): CancelablePromise<GlobalUserUpdateResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/users/update/{email}',
            path: {
                email: data.email
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * global username info (require super admin)
     * @param data The data for the request.
     * @param data.email
     * @returns unknown user renamed
     * @throws ApiError
     */
    public static globalUsernameInfo(data: GlobalUsernameInfoData): CancelablePromise<GlobalUsernameInfoResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/users/username_info/{email}',
            path: {
                email: data.email
            }
        });
    }
    
    /**
     * global rename user (require super admin)
     * @param data The data for the request.
     * @param data.email
     * @param data.requestBody new username
     * @returns string user renamed
     * @throws ApiError
     */
    public static globalUserRename(data: GlobalUserRenameData): CancelablePromise<GlobalUserRenameResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/users/rename/{email}',
            path: {
                email: data.email
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * global delete user (require super admin)
     * @param data The data for the request.
     * @param data.email
     * @returns string user deleted
     * @throws ApiError
     */
    public static globalUserDelete(data: GlobalUserDeleteData): CancelablePromise<GlobalUserDeleteResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/users/delete/{email}',
            path: {
                email: data.email
            }
        });
    }
    
    /**
     * global overwrite users (require super admin and EE)
     * @param data The data for the request.
     * @param data.requestBody List of users
     * @returns string Success message
     * @throws ApiError
     */
    public static globalUsersOverwrite(data: GlobalUsersOverwriteData): CancelablePromise<GlobalUsersOverwriteResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/users/overwrite',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * global export users (require super admin and EE)
     * @returns ExportedUser exported users
     * @throws ApiError
     */
    public static globalUsersExport(): CancelablePromise<GlobalUsersExportResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/users/export'
        });
    }
    
    /**
     * delete user (require admin privilege)
     * @param data The data for the request.
     * @param data.workspace
     * @param data.username
     * @returns string delete user
     * @throws ApiError
     */
    public static deleteUser(data: DeleteUserData): CancelablePromise<DeleteUserResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/w/{workspace}/users/delete/{username}',
            path: {
                workspace: data.workspace,
                username: data.username
            }
        });
    }
    
    /**
     * get current user email (if logged in)
     * @returns string user email
     * @throws ApiError
     */
    public static getCurrentEmail(): CancelablePromise<GetCurrentEmailResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/users/email'
        });
    }
    
    /**
     * refresh the current token
     * @returns string free usage
     * @throws ApiError
     */
    public static refreshUserToken(): CancelablePromise<RefreshUserTokenResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/users/refresh_token'
        });
    }
    
    /**
     * get tutorial progress
     * @returns unknown tutorial progress
     * @throws ApiError
     */
    public static getTutorialProgress(): CancelablePromise<GetTutorialProgressResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/users/tutorial_progress'
        });
    }
    
    /**
     * update tutorial progress
     * @param data The data for the request.
     * @param data.requestBody progress update
     * @returns string tutorial progress
     * @throws ApiError
     */
    public static updateTutorialProgress(data: UpdateTutorialProgressData): CancelablePromise<UpdateTutorialProgressResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/users/tutorial_progress',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * leave instance
     * @returns string status
     * @throws ApiError
     */
    public static leaveInstance(): CancelablePromise<LeaveInstanceResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/users/leave_instance'
        });
    }
    
    /**
     * get current usage outside of premium workspaces
     * @returns number free usage
     * @throws ApiError
     */
    public static getUsage(): CancelablePromise<GetUsageResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/users/usage'
        });
    }
    
    /**
     * get all runnables in every workspace
     * @returns unknown free all runnables
     * @throws ApiError
     */
    public static getRunnable(): CancelablePromise<GetRunnableResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/users/all_runnables'
        });
    }
    
    /**
     * get current global whoami (if logged in)
     * @returns GlobalUserInfo user email
     * @throws ApiError
     */
    public static globalWhoami(): CancelablePromise<GlobalWhoamiResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/users/whoami'
        });
    }
    
    /**
     * list all workspace invites
     * @returns WorkspaceInvite list all workspace invites
     * @throws ApiError
     */
    public static listWorkspaceInvites(): CancelablePromise<ListWorkspaceInvitesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/users/list_invites'
        });
    }
    
    /**
     * whoami
     * @param data The data for the request.
     * @param data.workspace
     * @returns User user
     * @throws ApiError
     */
    public static whoami(data: WhoamiData): CancelablePromise<WhoamiResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/users/whoami',
            path: {
                workspace: data.workspace
            }
        });
    }
    
    /**
     * accept invite to workspace
     * @param data The data for the request.
     * @param data.requestBody accept invite
     * @returns string status
     * @throws ApiError
     */
    public static acceptInvite(data: AcceptInviteData): CancelablePromise<AcceptInviteResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/users/accept_invite',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * decline invite to workspace
     * @param data The data for the request.
     * @param data.requestBody decline invite
     * @returns string status
     * @throws ApiError
     */
    public static declineInvite(data: DeclineInviteData): CancelablePromise<DeclineInviteResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/users/decline_invite',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * whois
     * @param data The data for the request.
     * @param data.workspace
     * @param data.username
     * @returns User user
     * @throws ApiError
     */
    public static whois(data: WhoisData): CancelablePromise<WhoisResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/users/whois/{username}',
            path: {
                workspace: data.workspace,
                username: data.username
            }
        });
    }
    
    /**
     * exists email
     * @param data The data for the request.
     * @param data.email
     * @returns boolean user
     * @throws ApiError
     */
    public static existsEmail(data: ExistsEmailData): CancelablePromise<ExistsEmailResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/users/exists/{email}',
            path: {
                email: data.email
            }
        });
    }
    
    /**
     * list all users as super admin (require to be super amdin)
     * @param data The data for the request.
     * @param data.page which page to return (start at 1, default 1)
     * @param data.perPage number of items to return for a given page (default 30, max 100)
     * @returns GlobalUserInfo user
     * @throws ApiError
     */
    public static listUsersAsSuperAdmin(data: ListUsersAsSuperAdminData = {}): CancelablePromise<ListUsersAsSuperAdminResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/users/list_as_super_admin',
            query: {
                page: data.page,
                per_page: data.perPage
            }
        });
    }
    
    /**
     * list users
     * @param data The data for the request.
     * @param data.workspace
     * @returns User user
     * @throws ApiError
     */
    public static listUsers(data: ListUsersData): CancelablePromise<ListUsersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/users/list',
            path: {
                workspace: data.workspace
            }
        });
    }
    
    /**
     * list users usage
     * @param data The data for the request.
     * @param data.workspace
     * @returns UserUsage user
     * @throws ApiError
     */
    public static listUsersUsage(data: ListUsersUsageData): CancelablePromise<ListUsersUsageResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/users/list_usage',
            path: {
                workspace: data.workspace
            }
        });
    }
    
    /**
     * list usernames
     * @param data The data for the request.
     * @param data.workspace
     * @returns string user
     * @throws ApiError
     */
    public static listUsernames(data: ListUsernamesData): CancelablePromise<ListUsernamesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/users/list_usernames',
            path: {
                workspace: data.workspace
            }
        });
    }
    
    /**
     * get email from username
     * @param data The data for the request.
     * @param data.workspace
     * @param data.username
     * @returns string email
     * @throws ApiError
     */
    public static usernameToEmail(data: UsernameToEmailData): CancelablePromise<UsernameToEmailResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/users/username_to_email/{username}',
            path: {
                workspace: data.workspace,
                username: data.username
            }
        });
    }
    
    /**
     * create token
     * @param data The data for the request.
     * @param data.requestBody new token
     * @returns string token created
     * @throws ApiError
     */
    public static createToken(data: CreateTokenData): CancelablePromise<CreateTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/users/tokens/create',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * create token to impersonate a user (require superadmin)
     * @param data The data for the request.
     * @param data.requestBody new token
     * @returns string token created
     * @throws ApiError
     */
    public static createTokenImpersonate(data: CreateTokenImpersonateData): CancelablePromise<CreateTokenImpersonateResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/users/tokens/impersonate',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * delete token
     * @param data The data for the request.
     * @param data.tokenPrefix
     * @returns string delete token
     * @throws ApiError
     */
    public static deleteToken(data: DeleteTokenData): CancelablePromise<DeleteTokenResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/users/tokens/delete/{token_prefix}',
            path: {
                token_prefix: data.tokenPrefix
            }
        });
    }
    
    /**
     * list token
     * @param data The data for the request.
     * @param data.excludeEphemeral
     * @param data.page which page to return (start at 1, default 1)
     * @param data.perPage number of items to return for a given page (default 30, max 100)
     * @returns TruncatedToken truncated token
     * @throws ApiError
     */
    public static listTokens(data: ListTokensData = {}): CancelablePromise<ListTokensResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/users/tokens/list',
            query: {
                exclude_ephemeral: data.excludeEphemeral,
                page: data.page,
                per_page: data.perPage
            }
        });
    }
    
    /**
     * login with oauth authorization flow
     * @param data The data for the request.
     * @param data.clientName
     * @param data.requestBody Partially filled script
     * @returns string Successfully authenticated. The session ID is returned in a cookie named `token` and as plaintext response. Preferred method of authorization is through the bearer token. The cookie is only for browser convenience.
     *
     * @throws ApiError
     */
    public static loginWithOauth(data: LoginWithOauthData): CancelablePromise<LoginWithOauthResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/oauth/login_callback/{client_name}',
            path: {
                client_name: data.clientName
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
}

export class AdminService {
    /**
     * get user (require admin privilege)
     * @param data The data for the request.
     * @param data.workspace
     * @param data.username
     * @returns User user created
     * @throws ApiError
     */
    public static getUser(data: GetUserData): CancelablePromise<GetUserResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/users/{username}',
            path: {
                workspace: data.workspace,
                username: data.username
            }
        });
    }
    
    /**
     * update user (require admin privilege)
     * @param data The data for the request.
     * @param data.workspace
     * @param data.username
     * @param data.requestBody new user
     * @returns string edited user
     * @throws ApiError
     */
    public static updateUser(data: UpdateUserData): CancelablePromise<UpdateUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/users/update/{username}',
            path: {
                workspace: data.workspace,
                username: data.username
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * delete user (require admin privilege)
     * @param data The data for the request.
     * @param data.workspace
     * @param data.username
     * @returns string delete user
     * @throws ApiError
     */
    public static deleteUser(data: DeleteUserData): CancelablePromise<DeleteUserResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/w/{workspace}/users/delete/{username}',
            path: {
                workspace: data.workspace,
                username: data.username
            }
        });
    }
    
}

export class WorkspaceService {
    /**
     * list all workspaces visible to me
     * @returns Workspace all workspaces
     * @throws ApiError
     */
    public static listWorkspaces(): CancelablePromise<ListWorkspacesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/workspaces/list'
        });
    }
    
    /**
     * is domain allowed for auto invi
     * @returns boolean domain allowed or not
     * @throws ApiError
     */
    public static isDomainAllowed(): CancelablePromise<IsDomainAllowedResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/workspaces/allowed_domain_auto_invite'
        });
    }
    
    /**
     * list all workspaces visible to me with user info
     * @returns UserWorkspaceList workspace with associated username
     * @throws ApiError
     */
    public static listUserWorkspaces(): CancelablePromise<ListUserWorkspacesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/workspaces/users'
        });
    }
    
    /**
     * list all workspaces as super admin (require to be super admin)
     * @param data The data for the request.
     * @param data.page which page to return (start at 1, default 1)
     * @param data.perPage number of items to return for a given page (default 30, max 100)
     * @returns Workspace workspaces
     * @throws ApiError
     */
    public static listWorkspacesAsSuperAdmin(data: ListWorkspacesAsSuperAdminData = {}): CancelablePromise<ListWorkspacesAsSuperAdminResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/workspaces/list_as_superadmin',
            query: {
                page: data.page,
                per_page: data.perPage
            }
        });
    }
    
    /**
     * create workspace
     * @param data The data for the request.
     * @param data.requestBody new token
     * @returns string token created
     * @throws ApiError
     */
    public static createWorkspace(data: CreateWorkspaceData): CancelablePromise<CreateWorkspaceResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/workspaces/create',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * exists workspace
     * @param data The data for the request.
     * @param data.requestBody id of workspace
     * @returns boolean status
     * @throws ApiError
     */
    public static existsWorkspace(data: ExistsWorkspaceData): CancelablePromise<ExistsWorkspaceResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/workspaces/exists',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * exists username
     * @param data The data for the request.
     * @param data.requestBody
     * @returns boolean status
     * @throws ApiError
     */
    public static existsUsername(data: ExistsUsernameData): CancelablePromise<ExistsUsernameResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/workspaces/exists_username',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * invite user to workspace
     * @param data The data for the request.
     * @param data.workspace
     * @param data.requestBody WorkspaceInvite
     * @returns string status
     * @throws ApiError
     */
    public static inviteUser(data: InviteUserData): CancelablePromise<InviteUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/workspaces/invite_user',
            path: {
                workspace: data.workspace
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * add user to workspace
     * @param data The data for the request.
     * @param data.workspace
     * @param data.requestBody WorkspaceInvite
     * @returns string status
     * @throws ApiError
     */
    public static addUser(data: AddUserData): CancelablePromise<AddUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/workspaces/add_user',
            path: {
                workspace: data.workspace
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * delete user invite
     * @param data The data for the request.
     * @param data.workspace
     * @param data.requestBody WorkspaceInvite
     * @returns string status
     * @throws ApiError
     */
    public static deleteInvite(data: DeleteInviteData): CancelablePromise<DeleteInviteResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/workspaces/delete_invite',
            path: {
                workspace: data.workspace
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * archive workspace
     * @param data The data for the request.
     * @param data.workspace
     * @returns string status
     * @throws ApiError
     */
    public static archiveWorkspace(data: ArchiveWorkspaceData): CancelablePromise<ArchiveWorkspaceResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/workspaces/archive',
            path: {
                workspace: data.workspace
            }
        });
    }
    
    /**
     * unarchive workspace
     * @param data The data for the request.
     * @param data.workspace
     * @returns string status
     * @throws ApiError
     */
    public static unarchiveWorkspace(data: UnarchiveWorkspaceData): CancelablePromise<UnarchiveWorkspaceResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/workspaces/unarchive/{workspace}',
            path: {
                workspace: data.workspace
            }
        });
    }
    
    /**
     * delete workspace (require super admin)
     * @param data The data for the request.
     * @param data.workspace
     * @returns string status
     * @throws ApiError
     */
    public static deleteWorkspace(data: DeleteWorkspaceData): CancelablePromise<DeleteWorkspaceResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/workspaces/delete/{workspace}',
            path: {
                workspace: data.workspace
            }
        });
    }
    
    /**
     * leave workspace
     * @param data The data for the request.
     * @param data.workspace
     * @returns string status
     * @throws ApiError
     */
    public static leaveWorkspace(data: LeaveWorkspaceData): CancelablePromise<LeaveWorkspaceResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/workspaces/leave',
            path: {
                workspace: data.workspace
            }
        });
    }
    
    /**
     * get workspace name
     * @param data The data for the request.
     * @param data.workspace
     * @returns string status
     * @throws ApiError
     */
    public static getWorkspaceName(data: GetWorkspaceNameData): CancelablePromise<GetWorkspaceNameResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/workspaces/get_workspace_name',
            path: {
                workspace: data.workspace
            }
        });
    }
    
    /**
     * change workspace name
     * @param data The data for the request.
     * @param data.workspace
     * @param data.requestBody
     * @returns string status
     * @throws ApiError
     */
    public static changeWorkspaceName(data: ChangeWorkspaceNameData): CancelablePromise<ChangeWorkspaceNameResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/workspaces/change_workspace_name',
            path: {
                workspace: data.workspace
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * change workspace id
     * @param data The data for the request.
     * @param data.workspace
     * @param data.requestBody
     * @returns string status
     * @throws ApiError
     */
    public static changeWorkspaceId(data: ChangeWorkspaceIdData): CancelablePromise<ChangeWorkspaceIdResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/workspaces/change_workspace_id',
            path: {
                workspace: data.workspace
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * list pending invites for a workspace
     * @param data The data for the request.
     * @param data.workspace
     * @returns WorkspaceInvite user
     * @throws ApiError
     */
    public static listPendingInvites(data: ListPendingInvitesData): CancelablePromise<ListPendingInvitesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/workspaces/list_pending_invites',
            path: {
                workspace: data.workspace
            }
        });
    }
    
    /**
     * get settings
     * @param data The data for the request.
     * @param data.workspace
     * @returns unknown status
     * @throws ApiError
     */
    public static getSettings(data: GetSettingsData): CancelablePromise<GetSettingsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/workspaces/get_settings',
            path: {
                workspace: data.workspace
            }
        });
    }
    
    /**
     * get deploy to
     * @param data The data for the request.
     * @param data.workspace
     * @returns unknown status
     * @throws ApiError
     */
    public static getDeployTo(data: GetDeployToData): CancelablePromise<GetDeployToResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/workspaces/get_deploy_to',
            path: {
                workspace: data.workspace
            }
        });
    }
    
    /**
     * get if workspace is premium
     * @param data The data for the request.
     * @param data.workspace
     * @returns boolean status
     * @throws ApiError
     */
    public static getIsPremium(data: GetIsPremiumData): CancelablePromise<GetIsPremiumResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/workspaces/is_premium',
            path: {
                workspace: data.workspace
            }
        });
    }
    
    /**
     * get premium info
     * @param data The data for the request.
     * @param data.workspace
     * @returns unknown status
     * @throws ApiError
     */
    public static getPremiumInfo(data: GetPremiumInfoData): CancelablePromise<GetPremiumInfoResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/workspaces/premium_info',
            path: {
                workspace: data.workspace
            }
        });
    }
    
    /**
     * set automatic billing
     * @param data The data for the request.
     * @param data.workspace
     * @param data.requestBody automatic billing
     * @returns string status
     * @throws ApiError
     */
    public static setAutomaticBilling(data: SetAutomaticBillingData): CancelablePromise<SetAutomaticBillingResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/workspaces/set_automatic_billing',
            path: {
                workspace: data.workspace
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * edit slack command
     * @param data The data for the request.
     * @param data.workspace
     * @param data.requestBody WorkspaceInvite
     * @returns string status
     * @throws ApiError
     */
    public static editSlackCommand(data: EditSlackCommandData): CancelablePromise<EditSlackCommandResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/workspaces/edit_slack_command',
            path: {
                workspace: data.workspace
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * run a job that sends a message to Slack
     * @param data The data for the request.
     * @param data.workspace
     * @param data.requestBody path to hub script to run and its corresponding args
     * @returns unknown status
     * @throws ApiError
     */
    public static runSlackMessageTestJob(data: RunSlackMessageTestJobData): CancelablePromise<RunSlackMessageTestJobResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/workspaces/run_slack_message_test_job',
            path: {
                workspace: data.workspace
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * edit deploy to
     * @param data The data for the request.
     * @param data.workspace
     * @param data.requestBody
     * @returns string status
     * @throws ApiError
     */
    public static editDeployTo(data: EditDeployToData): CancelablePromise<EditDeployToResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/workspaces/edit_deploy_to',
            path: {
                workspace: data.workspace
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * edit auto invite
     * @param data The data for the request.
     * @param data.workspace
     * @param data.requestBody WorkspaceInvite
     * @returns string status
     * @throws ApiError
     */
    public static editAutoInvite(data: EditAutoInviteData): CancelablePromise<EditAutoInviteResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/workspaces/edit_auto_invite',
            path: {
                workspace: data.workspace
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * edit webhook
     * @param data The data for the request.
     * @param data.workspace
     * @param data.requestBody WorkspaceWebhook
     * @returns string status
     * @throws ApiError
     */
    public static editWebhook(data: EditWebhookData): CancelablePromise<EditWebhookResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/workspaces/edit_webhook',
            path: {
                workspace: data.workspace
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * edit copilot config
     * @param data The data for the request.
     * @param data.workspace
     * @param data.requestBody WorkspaceCopilotConfig
     * @returns string status
     * @throws ApiError
     */
    public static editCopilotConfig(data: EditCopilotConfigData): CancelablePromise<EditCopilotConfigResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/workspaces/edit_copilot_config',
            path: {
                workspace: data.workspace
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * get copilot info
     * @param data The data for the request.
     * @param data.workspace
     * @returns unknown status
     * @throws ApiError
     */
    public static getCopilotInfo(data: GetCopilotInfoData): CancelablePromise<GetCopilotInfoResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/workspaces/get_copilot_info',
            path: {
                workspace: data.workspace
            }
        });
    }
    
    /**
     * edit error handler
     * @param data The data for the request.
     * @param data.workspace
     * @param data.requestBody WorkspaceErrorHandler
     * @returns string status
     * @throws ApiError
     */
    public static editErrorHandler(data: EditErrorHandlerData): CancelablePromise<EditErrorHandlerResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/workspaces/edit_error_handler',
            path: {
                workspace: data.workspace
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * edit large file storage settings
     * @param data The data for the request.
     * @param data.workspace
     * @param data.requestBody LargeFileStorage info
     * @returns unknown status
     * @throws ApiError
     */
    public static editLargeFileStorageConfig(data: EditLargeFileStorageConfigData): CancelablePromise<EditLargeFileStorageConfigResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/workspaces/edit_large_file_storage_config',
            path: {
                workspace: data.workspace
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * edit workspace git sync settings
     * @param data The data for the request.
     * @param data.workspace
     * @param data.requestBody Workspace Git sync settings
     * @returns unknown status
     * @throws ApiError
     */
    public static editWorkspaceGitSyncConfig(data: EditWorkspaceGitSyncConfigData): CancelablePromise<EditWorkspaceGitSyncConfigResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/workspaces/edit_git_sync_config',
            path: {
                workspace: data.workspace
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * edit workspace deploy ui settings
     * @param data The data for the request.
     * @param data.workspace
     * @param data.requestBody Workspace deploy UI settings
     * @returns unknown status
     * @throws ApiError
     */
    public static editWorkspaceDeployUiSettings(data: EditWorkspaceDeployUiSettingsData): CancelablePromise<EditWorkspaceDeployUiSettingsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/workspaces/edit_deploy_ui_config',
            path: {
                workspace: data.workspace
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * edit default app for workspace
     * @param data The data for the request.
     * @param data.workspace
     * @param data.requestBody Workspace default app
     * @returns string status
     * @throws ApiError
     */
    public static editWorkspaceDefaultApp(data: EditWorkspaceDefaultAppData): CancelablePromise<EditWorkspaceDefaultAppResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/workspaces/edit_default_app',
            path: {
                workspace: data.workspace
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * edit default scripts for workspace
     * @param data The data for the request.
     * @param data.workspace
     * @param data.requestBody Workspace default app
     * @returns string status
     * @throws ApiError
     */
    public static editDefaultScripts(data: EditDefaultScriptsData): CancelablePromise<EditDefaultScriptsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/workspaces/default_scripts',
            path: {
                workspace: data.workspace
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * get default scripts for workspace
     * @param data The data for the request.
     * @param data.workspace
     * @returns WorkspaceDefaultScripts status
     * @throws ApiError
     */
    public static getDefaultScripts(data: GetDefaultScriptsData): CancelablePromise<GetDefaultScriptsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/workspaces/default_scripts',
            path: {
                workspace: data.workspace
            }
        });
    }
    
    /**
     * set environment variable
     * @param data The data for the request.
     * @param data.workspace
     * @param data.requestBody Workspace default app
     * @returns string status
     * @throws ApiError
     */
    public static setEnvironmentVariable(data: SetEnvironmentVariableData): CancelablePromise<SetEnvironmentVariableResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/workspaces/set_environment_variable',
            path: {
                workspace: data.workspace
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * retrieves the encryption key for this workspace
     * @param data The data for the request.
     * @param data.workspace
     * @returns unknown status
     * @throws ApiError
     */
    public static getWorkspaceEncryptionKey(data: GetWorkspaceEncryptionKeyData): CancelablePromise<GetWorkspaceEncryptionKeyResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/workspaces/encryption_key',
            path: {
                workspace: data.workspace
            }
        });
    }
    
    /**
     * update the encryption key for this workspace
     * @param data The data for the request.
     * @param data.workspace
     * @param data.requestBody New encryption key
     * @returns string status
     * @throws ApiError
     */
    public static setWorkspaceEncryptionKey(data: SetWorkspaceEncryptionKeyData): CancelablePromise<SetWorkspaceEncryptionKeyResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/workspaces/encryption_key',
            path: {
                workspace: data.workspace
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * get default app for workspace
     * @param data The data for the request.
     * @param data.workspace
     * @returns unknown status
     * @throws ApiError
     */
    public static getWorkspaceDefaultApp(data: GetWorkspaceDefaultAppData): CancelablePromise<GetWorkspaceDefaultAppResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/workspaces/default_app',
            path: {
                workspace: data.workspace
            }
        });
    }
    
    /**
     * get large file storage config
     * @param data The data for the request.
     * @param data.workspace
     * @returns LargeFileStorage status
     * @throws ApiError
     */
    public static getLargeFileStorageConfig(data: GetLargeFileStorageConfigData): CancelablePromise<GetLargeFileStorageConfigResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/workspaces/get_large_file_storage_config',
            path: {
                workspace: data.workspace
            }
        });
    }
    
    /**
     * get usage
     * @param data The data for the request.
     * @param data.workspace
     * @returns number usage
     * @throws ApiError
     */
    public static getWorkspaceUsage(data: GetWorkspaceUsageData): CancelablePromise<GetWorkspaceUsageResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/workspaces/usage',
            path: {
                workspace: data.workspace
            }
        });
    }
    
}

export class SettingService {
    /**
     * get global settings
     * @param data The data for the request.
     * @param data.key
     * @returns unknown status
     * @throws ApiError
     */
    public static getGlobal(data: GetGlobalData): CancelablePromise<GetGlobalResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/settings/global/{key}',
            path: {
                key: data.key
            }
        });
    }
    
    /**
     * post global settings
     * @param data The data for the request.
     * @param data.key
     * @param data.requestBody value set
     * @returns string status
     * @throws ApiError
     */
    public static setGlobal(data: SetGlobalData): CancelablePromise<SetGlobalResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/settings/global/{key}',
            path: {
                key: data.key
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * get local settings
     * @returns unknown status
     * @throws ApiError
     */
    public static getLocal(): CancelablePromise<GetLocalResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/settings/local'
        });
    }
    
    /**
     * test smtp
     * @param data The data for the request.
     * @param data.requestBody test smtp payload
     * @returns string status
     * @throws ApiError
     */
    public static testSmtp(data: TestSmtpData): CancelablePromise<TestSmtpResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/settings/test_smtp',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * test license key
     * @param data The data for the request.
     * @param data.requestBody test license key
     * @returns string status
     * @throws ApiError
     */
    public static testLicenseKey(data: TestLicenseKeyData): CancelablePromise<TestLicenseKeyResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/settings/test_license_key',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * test object storage config
     * @param data The data for the request.
     * @param data.requestBody test object storage config
     * @returns string status
     * @throws ApiError
     */
    public static testObjectStorageConfig(data: TestObjectStorageConfigData): CancelablePromise<TestObjectStorageConfigResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/settings/test_object_storage_config',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * send stats
     * @returns string status
     * @throws ApiError
     */
    public static sendStats(): CancelablePromise<SendStatsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/settings/send_stats'
        });
    }
    
    /**
     * get latest key renewal attempt
     * @returns unknown status
     * @throws ApiError
     */
    public static getLatestKeyRenewalAttempt(): CancelablePromise<GetLatestKeyRenewalAttemptResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/settings/latest_key_renewal_attempt'
        });
    }
    
    /**
     * renew license key
     * @returns string status
     * @throws ApiError
     */
    public static renewLicenseKey(): CancelablePromise<RenewLicenseKeyResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/settings/renew_license_key'
        });
    }
    
    /**
     * create customer portal session
     * @returns string url to portal
     * @throws ApiError
     */
    public static createCustomerPortalSession(): CancelablePromise<CreateCustomerPortalSessionResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/settings/customer_portal'
        });
    }
    
    /**
     * test metadata
     * @param data The data for the request.
     * @param data.requestBody test metadata
     * @returns string status
     * @throws ApiError
     */
    public static testMetadata(data: TestMetadataData): CancelablePromise<TestMetadataResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/saml/test_metadata',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * list global settings
     * @returns GlobalSetting list of settings
     * @throws ApiError
     */
    public static listGlobalSettings(): CancelablePromise<ListGlobalSettingsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/settings/list_global'
        });
    }
    
}

export class OidcService {
    /**
     * get OIDC token (ee only)
     * @param data The data for the request.
     * @param data.workspace
     * @param data.audience
     * @returns string new oidc token
     * @throws ApiError
     */
    public static getOidcToken(data: GetOidcTokenData): CancelablePromise<GetOidcTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/oidc/token/{audience}',
            path: {
                workspace: data.workspace,
                audience: data.audience
            }
        });
    }
    
}

export class VariableService {
    /**
     * create variable
     * @param data The data for the request.
     * @param data.workspace
     * @param data.requestBody new variable
     * @param data.alreadyEncrypted
     * @returns string variable created
     * @throws ApiError
     */
    public static createVariable(data: CreateVariableData): CancelablePromise<CreateVariableResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/variables/create',
            path: {
                workspace: data.workspace
            },
            query: {
                already_encrypted: data.alreadyEncrypted
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * encrypt value
     * @param data The data for the request.
     * @param data.workspace
     * @param data.requestBody new variable
     * @returns string encrypted value
     * @throws ApiError
     */
    public static encryptValue(data: EncryptValueData): CancelablePromise<EncryptValueResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/variables/encrypt',
            path: {
                workspace: data.workspace
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * delete variable
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @returns string variable deleted
     * @throws ApiError
     */
    public static deleteVariable(data: DeleteVariableData): CancelablePromise<DeleteVariableResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/w/{workspace}/variables/delete/{path}',
            path: {
                workspace: data.workspace,
                path: data.path
            }
        });
    }
    
    /**
     * update variable
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @param data.requestBody updated variable
     * @param data.alreadyEncrypted
     * @returns string variable updated
     * @throws ApiError
     */
    public static updateVariable(data: UpdateVariableData): CancelablePromise<UpdateVariableResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/variables/update/{path}',
            path: {
                workspace: data.workspace,
                path: data.path
            },
            query: {
                already_encrypted: data.alreadyEncrypted
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * get variable
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @param data.decryptSecret ask to decrypt secret if this variable is secret
     * (if not secret no effect, default: true)
     *
     * @param data.includeEncrypted ask to include the encrypted value if secret and decrypt secret is not true (default: false)
     *
     * @returns ListableVariable variable
     * @throws ApiError
     */
    public static getVariable(data: GetVariableData): CancelablePromise<GetVariableResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/variables/get/{path}',
            path: {
                workspace: data.workspace,
                path: data.path
            },
            query: {
                decrypt_secret: data.decryptSecret,
                include_encrypted: data.includeEncrypted
            }
        });
    }
    
    /**
     * get variable value
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @returns string variable
     * @throws ApiError
     */
    public static getVariableValue(data: GetVariableValueData): CancelablePromise<GetVariableValueResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/variables/get_value/{path}',
            path: {
                workspace: data.workspace,
                path: data.path
            }
        });
    }
    
    /**
     * does variable exists at path
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @returns boolean variable
     * @throws ApiError
     */
    public static existsVariable(data: ExistsVariableData): CancelablePromise<ExistsVariableResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/variables/exists/{path}',
            path: {
                workspace: data.workspace,
                path: data.path
            }
        });
    }
    
    /**
     * list variables
     * @param data The data for the request.
     * @param data.workspace
     * @param data.pathStart
     * @param data.page which page to return (start at 1, default 1)
     * @param data.perPage number of items to return for a given page (default 30, max 100)
     * @returns ListableVariable variable list
     * @throws ApiError
     */
    public static listVariable(data: ListVariableData): CancelablePromise<ListVariableResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/variables/list',
            path: {
                workspace: data.workspace
            },
            query: {
                path_start: data.pathStart,
                page: data.page,
                per_page: data.perPage
            }
        });
    }
    
    /**
     * list contextual variables
     * @param data The data for the request.
     * @param data.workspace
     * @returns ContextualVariable contextual variable list
     * @throws ApiError
     */
    public static listContextualVariables(data: ListContextualVariablesData): CancelablePromise<ListContextualVariablesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/variables/list_contextual',
            path: {
                workspace: data.workspace
            }
        });
    }
    
}

export class OauthService {
    /**
     * connect slack callback
     * @param data The data for the request.
     * @param data.workspace
     * @param data.requestBody code endpoint
     * @returns string slack token
     * @throws ApiError
     */
    public static connectSlackCallback(data: ConnectSlackCallbackData): CancelablePromise<ConnectSlackCallbackResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/oauth/connect_slack_callback',
            path: {
                workspace: data.workspace
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * connect callback
     * @param data The data for the request.
     * @param data.clientName
     * @param data.requestBody code endpoint
     * @returns TokenResponse oauth token
     * @throws ApiError
     */
    public static connectCallback(data: ConnectCallbackData): CancelablePromise<ConnectCallbackResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/oauth/connect_callback/{client_name}',
            path: {
                client_name: data.clientName
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * create OAuth account
     * @param data The data for the request.
     * @param data.workspace
     * @param data.requestBody code endpoint
     * @returns string account set
     * @throws ApiError
     */
    public static createAccount(data: CreateAccountData): CancelablePromise<CreateAccountResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/oauth/create_account',
            path: {
                workspace: data.workspace
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * refresh token
     * @param data The data for the request.
     * @param data.workspace
     * @param data.id
     * @param data.requestBody variable path
     * @returns string token refreshed
     * @throws ApiError
     */
    public static refreshToken(data: RefreshTokenData): CancelablePromise<RefreshTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/oauth/refresh_token/{id}',
            path: {
                workspace: data.workspace,
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * disconnect account
     * @param data The data for the request.
     * @param data.workspace
     * @param data.id
     * @returns string disconnected client
     * @throws ApiError
     */
    public static disconnectAccount(data: DisconnectAccountData): CancelablePromise<DisconnectAccountResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/oauth/disconnect/{id}',
            path: {
                workspace: data.workspace,
                id: data.id
            }
        });
    }
    
    /**
     * disconnect slack
     * @param data The data for the request.
     * @param data.workspace
     * @returns string disconnected slack
     * @throws ApiError
     */
    public static disconnectSlack(data: DisconnectSlackData): CancelablePromise<DisconnectSlackResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/oauth/disconnect_slack',
            path: {
                workspace: data.workspace
            }
        });
    }
    
    /**
     * list oauth logins
     * @returns unknown list of oauth and saml login clients
     * @throws ApiError
     */
    public static listOauthLogins(): CancelablePromise<ListOauthLoginsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/oauth/list_logins'
        });
    }
    
    /**
     * list oauth connects
     * @returns string list of oauth connects clients
     * @throws ApiError
     */
    public static listOauthConnects(): CancelablePromise<ListOauthConnectsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/oauth/list_connects'
        });
    }
    
    /**
     * get oauth connect
     * @param data The data for the request.
     * @param data.client client name
     * @returns unknown get
     * @throws ApiError
     */
    public static getOauthConnect(data: GetOauthConnectData): CancelablePromise<GetOauthConnectResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/oauth/get_connect/{client}',
            path: {
                client: data.client
            }
        });
    }
    
}

export class ResourceService {
    /**
     * create resource
     * @param data The data for the request.
     * @param data.workspace
     * @param data.requestBody new resource
     * @param data.updateIfExists
     * @returns string resource created
     * @throws ApiError
     */
    public static createResource(data: CreateResourceData): CancelablePromise<CreateResourceResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/resources/create',
            path: {
                workspace: data.workspace
            },
            query: {
                update_if_exists: data.updateIfExists
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * delete resource
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @returns string resource deleted
     * @throws ApiError
     */
    public static deleteResource(data: DeleteResourceData): CancelablePromise<DeleteResourceResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/w/{workspace}/resources/delete/{path}',
            path: {
                workspace: data.workspace,
                path: data.path
            }
        });
    }
    
    /**
     * update resource
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @param data.requestBody updated resource
     * @returns string resource updated
     * @throws ApiError
     */
    public static updateResource(data: UpdateResourceData): CancelablePromise<UpdateResourceResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/resources/update/{path}',
            path: {
                workspace: data.workspace,
                path: data.path
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * update resource value
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @param data.requestBody updated resource
     * @returns string resource value updated
     * @throws ApiError
     */
    public static updateResourceValue(data: UpdateResourceValueData): CancelablePromise<UpdateResourceValueResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/resources/update_value/{path}',
            path: {
                workspace: data.workspace,
                path: data.path
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * get resource
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @returns Resource resource
     * @throws ApiError
     */
    public static getResource(data: GetResourceData): CancelablePromise<GetResourceResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/resources/get/{path}',
            path: {
                workspace: data.workspace,
                path: data.path
            }
        });
    }
    
    /**
     * get resource interpolated (variables and resources are fully unrolled)
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @param data.jobId job id
     * @returns unknown resource value
     * @throws ApiError
     */
    public static getResourceValueInterpolated(data: GetResourceValueInterpolatedData): CancelablePromise<GetResourceValueInterpolatedResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/resources/get_value_interpolated/{path}',
            path: {
                workspace: data.workspace,
                path: data.path
            },
            query: {
                job_id: data.jobId
            }
        });
    }
    
    /**
     * get resource value
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @returns unknown resource value
     * @throws ApiError
     */
    public static getResourceValue(data: GetResourceValueData): CancelablePromise<GetResourceValueResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/resources/get_value/{path}',
            path: {
                workspace: data.workspace,
                path: data.path
            }
        });
    }
    
    /**
     * does resource exists
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @returns boolean does resource exists
     * @throws ApiError
     */
    public static existsResource(data: ExistsResourceData): CancelablePromise<ExistsResourceResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/resources/exists/{path}',
            path: {
                workspace: data.workspace,
                path: data.path
            }
        });
    }
    
    /**
     * list resources
     * @param data The data for the request.
     * @param data.workspace
     * @param data.page which page to return (start at 1, default 1)
     * @param data.perPage number of items to return for a given page (default 30, max 100)
     * @param data.resourceType resource_types to list from, separated by ',',
     * @param data.resourceTypeExclude resource_types to not list from, separated by ',',
     * @param data.pathStart
     * @returns ListableResource resource list
     * @throws ApiError
     */
    public static listResource(data: ListResourceData): CancelablePromise<ListResourceResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/resources/list',
            path: {
                workspace: data.workspace
            },
            query: {
                page: data.page,
                per_page: data.perPage,
                resource_type: data.resourceType,
                resource_type_exclude: data.resourceTypeExclude,
                path_start: data.pathStart
            }
        });
    }
    
    /**
     * list resources for search
     * @param data The data for the request.
     * @param data.workspace
     * @returns unknown resource list
     * @throws ApiError
     */
    public static listSearchResource(data: ListSearchResourceData): CancelablePromise<ListSearchResourceResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/resources/list_search',
            path: {
                workspace: data.workspace
            }
        });
    }
    
    /**
     * list resource names
     * @param data The data for the request.
     * @param data.workspace
     * @param data.name
     * @returns unknown resource list names
     * @throws ApiError
     */
    public static listResourceNames(data: ListResourceNamesData): CancelablePromise<ListResourceNamesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/resources/list_names/{name}',
            path: {
                workspace: data.workspace,
                name: data.name
            }
        });
    }
    
    /**
     * create resource_type
     * @param data The data for the request.
     * @param data.workspace
     * @param data.requestBody new resource_type
     * @returns string resource_type created
     * @throws ApiError
     */
    public static createResourceType(data: CreateResourceTypeData): CancelablePromise<CreateResourceTypeResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/resources/type/create',
            path: {
                workspace: data.workspace
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * delete resource_type
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @returns string resource_type deleted
     * @throws ApiError
     */
    public static deleteResourceType(data: DeleteResourceTypeData): CancelablePromise<DeleteResourceTypeResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/w/{workspace}/resources/type/delete/{path}',
            path: {
                workspace: data.workspace,
                path: data.path
            }
        });
    }
    
    /**
     * update resource_type
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @param data.requestBody updated resource_type
     * @returns string resource_type updated
     * @throws ApiError
     */
    public static updateResourceType(data: UpdateResourceTypeData): CancelablePromise<UpdateResourceTypeResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/resources/type/update/{path}',
            path: {
                workspace: data.workspace,
                path: data.path
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * get resource_type
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @returns ResourceType resource_type deleted
     * @throws ApiError
     */
    public static getResourceType(data: GetResourceTypeData): CancelablePromise<GetResourceTypeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/resources/type/get/{path}',
            path: {
                workspace: data.workspace,
                path: data.path
            }
        });
    }
    
    /**
     * does resource_type exists
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @returns boolean does resource_type exist
     * @throws ApiError
     */
    public static existsResourceType(data: ExistsResourceTypeData): CancelablePromise<ExistsResourceTypeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/resources/type/exists/{path}',
            path: {
                workspace: data.workspace,
                path: data.path
            }
        });
    }
    
    /**
     * list resource_types
     * @param data The data for the request.
     * @param data.workspace
     * @returns ResourceType resource_type list
     * @throws ApiError
     */
    public static listResourceType(data: ListResourceTypeData): CancelablePromise<ListResourceTypeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/resources/type/list',
            path: {
                workspace: data.workspace
            }
        });
    }
    
    /**
     * list resource_types names
     * @param data The data for the request.
     * @param data.workspace
     * @returns string resource_type list
     * @throws ApiError
     */
    public static listResourceTypeNames(data: ListResourceTypeNamesData): CancelablePromise<ListResourceTypeNamesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/resources/type/listnames',
            path: {
                workspace: data.workspace
            }
        });
    }
    
    /**
     * query resource types by similarity
     * @param data The data for the request.
     * @param data.workspace
     * @param data.text query text
     * @param data.limit query limit
     * @returns unknown resource type details
     * @throws ApiError
     */
    public static queryResourceTypes(data: QueryResourceTypesData): CancelablePromise<QueryResourceTypesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/embeddings/query_resource_types',
            path: {
                workspace: data.workspace
            },
            query: {
                text: data.text,
                limit: data.limit
            }
        });
    }
    
}

export class IntegrationService {
    /**
     * list hub integrations
     * @param data The data for the request.
     * @param data.kind query integrations kind
     * @returns unknown integrations details
     * @throws ApiError
     */
    public static listHubIntegrations(data: ListHubIntegrationsData = {}): CancelablePromise<ListHubIntegrationsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/integrations/hub/list',
            query: {
                kind: data.kind
            }
        });
    }
    
}

export class FlowService {
    /**
     * list all hub flows
     * @returns unknown hub flows list
     * @throws ApiError
     */
    public static listHubFlows(): CancelablePromise<ListHubFlowsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/flows/hub/list'
        });
    }
    
    /**
     * get hub flow by id
     * @param data The data for the request.
     * @param data.id
     * @returns unknown flow
     * @throws ApiError
     */
    public static getHubFlowById(data: GetHubFlowByIdData): CancelablePromise<GetHubFlowByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/flows/hub/get/{id}',
            path: {
                id: data.id
            }
        });
    }
    
    /**
     * list all flow paths
     * @param data The data for the request.
     * @param data.workspace
     * @returns string list of flow paths
     * @throws ApiError
     */
    public static listFlowPaths(data: ListFlowPathsData): CancelablePromise<ListFlowPathsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/flows/list_paths',
            path: {
                workspace: data.workspace
            }
        });
    }
    
    /**
     * list flows for search
     * @param data The data for the request.
     * @param data.workspace
     * @returns unknown flow list
     * @throws ApiError
     */
    public static listSearchFlow(data: ListSearchFlowData): CancelablePromise<ListSearchFlowResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/flows/list_search',
            path: {
                workspace: data.workspace
            }
        });
    }
    
    /**
     * list all flows
     * @param data The data for the request.
     * @param data.workspace
     * @param data.page which page to return (start at 1, default 1)
     * @param data.perPage number of items to return for a given page (default 30, max 100)
     * @param data.orderDesc order by desc order (default true)
     * @param data.createdBy mask to filter exact matching user creator
     * @param data.pathStart mask to filter matching starting path
     * @param data.pathExact mask to filter exact matching path
     * @param data.showArchived (default false)
     * show only the archived files.
     * when multiple archived hash share the same path, only the ones with the latest create_at
     * are displayed.
     *
     * @param data.starredOnly (default false)
     * show only the starred items
     *
     * @param data.includeDraftOnly (default false)
     * include items that have no deployed version
     *
     * @param data.withDeploymentMsg (default false)
     * include deployment message
     *
     * @returns unknown All flow
     * @throws ApiError
     */
    public static listFlows(data: ListFlowsData): CancelablePromise<ListFlowsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/flows/list',
            path: {
                workspace: data.workspace
            },
            query: {
                page: data.page,
                per_page: data.perPage,
                order_desc: data.orderDesc,
                created_by: data.createdBy,
                path_start: data.pathStart,
                path_exact: data.pathExact,
                show_archived: data.showArchived,
                starred_only: data.starredOnly,
                include_draft_only: data.includeDraftOnly,
                with_deployment_msg: data.withDeploymentMsg
            }
        });
    }
    
    /**
     * get flow history by path
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @returns FlowVersion Flow history
     * @throws ApiError
     */
    public static getFlowHistory(data: GetFlowHistoryData): CancelablePromise<GetFlowHistoryResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/flows/history/p/{path}',
            path: {
                workspace: data.workspace,
                path: data.path
            }
        });
    }
    
    /**
     * get flow version
     * @param data The data for the request.
     * @param data.workspace
     * @param data.version
     * @param data.path
     * @returns Flow flow details
     * @throws ApiError
     */
    public static getFlowVersion(data: GetFlowVersionData): CancelablePromise<GetFlowVersionResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/flows/get/v/{version}/p/{path}',
            path: {
                workspace: data.workspace,
                version: data.version,
                path: data.path
            }
        });
    }
    
    /**
     * update flow history
     * @param data The data for the request.
     * @param data.workspace
     * @param data.version
     * @param data.path
     * @param data.requestBody Flow deployment message
     * @returns string success
     * @throws ApiError
     */
    public static updateFlowHistory(data: UpdateFlowHistoryData): CancelablePromise<UpdateFlowHistoryResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/flows/history_update/v/{version}/p/{path}',
            path: {
                workspace: data.workspace,
                version: data.version,
                path: data.path
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * get flow by path
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @returns Flow flow details
     * @throws ApiError
     */
    public static getFlowByPath(data: GetFlowByPathData): CancelablePromise<GetFlowByPathResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/flows/get/{path}',
            path: {
                workspace: data.workspace,
                path: data.path
            }
        });
    }
    
    /**
     * Toggle ON and OFF the workspace error handler for a given flow
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @param data.requestBody Workspace error handler enabled
     * @returns string error handler toggled
     * @throws ApiError
     */
    public static toggleWorkspaceErrorHandlerForFlow(data: ToggleWorkspaceErrorHandlerForFlowData): CancelablePromise<ToggleWorkspaceErrorHandlerForFlowResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/flows/toggle_workspace_error_handler/{path}',
            path: {
                workspace: data.workspace,
                path: data.path
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * get flow by path with draft
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @returns unknown flow details with draft
     * @throws ApiError
     */
    public static getFlowByPathWithDraft(data: GetFlowByPathWithDraftData): CancelablePromise<GetFlowByPathWithDraftResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/flows/get/draft/{path}',
            path: {
                workspace: data.workspace,
                path: data.path
            }
        });
    }
    
    /**
     * exists flow by path
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @returns boolean flow details
     * @throws ApiError
     */
    public static existsFlowByPath(data: ExistsFlowByPathData): CancelablePromise<ExistsFlowByPathResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/flows/exists/{path}',
            path: {
                workspace: data.workspace,
                path: data.path
            }
        });
    }
    
    /**
     * create flow
     * @param data The data for the request.
     * @param data.workspace
     * @param data.requestBody Partially filled flow
     * @returns string flow created
     * @throws ApiError
     */
    public static createFlow(data: CreateFlowData): CancelablePromise<CreateFlowResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/flows/create',
            path: {
                workspace: data.workspace
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * update flow
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @param data.requestBody Partially filled flow
     * @returns string flow updated
     * @throws ApiError
     */
    public static updateFlow(data: UpdateFlowData): CancelablePromise<UpdateFlowResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/flows/update/{path}',
            path: {
                workspace: data.workspace,
                path: data.path
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * archive flow by path
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @param data.requestBody archiveFlow
     * @returns string flow archived
     * @throws ApiError
     */
    public static archiveFlowByPath(data: ArchiveFlowByPathData): CancelablePromise<ArchiveFlowByPathResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/flows/archive/{path}',
            path: {
                workspace: data.workspace,
                path: data.path
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * delete flow by path
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @returns string flow delete
     * @throws ApiError
     */
    public static deleteFlowByPath(data: DeleteFlowByPathData): CancelablePromise<DeleteFlowByPathResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/w/{workspace}/flows/delete/{path}',
            path: {
                workspace: data.workspace,
                path: data.path
            }
        });
    }
    
    /**
     * list inputs for previous completed flow jobs
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @param data.page which page to return (start at 1, default 1)
     * @param data.perPage number of items to return for a given page (default 30, max 100)
     * @returns Input input history for completed jobs with this flow path
     * @throws ApiError
     */
    public static getFlowInputHistoryByPath(data: GetFlowInputHistoryByPathData): CancelablePromise<GetFlowInputHistoryByPathResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/flows/input_history/p/{path}',
            path: {
                workspace: data.workspace,
                path: data.path
            },
            query: {
                page: data.page,
                per_page: data.perPage
            }
        });
    }
    
}

export class AppService {
    /**
     * list all hub apps
     * @returns unknown hub apps list
     * @throws ApiError
     */
    public static listHubApps(): CancelablePromise<ListHubAppsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/apps/hub/list'
        });
    }
    
    /**
     * get hub app by id
     * @param data The data for the request.
     * @param data.id
     * @returns unknown app
     * @throws ApiError
     */
    public static getHubAppById(data: GetHubAppByIdData): CancelablePromise<GetHubAppByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/apps/hub/get/{id}',
            path: {
                id: data.id
            }
        });
    }
    
    /**
     * list apps for search
     * @param data The data for the request.
     * @param data.workspace
     * @returns unknown app list
     * @throws ApiError
     */
    public static listSearchApp(data: ListSearchAppData): CancelablePromise<ListSearchAppResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/apps/list_search',
            path: {
                workspace: data.workspace
            }
        });
    }
    
    /**
     * list all apps
     * @param data The data for the request.
     * @param data.workspace
     * @param data.page which page to return (start at 1, default 1)
     * @param data.perPage number of items to return for a given page (default 30, max 100)
     * @param data.orderDesc order by desc order (default true)
     * @param data.createdBy mask to filter exact matching user creator
     * @param data.pathStart mask to filter matching starting path
     * @param data.pathExact mask to filter exact matching path
     * @param data.starredOnly (default false)
     * show only the starred items
     *
     * @param data.includeDraftOnly (default false)
     * include items that have no deployed version
     *
     * @param data.withDeploymentMsg (default false)
     * include deployment message
     *
     * @returns ListableApp All apps
     * @throws ApiError
     */
    public static listApps(data: ListAppsData): CancelablePromise<ListAppsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/apps/list',
            path: {
                workspace: data.workspace
            },
            query: {
                page: data.page,
                per_page: data.perPage,
                order_desc: data.orderDesc,
                created_by: data.createdBy,
                path_start: data.pathStart,
                path_exact: data.pathExact,
                starred_only: data.starredOnly,
                include_draft_only: data.includeDraftOnly,
                with_deployment_msg: data.withDeploymentMsg
            }
        });
    }
    
    /**
     * create app
     * @param data The data for the request.
     * @param data.workspace
     * @param data.requestBody new app
     * @returns string app created
     * @throws ApiError
     */
    public static createApp(data: CreateAppData): CancelablePromise<CreateAppResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/apps/create',
            path: {
                workspace: data.workspace
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * does an app exisst at path
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @returns boolean app exists
     * @throws ApiError
     */
    public static existsApp(data: ExistsAppData): CancelablePromise<ExistsAppResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/apps/exists/{path}',
            path: {
                workspace: data.workspace,
                path: data.path
            }
        });
    }
    
    /**
     * get app by path
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @returns AppWithLastVersion app details
     * @throws ApiError
     */
    public static getAppByPath(data: GetAppByPathData): CancelablePromise<GetAppByPathResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/apps/get/p/{path}',
            path: {
                workspace: data.workspace,
                path: data.path
            }
        });
    }
    
    /**
     * get app by path with draft
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @returns AppWithLastVersionWDraft app details with draft
     * @throws ApiError
     */
    public static getAppByPathWithDraft(data: GetAppByPathWithDraftData): CancelablePromise<GetAppByPathWithDraftResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/apps/get/draft/{path}',
            path: {
                workspace: data.workspace,
                path: data.path
            }
        });
    }
    
    /**
     * get app history by path
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @returns AppHistory app history
     * @throws ApiError
     */
    public static getAppHistoryByPath(data: GetAppHistoryByPathData): CancelablePromise<GetAppHistoryByPathResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/apps/history/p/{path}',
            path: {
                workspace: data.workspace,
                path: data.path
            }
        });
    }
    
    /**
     * update app history
     * @param data The data for the request.
     * @param data.workspace
     * @param data.id
     * @param data.version
     * @param data.requestBody App deployment message
     * @returns string success
     * @throws ApiError
     */
    public static updateAppHistory(data: UpdateAppHistoryData): CancelablePromise<UpdateAppHistoryResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/apps/history_update/a/{id}/v/{version}',
            path: {
                workspace: data.workspace,
                id: data.id,
                version: data.version
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * get public app by secret
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @returns AppWithLastVersion app details
     * @throws ApiError
     */
    public static getPublicAppBySecret(data: GetPublicAppBySecretData): CancelablePromise<GetPublicAppBySecretResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/apps_u/public_app/{path}',
            path: {
                workspace: data.workspace,
                path: data.path
            }
        });
    }
    
    /**
     * get public resource
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @returns unknown resource value
     * @throws ApiError
     */
    public static getPublicResource(data: GetPublicResourceData): CancelablePromise<GetPublicResourceResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/apps_u/public_resource/{path}',
            path: {
                workspace: data.workspace,
                path: data.path
            }
        });
    }
    
    /**
     * get public secret of app
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @returns string app secret
     * @throws ApiError
     */
    public static getPublicSecretOfApp(data: GetPublicSecretOfAppData): CancelablePromise<GetPublicSecretOfAppResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/apps/secret_of/{path}',
            path: {
                workspace: data.workspace,
                path: data.path
            }
        });
    }
    
    /**
     * get app by version
     * @param data The data for the request.
     * @param data.workspace
     * @param data.id
     * @returns AppWithLastVersion app details
     * @throws ApiError
     */
    public static getAppByVersion(data: GetAppByVersionData): CancelablePromise<GetAppByVersionResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/apps/get/v/{id}',
            path: {
                workspace: data.workspace,
                id: data.id
            }
        });
    }
    
    /**
     * delete app
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @returns string app deleted
     * @throws ApiError
     */
    public static deleteApp(data: DeleteAppData): CancelablePromise<DeleteAppResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/w/{workspace}/apps/delete/{path}',
            path: {
                workspace: data.workspace,
                path: data.path
            }
        });
    }
    
    /**
     * update app
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @param data.requestBody update app
     * @returns string app updated
     * @throws ApiError
     */
    public static updateApp(data: UpdateAppData): CancelablePromise<UpdateAppResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/apps/update/{path}',
            path: {
                workspace: data.workspace,
                path: data.path
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * executeComponent
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @param data.requestBody update app
     * @returns string job uuid
     * @throws ApiError
     */
    public static executeComponent(data: ExecuteComponentData): CancelablePromise<ExecuteComponentResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/apps_u/execute_component/{path}',
            path: {
                workspace: data.workspace,
                path: data.path
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
}

export class ScriptService {
    /**
     * get hub script content by path
     * @param data The data for the request.
     * @param data.path
     * @returns string script details
     * @throws ApiError
     */
    public static getHubScriptContentByPath(data: GetHubScriptContentByPathData): CancelablePromise<GetHubScriptContentByPathResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/scripts/hub/get/{path}',
            path: {
                path: data.path
            }
        });
    }
    
    /**
     * get full hub script by path
     * @param data The data for the request.
     * @param data.path
     * @returns unknown script details
     * @throws ApiError
     */
    public static getHubScriptByPath(data: GetHubScriptByPathData): CancelablePromise<GetHubScriptByPathResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/scripts/hub/get_full/{path}',
            path: {
                path: data.path
            }
        });
    }
    
    /**
     * get top hub scripts
     * @param data The data for the request.
     * @param data.limit query limit
     * @param data.app query scripts app
     * @param data.kind query scripts kind
     * @returns unknown hub scripts list
     * @throws ApiError
     */
    public static getTopHubScripts(data: GetTopHubScriptsData = {}): CancelablePromise<GetTopHubScriptsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/scripts/hub/top',
            query: {
                limit: data.limit,
                app: data.app,
                kind: data.kind
            }
        });
    }
    
    /**
     * query hub scripts by similarity
     * @param data The data for the request.
     * @param data.text query text
     * @param data.kind query scripts kind
     * @param data.limit query limit
     * @param data.app query scripts app
     * @returns unknown script details
     * @throws ApiError
     */
    public static queryHubScripts(data: QueryHubScriptsData): CancelablePromise<QueryHubScriptsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/embeddings/query_hub_scripts',
            query: {
                text: data.text,
                kind: data.kind,
                limit: data.limit,
                app: data.app
            }
        });
    }
    
    /**
     * list scripts for search
     * @param data The data for the request.
     * @param data.workspace
     * @returns unknown script list
     * @throws ApiError
     */
    public static listSearchScript(data: ListSearchScriptData): CancelablePromise<ListSearchScriptResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/scripts/list_search',
            path: {
                workspace: data.workspace
            }
        });
    }
    
    /**
     * list all scripts
     * @param data The data for the request.
     * @param data.workspace
     * @param data.page which page to return (start at 1, default 1)
     * @param data.perPage number of items to return for a given page (default 30, max 100)
     * @param data.orderDesc order by desc order (default true)
     * @param data.createdBy mask to filter exact matching user creator
     * @param data.pathStart mask to filter matching starting path
     * @param data.pathExact mask to filter exact matching path
     * @param data.firstParentHash mask to filter scripts whom first direct parent has exact hash
     * @param data.lastParentHash mask to filter scripts whom last parent in the chain has exact hash.
     * Beware that each script stores only a limited number of parents. Hence
     * the last parent hash for a script is not necessarily its top-most parent.
     * To find the top-most parent you will have to jump from last to last hash
     * until finding the parent
     *
     * @param data.parentHash is the hash present in the array of stored parent hashes for this script.
     * The same warning applies than for last_parent_hash. A script only store a
     * limited number of direct parent
     *
     * @param data.showArchived (default false)
     * show only the archived files.
     * when multiple archived hash share the same path, only the ones with the latest create_at
     * are
     * ed.
     *
     * @param data.includeWithoutMain (default false)
     * include scripts without an exported main function
     *
     * @param data.includeDraftOnly (default false)
     * include scripts that have no deployed version
     *
     * @param data.isTemplate (default regardless)
     * if true show only the templates
     * if false show only the non templates
     * if not defined, show all regardless of if the script is a template
     *
     * @param data.kinds (default regardless)
     * script kinds to filter, split by comma
     *
     * @param data.starredOnly (default false)
     * show only the starred items
     *
     * @param data.withDeploymentMsg (default false)
     * include deployment message
     *
     * @returns Script All scripts
     * @throws ApiError
     */
    public static listScripts(data: ListScriptsData): CancelablePromise<ListScriptsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/scripts/list',
            path: {
                workspace: data.workspace
            },
            query: {
                page: data.page,
                per_page: data.perPage,
                order_desc: data.orderDesc,
                created_by: data.createdBy,
                path_start: data.pathStart,
                path_exact: data.pathExact,
                first_parent_hash: data.firstParentHash,
                last_parent_hash: data.lastParentHash,
                parent_hash: data.parentHash,
                show_archived: data.showArchived,
                include_without_main: data.includeWithoutMain,
                include_draft_only: data.includeDraftOnly,
                is_template: data.isTemplate,
                kinds: data.kinds,
                starred_only: data.starredOnly,
                with_deployment_msg: data.withDeploymentMsg
            }
        });
    }
    
    /**
     * list all scripts paths
     * @param data The data for the request.
     * @param data.workspace
     * @returns string list of script paths
     * @throws ApiError
     */
    public static listScriptPaths(data: ListScriptPathsData): CancelablePromise<ListScriptPathsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/scripts/list_paths',
            path: {
                workspace: data.workspace
            }
        });
    }
    
    /**
     * create script
     * @param data The data for the request.
     * @param data.workspace
     * @param data.requestBody Partially filled script
     * @returns string script created
     * @throws ApiError
     */
    public static createScript(data: CreateScriptData): CancelablePromise<CreateScriptResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/scripts/create',
            path: {
                workspace: data.workspace
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * Toggle ON and OFF the workspace error handler for a given script
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @param data.requestBody Workspace error handler enabled
     * @returns string error handler toggled
     * @throws ApiError
     */
    public static toggleWorkspaceErrorHandlerForScript(data: ToggleWorkspaceErrorHandlerForScriptData): CancelablePromise<ToggleWorkspaceErrorHandlerForScriptResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/scripts/toggle_workspace_error_handler/p/{path}',
            path: {
                workspace: data.workspace,
                path: data.path
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * archive script by path
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @returns string script archived
     * @throws ApiError
     */
    public static archiveScriptByPath(data: ArchiveScriptByPathData): CancelablePromise<ArchiveScriptByPathResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/scripts/archive/p/{path}',
            path: {
                workspace: data.workspace,
                path: data.path
            }
        });
    }
    
    /**
     * archive script by hash
     * @param data The data for the request.
     * @param data.workspace
     * @param data.hash
     * @returns Script script details
     * @throws ApiError
     */
    public static archiveScriptByHash(data: ArchiveScriptByHashData): CancelablePromise<ArchiveScriptByHashResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/scripts/archive/h/{hash}',
            path: {
                workspace: data.workspace,
                hash: data.hash
            }
        });
    }
    
    /**
     * delete script by hash (erase content but keep hash, require admin)
     * @param data The data for the request.
     * @param data.workspace
     * @param data.hash
     * @returns Script script details
     * @throws ApiError
     */
    public static deleteScriptByHash(data: DeleteScriptByHashData): CancelablePromise<DeleteScriptByHashResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/scripts/delete/h/{hash}',
            path: {
                workspace: data.workspace,
                hash: data.hash
            }
        });
    }
    
    /**
     * delete all scripts at a given path (require admin)
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @returns string script path
     * @throws ApiError
     */
    public static deleteScriptByPath(data: DeleteScriptByPathData): CancelablePromise<DeleteScriptByPathResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/scripts/delete/p/{path}',
            path: {
                workspace: data.workspace,
                path: data.path
            }
        });
    }
    
    /**
     * get script by path
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @returns Script script details
     * @throws ApiError
     */
    public static getScriptByPath(data: GetScriptByPathData): CancelablePromise<GetScriptByPathResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/scripts/get/p/{path}',
            path: {
                workspace: data.workspace,
                path: data.path
            }
        });
    }
    
    /**
     * get script by path with draft
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @returns NewScriptWithDraft script details
     * @throws ApiError
     */
    public static getScriptByPathWithDraft(data: GetScriptByPathWithDraftData): CancelablePromise<GetScriptByPathWithDraftResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/scripts/get/draft/{path}',
            path: {
                workspace: data.workspace,
                path: data.path
            }
        });
    }
    
    /**
     * get history of a script by path
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @returns ScriptHistory script history
     * @throws ApiError
     */
    public static getScriptHistoryByPath(data: GetScriptHistoryByPathData): CancelablePromise<GetScriptHistoryByPathResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/scripts/history/p/{path}',
            path: {
                workspace: data.workspace,
                path: data.path
            }
        });
    }
    
    /**
     * update history of a script
     * @param data The data for the request.
     * @param data.workspace
     * @param data.hash
     * @param data.path
     * @param data.requestBody Script deployment message
     * @returns string success
     * @throws ApiError
     */
    public static updateScriptHistory(data: UpdateScriptHistoryData): CancelablePromise<UpdateScriptHistoryResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/scripts/history_update/h/{hash}/p/{path}',
            path: {
                workspace: data.workspace,
                hash: data.hash,
                path: data.path
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * raw script by path
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @returns string script content
     * @throws ApiError
     */
    public static rawScriptByPath(data: RawScriptByPathData): CancelablePromise<RawScriptByPathResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/scripts/raw/p/{path}',
            path: {
                workspace: data.workspace,
                path: data.path
            }
        });
    }
    
    /**
     * raw script by path with a token (mostly used by lsp to be used with import maps to resolve scripts)
     * @param data The data for the request.
     * @param data.workspace
     * @param data.token
     * @param data.path
     * @returns string script content
     * @throws ApiError
     */
    public static rawScriptByPathTokened(data: RawScriptByPathTokenedData): CancelablePromise<RawScriptByPathTokenedResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/scripts_u/tokened_raw/{workspace}/{token}/{path}',
            path: {
                workspace: data.workspace,
                token: data.token,
                path: data.path
            }
        });
    }
    
    /**
     * exists script by path
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @returns boolean does it exists
     * @throws ApiError
     */
    public static existsScriptByPath(data: ExistsScriptByPathData): CancelablePromise<ExistsScriptByPathResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/scripts/exists/p/{path}',
            path: {
                workspace: data.workspace,
                path: data.path
            }
        });
    }
    
    /**
     * get script by hash
     * @param data The data for the request.
     * @param data.workspace
     * @param data.hash
     * @returns Script script details
     * @throws ApiError
     */
    public static getScriptByHash(data: GetScriptByHashData): CancelablePromise<GetScriptByHashResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/scripts/get/h/{hash}',
            path: {
                workspace: data.workspace,
                hash: data.hash
            }
        });
    }
    
    /**
     * raw script by hash
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @returns string script content
     * @throws ApiError
     */
    public static rawScriptByHash(data: RawScriptByHashData): CancelablePromise<RawScriptByHashResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/scripts/raw/h/{path}',
            path: {
                workspace: data.workspace,
                path: data.path
            }
        });
    }
    
    /**
     * get script deployment status
     * @param data The data for the request.
     * @param data.workspace
     * @param data.hash
     * @returns unknown script details
     * @throws ApiError
     */
    public static getScriptDeploymentStatus(data: GetScriptDeploymentStatusData): CancelablePromise<GetScriptDeploymentStatusResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/scripts/deployment_status/h/{hash}',
            path: {
                workspace: data.workspace,
                hash: data.hash
            }
        });
    }
    
}

export class DraftService {
    /**
     * create draft
     * @param data The data for the request.
     * @param data.workspace
     * @param data.requestBody
     * @returns string draft created
     * @throws ApiError
     */
    public static createDraft(data: CreateDraftData): CancelablePromise<CreateDraftResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/drafts/create',
            path: {
                workspace: data.workspace
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * delete draft
     * @param data The data for the request.
     * @param data.workspace
     * @param data.kind
     * @param data.path
     * @returns string draft deleted
     * @throws ApiError
     */
    public static deleteDraft(data: DeleteDraftData): CancelablePromise<DeleteDraftResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/w/{workspace}/drafts/delete/{kind}/{path}',
            path: {
                workspace: data.workspace,
                kind: data.kind,
                path: data.path
            }
        });
    }
    
}

export class WorkerService {
    /**
     * get all instance custom tags (tags are used to dispatch jobs to different worker groups)
     * @returns string list of custom tags
     * @throws ApiError
     */
    public static getCustomTags(): CancelablePromise<GetCustomTagsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/workers/custom_tags'
        });
    }
    
    /**
     * get all instance default tags
     * @returns string list of default tags
     * @throws ApiError
     */
    public static geDefaultTags(): CancelablePromise<GeDefaultTagsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/workers/get_default_tags'
        });
    }
    
    /**
     * is default tags per workspace
     * @returns boolean is the default tags per workspace
     * @throws ApiError
     */
    public static isDefaultTagsPerWorkspace(): CancelablePromise<IsDefaultTagsPerWorkspaceResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/workers/is_default_tags_per_workspace'
        });
    }
    
    /**
     * list workers
     * @param data The data for the request.
     * @param data.page which page to return (start at 1, default 1)
     * @param data.perPage number of items to return for a given page (default 30, max 100)
     * @param data.pingSince number of seconds the worker must have had a last ping more recent of (default to 300)
     * @returns WorkerPing a list of workers
     * @throws ApiError
     */
    public static listWorkers(data: ListWorkersData = {}): CancelablePromise<ListWorkersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/workers/list',
            query: {
                page: data.page,
                per_page: data.perPage,
                ping_since: data.pingSince
            }
        });
    }
    
    /**
     * exists worker with tag
     * @param data The data for the request.
     * @param data.tag
     * @returns boolean whether a worker with the tag exists
     * @throws ApiError
     */
    public static existsWorkerWithTag(data: ExistsWorkerWithTagData): CancelablePromise<ExistsWorkerWithTagResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/workers/exists_worker_with_tag',
            query: {
                tag: data.tag
            }
        });
    }
    
    /**
     * get queue metrics
     * @returns unknown metrics
     * @throws ApiError
     */
    public static getQueueMetrics(): CancelablePromise<GetQueueMetricsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/workers/queue_metrics'
        });
    }
    
}

export class JobService {
    /**
     * run script by path
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @param data.requestBody script args
     * @param data.scheduledFor when to schedule this job (leave empty for immediate run)
     * @param data.scheduledInSecs schedule the script to execute in the number of seconds starting now
     * @param data.parentJob The parent job that is at the origin and responsible for the execution of this script if any
     * @param data.tag Override the tag to use
     * @param data.cacheTtl Override the cache time to live (in seconds). Can not be used to disable caching, only override with a new cache ttl
     * @param data.jobId The job id to assign to the created job. if missing, job is chosen randomly using the ULID scheme. If a job id already exists in the queue or as a completed job, the request to create one will fail (Bad Request)
     * @param data.invisibleToOwner make the run invisible to the the script owner (default false)
     * @returns string job created
     * @throws ApiError
     */
    public static runScriptByPath(data: RunScriptByPathData): CancelablePromise<RunScriptByPathResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/jobs/run/p/{path}',
            path: {
                workspace: data.workspace,
                path: data.path
            },
            query: {
                scheduled_for: data.scheduledFor,
                scheduled_in_secs: data.scheduledInSecs,
                parent_job: data.parentJob,
                tag: data.tag,
                cache_ttl: data.cacheTtl,
                job_id: data.jobId,
                invisible_to_owner: data.invisibleToOwner
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * run script by path in openai format
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @param data.requestBody script args
     * @param data.parentJob The parent job that is at the origin and responsible for the execution of this script if any
     * @param data.jobId The job id to assign to the created job. if missing, job is chosen randomly using the ULID scheme. If a job id already exists in the queue or as a completed job, the request to create one will fail (Bad Request)
     * @param data.includeHeader List of headers's keys (separated with ',') whove value are added to the args
     * Header's key lowercased and '-'' replaced to '_' such that 'Content-Type' becomes the 'content_type' arg key
     *
     * @param data.queueLimit The maximum size of the queue for which the request would get rejected if that job would push it above that limit
     *
     * @returns unknown job result
     * @throws ApiError
     */
    public static openaiSyncScriptByPath(data: OpenaiSyncScriptByPathData): CancelablePromise<OpenaiSyncScriptByPathResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/jobs/openai_sync/p/{path}',
            path: {
                workspace: data.workspace,
                path: data.path
            },
            query: {
                parent_job: data.parentJob,
                job_id: data.jobId,
                include_header: data.includeHeader,
                queue_limit: data.queueLimit
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * run script by path
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @param data.requestBody script args
     * @param data.parentJob The parent job that is at the origin and responsible for the execution of this script if any
     * @param data.tag Override the tag to use
     * @param data.cacheTtl Override the cache time to live (in seconds). Can not be used to disable caching, only override with a new cache ttl
     * @param data.jobId The job id to assign to the created job. if missing, job is chosen randomly using the ULID scheme. If a job id already exists in the queue or as a completed job, the request to create one will fail (Bad Request)
     * @param data.includeHeader List of headers's keys (separated with ',') whove value are added to the args
     * Header's key lowercased and '-'' replaced to '_' such that 'Content-Type' becomes the 'content_type' arg key
     *
     * @param data.queueLimit The maximum size of the queue for which the request would get rejected if that job would push it above that limit
     *
     * @returns unknown job result
     * @throws ApiError
     */
    public static runWaitResultScriptByPath(data: RunWaitResultScriptByPathData): CancelablePromise<RunWaitResultScriptByPathResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/jobs/run_wait_result/p/{path}',
            path: {
                workspace: data.workspace,
                path: data.path
            },
            query: {
                parent_job: data.parentJob,
                tag: data.tag,
                cache_ttl: data.cacheTtl,
                job_id: data.jobId,
                include_header: data.includeHeader,
                queue_limit: data.queueLimit
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * run script by path with get
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @param data.parentJob The parent job that is at the origin and responsible for the execution of this script if any
     * @param data.tag Override the tag to use
     * @param data.cacheTtl Override the cache time to live (in seconds). Can not be used to disable caching, only override with a new cache ttl
     * @param data.jobId The job id to assign to the created job. if missing, job is chosen randomly using the ULID scheme. If a job id already exists in the queue or as a completed job, the request to create one will fail (Bad Request)
     * @param data.includeHeader List of headers's keys (separated with ',') whove value are added to the args
     * Header's key lowercased and '-'' replaced to '_' such that 'Content-Type' becomes the 'content_type' arg key
     *
     * @param data.queueLimit The maximum size of the queue for which the request would get rejected if that job would push it above that limit
     *
     * @param data.payload The base64 encoded payload that has been encoded as a JSON. e.g how to encode such payload encodeURIComponent
     * `encodeURIComponent(btoa(JSON.stringify({a: 2})))`
     *
     * @returns unknown job result
     * @throws ApiError
     */
    public static runWaitResultScriptByPathGet(data: RunWaitResultScriptByPathGetData): CancelablePromise<RunWaitResultScriptByPathGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/jobs/run_wait_result/p/{path}',
            path: {
                workspace: data.workspace,
                path: data.path
            },
            query: {
                parent_job: data.parentJob,
                tag: data.tag,
                cache_ttl: data.cacheTtl,
                job_id: data.jobId,
                include_header: data.includeHeader,
                queue_limit: data.queueLimit,
                payload: data.payload
            }
        });
    }
    
    /**
     * run flow by path and wait until completion in openai format
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @param data.requestBody script args
     * @param data.includeHeader List of headers's keys (separated with ',') whove value are added to the args
     * Header's key lowercased and '-'' replaced to '_' such that 'Content-Type' becomes the 'content_type' arg key
     *
     * @param data.queueLimit The maximum size of the queue for which the request would get rejected if that job would push it above that limit
     *
     * @param data.jobId The job id to assign to the created job. if missing, job is chosen randomly using the ULID scheme. If a job id already exists in the queue or as a completed job, the request to create one will fail (Bad Request)
     * @returns unknown job result
     * @throws ApiError
     */
    public static openaiSyncFlowByPath(data: OpenaiSyncFlowByPathData): CancelablePromise<OpenaiSyncFlowByPathResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/jobs/openai_sync/f/{path}',
            path: {
                workspace: data.workspace,
                path: data.path
            },
            query: {
                include_header: data.includeHeader,
                queue_limit: data.queueLimit,
                job_id: data.jobId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * run flow by path and wait until completion
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @param data.requestBody script args
     * @param data.includeHeader List of headers's keys (separated with ',') whove value are added to the args
     * Header's key lowercased and '-'' replaced to '_' such that 'Content-Type' becomes the 'content_type' arg key
     *
     * @param data.queueLimit The maximum size of the queue for which the request would get rejected if that job would push it above that limit
     *
     * @param data.jobId The job id to assign to the created job. if missing, job is chosen randomly using the ULID scheme. If a job id already exists in the queue or as a completed job, the request to create one will fail (Bad Request)
     * @returns unknown job result
     * @throws ApiError
     */
    public static runWaitResultFlowByPath(data: RunWaitResultFlowByPathData): CancelablePromise<RunWaitResultFlowByPathResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/jobs/run_wait_result/f/{path}',
            path: {
                workspace: data.workspace,
                path: data.path
            },
            query: {
                include_header: data.includeHeader,
                queue_limit: data.queueLimit,
                job_id: data.jobId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * get job result by id
     * @param data The data for the request.
     * @param data.workspace
     * @param data.flowJobId
     * @param data.nodeId
     * @returns unknown job result
     * @throws ApiError
     */
    public static resultById(data: ResultByIdData): CancelablePromise<ResultByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/jobs/result_by_id/{flow_job_id}/{node_id}',
            path: {
                workspace: data.workspace,
                flow_job_id: data.flowJobId,
                node_id: data.nodeId
            }
        });
    }
    
    /**
     * run flow by path
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @param data.requestBody flow args
     * @param data.scheduledFor when to schedule this job (leave empty for immediate run)
     * @param data.scheduledInSecs schedule the script to execute in the number of seconds starting now
     * @param data.parentJob The parent job that is at the origin and responsible for the execution of this script if any
     * @param data.tag Override the tag to use
     * @param data.jobId The job id to assign to the created job. if missing, job is chosen randomly using the ULID scheme. If a job id already exists in the queue or as a completed job, the request to create one will fail (Bad Request)
     * @param data.includeHeader List of headers's keys (separated with ',') whove value are added to the args
     * Header's key lowercased and '-'' replaced to '_' such that 'Content-Type' becomes the 'content_type' arg key
     *
     * @param data.invisibleToOwner make the run invisible to the the flow owner (default false)
     * @returns string job created
     * @throws ApiError
     */
    public static runFlowByPath(data: RunFlowByPathData): CancelablePromise<RunFlowByPathResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/jobs/run/f/{path}',
            path: {
                workspace: data.workspace,
                path: data.path
            },
            query: {
                scheduled_for: data.scheduledFor,
                scheduled_in_secs: data.scheduledInSecs,
                parent_job: data.parentJob,
                tag: data.tag,
                job_id: data.jobId,
                include_header: data.includeHeader,
                invisible_to_owner: data.invisibleToOwner
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * restart a completed flow at a given step
     * @param data The data for the request.
     * @param data.workspace
     * @param data.id
     * @param data.stepId step id to restart the flow from
     * @param data.branchOrIterationN for branchall or loop, the iteration at which the flow should restart
     * @param data.requestBody flow args
     * @param data.scheduledFor when to schedule this job (leave empty for immediate run)
     * @param data.scheduledInSecs schedule the script to execute in the number of seconds starting now
     * @param data.parentJob The parent job that is at the origin and responsible for the execution of this script if any
     * @param data.tag Override the tag to use
     * @param data.jobId The job id to assign to the created job. if missing, job is chosen randomly using the ULID scheme. If a job id already exists in the queue or as a completed job, the request to create one will fail (Bad Request)
     * @param data.includeHeader List of headers's keys (separated with ',') whove value are added to the args
     * Header's key lowercased and '-'' replaced to '_' such that 'Content-Type' becomes the 'content_type' arg key
     *
     * @param data.invisibleToOwner make the run invisible to the the flow owner (default false)
     * @returns string job created
     * @throws ApiError
     */
    public static restartFlowAtStep(data: RestartFlowAtStepData): CancelablePromise<RestartFlowAtStepResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/jobs/restart/f/{id}/from/{step_id}/{branch_or_iteration_n}',
            path: {
                workspace: data.workspace,
                id: data.id,
                step_id: data.stepId,
                branch_or_iteration_n: data.branchOrIterationN
            },
            query: {
                scheduled_for: data.scheduledFor,
                scheduled_in_secs: data.scheduledInSecs,
                parent_job: data.parentJob,
                tag: data.tag,
                job_id: data.jobId,
                include_header: data.includeHeader,
                invisible_to_owner: data.invisibleToOwner
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * run script by hash
     * @param data The data for the request.
     * @param data.workspace
     * @param data.hash
     * @param data.requestBody Partially filled args
     * @param data.scheduledFor when to schedule this job (leave empty for immediate run)
     * @param data.scheduledInSecs schedule the script to execute in the number of seconds starting now
     * @param data.parentJob The parent job that is at the origin and responsible for the execution of this script if any
     * @param data.tag Override the tag to use
     * @param data.cacheTtl Override the cache time to live (in seconds). Can not be used to disable caching, only override with a new cache ttl
     * @param data.jobId The job id to assign to the created job. if missing, job is chosen randomly using the ULID scheme. If a job id already exists in the queue or as a completed job, the request to create one will fail (Bad Request)
     * @param data.includeHeader List of headers's keys (separated with ',') whove value are added to the args
     * Header's key lowercased and '-'' replaced to '_' such that 'Content-Type' becomes the 'content_type' arg key
     *
     * @param data.invisibleToOwner make the run invisible to the the script owner (default false)
     * @returns string job created
     * @throws ApiError
     */
    public static runScriptByHash(data: RunScriptByHashData): CancelablePromise<RunScriptByHashResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/jobs/run/h/{hash}',
            path: {
                workspace: data.workspace,
                hash: data.hash
            },
            query: {
                scheduled_for: data.scheduledFor,
                scheduled_in_secs: data.scheduledInSecs,
                parent_job: data.parentJob,
                tag: data.tag,
                cache_ttl: data.cacheTtl,
                job_id: data.jobId,
                include_header: data.includeHeader,
                invisible_to_owner: data.invisibleToOwner
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * run script preview
     * @param data The data for the request.
     * @param data.workspace
     * @param data.requestBody preview
     * @param data.includeHeader List of headers's keys (separated with ',') whove value are added to the args
     * Header's key lowercased and '-'' replaced to '_' such that 'Content-Type' becomes the 'content_type' arg key
     *
     * @param data.invisibleToOwner make the run invisible to the the script owner (default false)
     * @param data.jobId The job id to assign to the created job. if missing, job is chosen randomly using the ULID scheme. If a job id already exists in the queue or as a completed job, the request to create one will fail (Bad Request)
     * @returns string job created
     * @throws ApiError
     */
    public static runScriptPreview(data: RunScriptPreviewData): CancelablePromise<RunScriptPreviewResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/jobs/run/preview',
            path: {
                workspace: data.workspace
            },
            query: {
                include_header: data.includeHeader,
                invisible_to_owner: data.invisibleToOwner,
                job_id: data.jobId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * run code-workflow task
     * @param data The data for the request.
     * @param data.workspace
     * @param data.jobId
     * @param data.entrypoint
     * @param data.requestBody preview
     * @returns string job created
     * @throws ApiError
     */
    public static runCodeWorkflowTask(data: RunCodeWorkflowTaskData): CancelablePromise<RunCodeWorkflowTaskResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/jobs/workflow_as_code/{job_id}/{entrypoint}',
            path: {
                workspace: data.workspace,
                job_id: data.jobId,
                entrypoint: data.entrypoint
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * run a one-off dependencies job
     * @param data The data for the request.
     * @param data.workspace
     * @param data.requestBody raw script content
     * @returns unknown dependency job result
     * @throws ApiError
     */
    public static runRawScriptDependencies(data: RunRawScriptDependenciesData): CancelablePromise<RunRawScriptDependenciesResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/jobs/run/dependencies',
            path: {
                workspace: data.workspace
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * run flow preview
     * @param data The data for the request.
     * @param data.workspace
     * @param data.requestBody preview
     * @param data.includeHeader List of headers's keys (separated with ',') whove value are added to the args
     * Header's key lowercased and '-'' replaced to '_' such that 'Content-Type' becomes the 'content_type' arg key
     *
     * @param data.invisibleToOwner make the run invisible to the the script owner (default false)
     * @param data.jobId The job id to assign to the created job. if missing, job is chosen randomly using the ULID scheme. If a job id already exists in the queue or as a completed job, the request to create one will fail (Bad Request)
     * @returns string job created
     * @throws ApiError
     */
    public static runFlowPreview(data: RunFlowPreviewData): CancelablePromise<RunFlowPreviewResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/jobs/run/preview_flow',
            path: {
                workspace: data.workspace
            },
            query: {
                include_header: data.includeHeader,
                invisible_to_owner: data.invisibleToOwner,
                job_id: data.jobId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * list all queued jobs
     * @param data The data for the request.
     * @param data.workspace
     * @param data.orderDesc order by desc order (default true)
     * @param data.createdBy mask to filter exact matching user creator
     * @param data.parentJob The parent job that is at the origin and responsible for the execution of this script if any
     * @param data.scriptPathExact mask to filter exact matching path
     * @param data.scriptPathStart mask to filter matching starting path
     * @param data.schedulePath mask to filter by schedule path
     * @param data.scriptHash mask to filter exact matching path
     * @param data.startedBefore filter on started before (inclusive) timestamp
     * @param data.startedAfter filter on started after (exclusive) timestamp
     * @param data.success filter on successful jobs
     * @param data.scheduledForBeforeNow filter on jobs scheduled_for before now (hence waitinf for a worker)
     * @param data.jobKinds filter on job kind (values 'preview', 'script', 'dependencies', 'flow') separated by,
     * @param data.suspended filter on suspended jobs
     * @param data.running filter on running jobs
     * @param data.args filter on jobs containing those args as a json subset (@> in postgres)
     * @param data.result filter on jobs containing those result as a json subset (@> in postgres)
     * @param data.tag filter on jobs with a given tag/worker group
     * @param data.page which page to return (start at 1, default 1)
     * @param data.perPage number of items to return for a given page (default 30, max 100)
     * @param data.allWorkspaces get jobs from all workspaces (only valid if request come from the `admins` workspace)
     * @param data.isNotSchedule is not a scheduled job
     * @returns QueuedJob All queued jobs
     * @throws ApiError
     */
    public static listQueue(data: ListQueueData): CancelablePromise<ListQueueResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/jobs/queue/list',
            path: {
                workspace: data.workspace
            },
            query: {
                order_desc: data.orderDesc,
                created_by: data.createdBy,
                parent_job: data.parentJob,
                script_path_exact: data.scriptPathExact,
                script_path_start: data.scriptPathStart,
                schedule_path: data.schedulePath,
                script_hash: data.scriptHash,
                started_before: data.startedBefore,
                started_after: data.startedAfter,
                success: data.success,
                scheduled_for_before_now: data.scheduledForBeforeNow,
                job_kinds: data.jobKinds,
                suspended: data.suspended,
                running: data.running,
                args: data.args,
                result: data.result,
                tag: data.tag,
                page: data.page,
                per_page: data.perPage,
                all_workspaces: data.allWorkspaces,
                is_not_schedule: data.isNotSchedule
            }
        });
    }
    
    /**
     * get queue count
     * @param data The data for the request.
     * @param data.workspace
     * @param data.allWorkspaces get jobs from all workspaces (only valid if request come from the `admins` workspace)
     * @returns unknown queue count
     * @throws ApiError
     */
    public static getQueueCount(data: GetQueueCountData): CancelablePromise<GetQueueCountResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/jobs/queue/count',
            path: {
                workspace: data.workspace
            },
            query: {
                all_workspaces: data.allWorkspaces
            }
        });
    }
    
    /**
     * get completed count
     * @param data The data for the request.
     * @param data.workspace
     * @returns unknown completed count
     * @throws ApiError
     */
    public static getCompletedCount(data: GetCompletedCountData): CancelablePromise<GetCompletedCountResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/jobs/completed/count',
            path: {
                workspace: data.workspace
            }
        });
    }
    
    /**
     * get the ids of all jobs matching the given filters
     * @param data The data for the request.
     * @param data.workspace
     * @param data.orderDesc order by desc order (default true)
     * @param data.createdBy mask to filter exact matching user creator
     * @param data.parentJob The parent job that is at the origin and responsible for the execution of this script if any
     * @param data.scriptPathExact mask to filter exact matching path
     * @param data.scriptPathStart mask to filter matching starting path
     * @param data.schedulePath mask to filter by schedule path
     * @param data.scriptHash mask to filter exact matching path
     * @param data.startedBefore filter on started before (inclusive) timestamp
     * @param data.startedAfter filter on started after (exclusive) timestamp
     * @param data.success filter on successful jobs
     * @param data.scheduledForBeforeNow filter on jobs scheduled_for before now (hence waitinf for a worker)
     * @param data.jobKinds filter on job kind (values 'preview', 'script', 'dependencies', 'flow') separated by,
     * @param data.suspended filter on suspended jobs
     * @param data.running filter on running jobs
     * @param data.args filter on jobs containing those args as a json subset (@> in postgres)
     * @param data.result filter on jobs containing those result as a json subset (@> in postgres)
     * @param data.tag filter on jobs with a given tag/worker group
     * @param data.page which page to return (start at 1, default 1)
     * @param data.perPage number of items to return for a given page (default 30, max 100)
     * @param data.concurrencyKey
     * @param data.allWorkspaces get jobs from all workspaces (only valid if request come from the `admins` workspace)
     * @param data.isNotSchedule is not a scheduled job
     * @returns string uuids of jobs
     * @throws ApiError
     */
    public static listFilteredUuids(data: ListFilteredUuidsData): CancelablePromise<ListFilteredUuidsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/jobs/queue/list_filtered_uuids',
            path: {
                workspace: data.workspace
            },
            query: {
                order_desc: data.orderDesc,
                created_by: data.createdBy,
                parent_job: data.parentJob,
                script_path_exact: data.scriptPathExact,
                script_path_start: data.scriptPathStart,
                schedule_path: data.schedulePath,
                script_hash: data.scriptHash,
                started_before: data.startedBefore,
                started_after: data.startedAfter,
                success: data.success,
                scheduled_for_before_now: data.scheduledForBeforeNow,
                job_kinds: data.jobKinds,
                suspended: data.suspended,
                running: data.running,
                args: data.args,
                result: data.result,
                tag: data.tag,
                page: data.page,
                per_page: data.perPage,
                concurrency_key: data.concurrencyKey,
                all_workspaces: data.allWorkspaces,
                is_not_schedule: data.isNotSchedule
            }
        });
    }
    
    /**
     * cancel jobs based on the given uuids
     * @param data The data for the request.
     * @param data.workspace
     * @param data.requestBody uuids of the jobs to cancel
     * @returns string uuids of canceled jobs
     * @throws ApiError
     */
    public static cancelSelection(data: CancelSelectionData): CancelablePromise<CancelSelectionResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/jobs/queue/cancel_selection',
            path: {
                workspace: data.workspace
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * list all completed jobs
     * @param data The data for the request.
     * @param data.workspace
     * @param data.orderDesc order by desc order (default true)
     * @param data.createdBy mask to filter exact matching user creator
     * @param data.label mask to filter exact matching job's label (job labels are completed jobs with as a result an object containing a string in the array at key 'wm_labels')
     * @param data.parentJob The parent job that is at the origin and responsible for the execution of this script if any
     * @param data.scriptPathExact mask to filter exact matching path
     * @param data.scriptPathStart mask to filter matching starting path
     * @param data.schedulePath mask to filter by schedule path
     * @param data.scriptHash mask to filter exact matching path
     * @param data.startedBefore filter on started before (inclusive) timestamp
     * @param data.startedAfter filter on started after (exclusive) timestamp
     * @param data.success filter on successful jobs
     * @param data.jobKinds filter on job kind (values 'preview', 'script', 'dependencies', 'flow') separated by,
     * @param data.args filter on jobs containing those args as a json subset (@> in postgres)
     * @param data.result filter on jobs containing those result as a json subset (@> in postgres)
     * @param data.tag filter on jobs with a given tag/worker group
     * @param data.page which page to return (start at 1, default 1)
     * @param data.perPage number of items to return for a given page (default 30, max 100)
     * @param data.isSkipped is the job skipped
     * @param data.isFlowStep is the job a flow step
     * @param data.hasNullParent has null parent
     * @param data.isNotSchedule is not a scheduled job
     * @returns CompletedJob All completed jobs
     * @throws ApiError
     */
    public static listCompletedJobs(data: ListCompletedJobsData): CancelablePromise<ListCompletedJobsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/jobs/completed/list',
            path: {
                workspace: data.workspace
            },
            query: {
                order_desc: data.orderDesc,
                created_by: data.createdBy,
                label: data.label,
                parent_job: data.parentJob,
                script_path_exact: data.scriptPathExact,
                script_path_start: data.scriptPathStart,
                schedule_path: data.schedulePath,
                script_hash: data.scriptHash,
                started_before: data.startedBefore,
                started_after: data.startedAfter,
                success: data.success,
                job_kinds: data.jobKinds,
                args: data.args,
                result: data.result,
                tag: data.tag,
                page: data.page,
                per_page: data.perPage,
                is_skipped: data.isSkipped,
                is_flow_step: data.isFlowStep,
                has_null_parent: data.hasNullParent,
                is_not_schedule: data.isNotSchedule
            }
        });
    }
    
    /**
     * list all jobs
     * @param data The data for the request.
     * @param data.workspace
     * @param data.createdBy mask to filter exact matching user creator
     * @param data.label mask to filter exact matching job's label (job labels are completed jobs with as a result an object containing a string in the array at key 'wm_labels')
     * @param data.parentJob The parent job that is at the origin and responsible for the execution of this script if any
     * @param data.scriptPathExact mask to filter exact matching path
     * @param data.scriptPathStart mask to filter matching starting path
     * @param data.schedulePath mask to filter by schedule path
     * @param data.scriptHash mask to filter exact matching path
     * @param data.startedBefore filter on started before (inclusive) timestamp
     * @param data.startedAfter filter on started after (exclusive) timestamp
     * @param data.createdOrStartedBefore filter on created_at for non non started job and started_at otherwise before (inclusive) timestamp
     * @param data.running filter on running jobs
     * @param data.scheduledForBeforeNow filter on jobs scheduled_for before now (hence waitinf for a worker)
     * @param data.createdOrStartedAfter filter on created_at for non non started job and started_at otherwise after (exclusive) timestamp
     * @param data.createdOrStartedAfterCompletedJobs filter on created_at for non non started job and started_at otherwise after (exclusive) timestamp but only for the completed jobs
     * @param data.jobKinds filter on job kind (values 'preview', 'script', 'dependencies', 'flow') separated by,
     * @param data.args filter on jobs containing those args as a json subset (@> in postgres)
     * @param data.tag filter on jobs with a given tag/worker group
     * @param data.result filter on jobs containing those result as a json subset (@> in postgres)
     * @param data.page which page to return (start at 1, default 1)
     * @param data.perPage number of items to return for a given page (default 30, max 100)
     * @param data.isSkipped is the job skipped
     * @param data.isFlowStep is the job a flow step
     * @param data.hasNullParent has null parent
     * @param data.success filter on successful jobs
     * @param data.allWorkspaces get jobs from all workspaces (only valid if request come from the `admins` workspace)
     * @param data.isNotSchedule is not a scheduled job
     * @returns Job All jobs
     * @throws ApiError
     */
    public static listJobs(data: ListJobsData): CancelablePromise<ListJobsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/jobs/list',
            path: {
                workspace: data.workspace
            },
            query: {
                created_by: data.createdBy,
                label: data.label,
                parent_job: data.parentJob,
                script_path_exact: data.scriptPathExact,
                script_path_start: data.scriptPathStart,
                schedule_path: data.schedulePath,
                script_hash: data.scriptHash,
                started_before: data.startedBefore,
                started_after: data.startedAfter,
                created_or_started_before: data.createdOrStartedBefore,
                running: data.running,
                scheduled_for_before_now: data.scheduledForBeforeNow,
                created_or_started_after: data.createdOrStartedAfter,
                created_or_started_after_completed_jobs: data.createdOrStartedAfterCompletedJobs,
                job_kinds: data.jobKinds,
                args: data.args,
                tag: data.tag,
                result: data.result,
                page: data.page,
                per_page: data.perPage,
                is_skipped: data.isSkipped,
                is_flow_step: data.isFlowStep,
                has_null_parent: data.hasNullParent,
                success: data.success,
                all_workspaces: data.allWorkspaces,
                is_not_schedule: data.isNotSchedule
            }
        });
    }
    
    /**
     * get db clock
     * @returns number the timestamp of the db that can be used to compute the drift
     * @throws ApiError
     */
    public static getDbClock(): CancelablePromise<GetDbClockResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/jobs/db_clock'
        });
    }
    
    /**
     * get job
     * @param data The data for the request.
     * @param data.workspace
     * @param data.id
     * @param data.noLogs
     * @returns Job job details
     * @throws ApiError
     */
    public static getJob(data: GetJobData): CancelablePromise<GetJobResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/jobs_u/get/{id}',
            path: {
                workspace: data.workspace,
                id: data.id
            },
            query: {
                no_logs: data.noLogs
            }
        });
    }
    
    /**
     * get root job id
     * @param data The data for the request.
     * @param data.workspace
     * @param data.id
     * @returns string get root job id
     * @throws ApiError
     */
    public static getRootJobId(data: GetRootJobIdData): CancelablePromise<GetRootJobIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/jobs_u/get_root_job_id/{id}',
            path: {
                workspace: data.workspace,
                id: data.id
            }
        });
    }
    
    /**
     * get job logs
     * @param data The data for the request.
     * @param data.workspace
     * @param data.id
     * @returns string job details
     * @throws ApiError
     */
    public static getJobLogs(data: GetJobLogsData): CancelablePromise<GetJobLogsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/jobs_u/get_logs/{id}',
            path: {
                workspace: data.workspace,
                id: data.id
            }
        });
    }
    
    /**
     * get job args
     * @param data The data for the request.
     * @param data.workspace
     * @param data.id
     * @returns unknown job args
     * @throws ApiError
     */
    public static getJobArgs(data: GetJobArgsData): CancelablePromise<GetJobArgsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/jobs_u/get_args/{id}',
            path: {
                workspace: data.workspace,
                id: data.id
            }
        });
    }
    
    /**
     * get job updates
     * @param data The data for the request.
     * @param data.workspace
     * @param data.id
     * @param data.running
     * @param data.logOffset
     * @returns unknown job details
     * @throws ApiError
     */
    public static getJobUpdates(data: GetJobUpdatesData): CancelablePromise<GetJobUpdatesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/jobs_u/getupdate/{id}',
            path: {
                workspace: data.workspace,
                id: data.id
            },
            query: {
                running: data.running,
                log_offset: data.logOffset
            }
        });
    }
    
    /**
     * get log file from object store
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @returns unknown job log
     * @throws ApiError
     */
    public static getLogFileFromStore(data: GetLogFileFromStoreData): CancelablePromise<GetLogFileFromStoreResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/jobs_u/get_log_file/{path}',
            path: {
                workspace: data.workspace,
                path: data.path
            }
        });
    }
    
    /**
     * get flow debug info
     * @param data The data for the request.
     * @param data.workspace
     * @param data.id
     * @returns unknown flow debug info details
     * @throws ApiError
     */
    public static getFlowDebugInfo(data: GetFlowDebugInfoData): CancelablePromise<GetFlowDebugInfoResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/jobs_u/get_flow_debug_info/{id}',
            path: {
                workspace: data.workspace,
                id: data.id
            }
        });
    }
    
    /**
     * get completed job
     * @param data The data for the request.
     * @param data.workspace
     * @param data.id
     * @returns CompletedJob job details
     * @throws ApiError
     */
    public static getCompletedJob(data: GetCompletedJobData): CancelablePromise<GetCompletedJobResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/jobs_u/completed/get/{id}',
            path: {
                workspace: data.workspace,
                id: data.id
            }
        });
    }
    
    /**
     * get completed job result
     * @param data The data for the request.
     * @param data.workspace
     * @param data.id
     * @param data.suspendedJob
     * @param data.resumeId
     * @param data.secret
     * @param data.approver
     * @returns unknown result
     * @throws ApiError
     */
    public static getCompletedJobResult(data: GetCompletedJobResultData): CancelablePromise<GetCompletedJobResultResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/jobs_u/completed/get_result/{id}',
            path: {
                workspace: data.workspace,
                id: data.id
            },
            query: {
                suspended_job: data.suspendedJob,
                resume_id: data.resumeId,
                secret: data.secret,
                approver: data.approver
            }
        });
    }
    
    /**
     * get completed job result if job is completed
     * @param data The data for the request.
     * @param data.workspace
     * @param data.id
     * @param data.getStarted
     * @returns unknown result
     * @throws ApiError
     */
    public static getCompletedJobResultMaybe(data: GetCompletedJobResultMaybeData): CancelablePromise<GetCompletedJobResultMaybeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/jobs_u/completed/get_result_maybe/{id}',
            path: {
                workspace: data.workspace,
                id: data.id
            },
            query: {
                get_started: data.getStarted
            }
        });
    }
    
    /**
     * delete completed job (erase content but keep run id)
     * @param data The data for the request.
     * @param data.workspace
     * @param data.id
     * @returns CompletedJob job details
     * @throws ApiError
     */
    public static deleteCompletedJob(data: DeleteCompletedJobData): CancelablePromise<DeleteCompletedJobResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/jobs/completed/delete/{id}',
            path: {
                workspace: data.workspace,
                id: data.id
            }
        });
    }
    
    /**
     * cancel queued job
     * @param data The data for the request.
     * @param data.workspace
     * @param data.id
     * @param data.requestBody reason
     * @returns string job canceled
     * @throws ApiError
     */
    public static cancelQueuedJob(data: CancelQueuedJobData): CancelablePromise<CancelQueuedJobResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/jobs_u/queue/cancel/{id}',
            path: {
                workspace: data.workspace,
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * cancel all queued jobs for persistent script
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @param data.requestBody reason
     * @returns string persistent job scaled down to zero
     * @throws ApiError
     */
    public static cancelPersistentQueuedJobs(data: CancelPersistentQueuedJobsData): CancelablePromise<CancelPersistentQueuedJobsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/jobs_u/queue/cancel_persistent/{path}',
            path: {
                workspace: data.workspace,
                path: data.path
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * force cancel queued job
     * @param data The data for the request.
     * @param data.workspace
     * @param data.id
     * @param data.requestBody reason
     * @returns string job canceled
     * @throws ApiError
     */
    public static forceCancelQueuedJob(data: ForceCancelQueuedJobData): CancelablePromise<ForceCancelQueuedJobResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/jobs_u/queue/force_cancel/{id}',
            path: {
                workspace: data.workspace,
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * create an HMac signature given a job id and a resume id
     * @param data The data for the request.
     * @param data.workspace
     * @param data.id
     * @param data.resumeId
     * @param data.approver
     * @returns string job signature
     * @throws ApiError
     */
    public static createJobSignature(data: CreateJobSignatureData): CancelablePromise<CreateJobSignatureResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/jobs/job_signature/{id}/{resume_id}',
            path: {
                workspace: data.workspace,
                id: data.id,
                resume_id: data.resumeId
            },
            query: {
                approver: data.approver
            }
        });
    }
    
    /**
     * get resume urls given a job_id, resume_id and a nonce to resume a flow
     * @param data The data for the request.
     * @param data.workspace
     * @param data.id
     * @param data.resumeId
     * @param data.approver
     * @returns unknown url endpoints
     * @throws ApiError
     */
    public static getResumeUrls(data: GetResumeUrlsData): CancelablePromise<GetResumeUrlsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/jobs/resume_urls/{id}/{resume_id}',
            path: {
                workspace: data.workspace,
                id: data.id,
                resume_id: data.resumeId
            },
            query: {
                approver: data.approver
            }
        });
    }
    
    /**
     * resume a job for a suspended flow
     * @param data The data for the request.
     * @param data.workspace
     * @param data.id
     * @param data.resumeId
     * @param data.signature
     * @param data.payload The base64 encoded payload that has been encoded as a JSON. e.g how to encode such payload encodeURIComponent
     * `encodeURIComponent(btoa(JSON.stringify({a: 2})))`
     *
     * @param data.approver
     * @returns string job resumed
     * @throws ApiError
     */
    public static resumeSuspendedJobGet(data: ResumeSuspendedJobGetData): CancelablePromise<ResumeSuspendedJobGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/jobs_u/resume/{id}/{resume_id}/{signature}',
            path: {
                workspace: data.workspace,
                id: data.id,
                resume_id: data.resumeId,
                signature: data.signature
            },
            query: {
                payload: data.payload,
                approver: data.approver
            }
        });
    }
    
    /**
     * resume a job for a suspended flow
     * @param data The data for the request.
     * @param data.workspace
     * @param data.id
     * @param data.resumeId
     * @param data.signature
     * @param data.requestBody
     * @param data.approver
     * @returns string job resumed
     * @throws ApiError
     */
    public static resumeSuspendedJobPost(data: ResumeSuspendedJobPostData): CancelablePromise<ResumeSuspendedJobPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/jobs_u/resume/{id}/{resume_id}/{signature}',
            path: {
                workspace: data.workspace,
                id: data.id,
                resume_id: data.resumeId,
                signature: data.signature
            },
            query: {
                approver: data.approver
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * set flow user state at a given key
     * @param data The data for the request.
     * @param data.workspace
     * @param data.id
     * @param data.key
     * @param data.requestBody new value
     * @returns string flow user state updated
     * @throws ApiError
     */
    public static setFlowUserState(data: SetFlowUserStateData): CancelablePromise<SetFlowUserStateResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/jobs/flow/user_states/{id}/{key}',
            path: {
                workspace: data.workspace,
                id: data.id,
                key: data.key
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * get flow user state at a given key
     * @param data The data for the request.
     * @param data.workspace
     * @param data.id
     * @param data.key
     * @returns unknown flow user state updated
     * @throws ApiError
     */
    public static getFlowUserState(data: GetFlowUserStateData): CancelablePromise<GetFlowUserStateResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/jobs/flow/user_states/{id}/{key}',
            path: {
                workspace: data.workspace,
                id: data.id,
                key: data.key
            }
        });
    }
    
    /**
     * resume a job for a suspended flow as an owner
     * @param data The data for the request.
     * @param data.workspace
     * @param data.id
     * @param data.requestBody
     * @returns string job resumed
     * @throws ApiError
     */
    public static resumeSuspendedFlowAsOwner(data: ResumeSuspendedFlowAsOwnerData): CancelablePromise<ResumeSuspendedFlowAsOwnerResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/jobs/flow/resume/{id}',
            path: {
                workspace: data.workspace,
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * cancel a job for a suspended flow
     * @param data The data for the request.
     * @param data.workspace
     * @param data.id
     * @param data.resumeId
     * @param data.signature
     * @param data.approver
     * @returns string job canceled
     * @throws ApiError
     */
    public static cancelSuspendedJobGet(data: CancelSuspendedJobGetData): CancelablePromise<CancelSuspendedJobGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/jobs_u/cancel/{id}/{resume_id}/{signature}',
            path: {
                workspace: data.workspace,
                id: data.id,
                resume_id: data.resumeId,
                signature: data.signature
            },
            query: {
                approver: data.approver
            }
        });
    }
    
    /**
     * cancel a job for a suspended flow
     * @param data The data for the request.
     * @param data.workspace
     * @param data.id
     * @param data.resumeId
     * @param data.signature
     * @param data.requestBody
     * @param data.approver
     * @returns string job canceled
     * @throws ApiError
     */
    public static cancelSuspendedJobPost(data: CancelSuspendedJobPostData): CancelablePromise<CancelSuspendedJobPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/jobs_u/cancel/{id}/{resume_id}/{signature}',
            path: {
                workspace: data.workspace,
                id: data.id,
                resume_id: data.resumeId,
                signature: data.signature
            },
            query: {
                approver: data.approver
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * get parent flow job of suspended job
     * @param data The data for the request.
     * @param data.workspace
     * @param data.id
     * @param data.resumeId
     * @param data.signature
     * @param data.approver
     * @returns unknown parent flow details
     * @throws ApiError
     */
    public static getSuspendedJobFlow(data: GetSuspendedJobFlowData): CancelablePromise<GetSuspendedJobFlowResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/jobs_u/get_flow/{id}/{resume_id}/{signature}',
            path: {
                workspace: data.workspace,
                id: data.id,
                resume_id: data.resumeId,
                signature: data.signature
            },
            query: {
                approver: data.approver
            }
        });
    }
    
    /**
     * Get intervals of job runtime concurrency
     * @param data The data for the request.
     * @param data.workspace
     * @param data.concurrencyKey
     * @param data.rowLimit
     * @param data.createdBy mask to filter exact matching user creator
     * @param data.label mask to filter exact matching job's label (job labels are completed jobs with as a result an object containing a string in the array at key 'wm_labels')
     * @param data.parentJob The parent job that is at the origin and responsible for the execution of this script if any
     * @param data.scriptPathExact mask to filter exact matching path
     * @param data.scriptPathStart mask to filter matching starting path
     * @param data.schedulePath mask to filter by schedule path
     * @param data.scriptHash mask to filter exact matching path
     * @param data.startedBefore filter on started before (inclusive) timestamp
     * @param data.startedAfter filter on started after (exclusive) timestamp
     * @param data.createdOrStartedBefore filter on created_at for non non started job and started_at otherwise before (inclusive) timestamp
     * @param data.running filter on running jobs
     * @param data.scheduledForBeforeNow filter on jobs scheduled_for before now (hence waitinf for a worker)
     * @param data.createdOrStartedAfter filter on created_at for non non started job and started_at otherwise after (exclusive) timestamp
     * @param data.createdOrStartedAfterCompletedJobs filter on created_at for non non started job and started_at otherwise after (exclusive) timestamp but only for the completed jobs
     * @param data.jobKinds filter on job kind (values 'preview', 'script', 'dependencies', 'flow') separated by,
     * @param data.args filter on jobs containing those args as a json subset (@> in postgres)
     * @param data.tag filter on jobs with a given tag/worker group
     * @param data.result filter on jobs containing those result as a json subset (@> in postgres)
     * @param data.page which page to return (start at 1, default 1)
     * @param data.perPage number of items to return for a given page (default 30, max 100)
     * @param data.isSkipped is the job skipped
     * @param data.isFlowStep is the job a flow step
     * @param data.hasNullParent has null parent
     * @param data.success filter on successful jobs
     * @param data.allWorkspaces get jobs from all workspaces (only valid if request come from the `admins` workspace)
     * @param data.isNotSchedule is not a scheduled job
     * @returns ExtendedJobs time
     * @throws ApiError
     */
    public static listExtendedJobs(data: ListExtendedJobsData): CancelablePromise<ListExtendedJobsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/concurrency_groups/list_jobs',
            path: {
                workspace: data.workspace
            },
            query: {
                concurrency_key: data.concurrencyKey,
                row_limit: data.rowLimit,
                created_by: data.createdBy,
                label: data.label,
                parent_job: data.parentJob,
                script_path_exact: data.scriptPathExact,
                script_path_start: data.scriptPathStart,
                schedule_path: data.schedulePath,
                script_hash: data.scriptHash,
                started_before: data.startedBefore,
                started_after: data.startedAfter,
                created_or_started_before: data.createdOrStartedBefore,
                running: data.running,
                scheduled_for_before_now: data.scheduledForBeforeNow,
                created_or_started_after: data.createdOrStartedAfter,
                created_or_started_after_completed_jobs: data.createdOrStartedAfterCompletedJobs,
                job_kinds: data.jobKinds,
                args: data.args,
                tag: data.tag,
                result: data.result,
                page: data.page,
                per_page: data.perPage,
                is_skipped: data.isSkipped,
                is_flow_step: data.isFlowStep,
                has_null_parent: data.hasNullParent,
                success: data.success,
                all_workspaces: data.allWorkspaces,
                is_not_schedule: data.isNotSchedule
            }
        });
    }
    
}

export class RawAppService {
    /**
     * list all raw apps
     * @param data The data for the request.
     * @param data.workspace
     * @param data.page which page to return (start at 1, default 1)
     * @param data.perPage number of items to return for a given page (default 30, max 100)
     * @param data.orderDesc order by desc order (default true)
     * @param data.createdBy mask to filter exact matching user creator
     * @param data.pathStart mask to filter matching starting path
     * @param data.pathExact mask to filter exact matching path
     * @param data.starredOnly (default false)
     * show only the starred items
     *
     * @returns ListableRawApp All raw apps
     * @throws ApiError
     */
    public static listRawApps(data: ListRawAppsData): CancelablePromise<ListRawAppsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/raw_apps/list',
            path: {
                workspace: data.workspace
            },
            query: {
                page: data.page,
                per_page: data.perPage,
                order_desc: data.orderDesc,
                created_by: data.createdBy,
                path_start: data.pathStart,
                path_exact: data.pathExact,
                starred_only: data.starredOnly
            }
        });
    }
    
    /**
     * does an app exisst at path
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @returns boolean app exists
     * @throws ApiError
     */
    public static existsRawApp(data: ExistsRawAppData): CancelablePromise<ExistsRawAppResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/raw_apps/exists/{path}',
            path: {
                workspace: data.workspace,
                path: data.path
            }
        });
    }
    
    /**
     * get app by path
     * @param data The data for the request.
     * @param data.workspace
     * @param data.version
     * @param data.path
     * @returns string app details
     * @throws ApiError
     */
    public static getRawAppData(data: GetRawAppDataData): CancelablePromise<GetRawAppDataResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/apps/get_data/{version}/{path}',
            path: {
                workspace: data.workspace,
                version: data.version,
                path: data.path
            }
        });
    }
    
    /**
     * create raw app
     * @param data The data for the request.
     * @param data.workspace
     * @param data.requestBody new raw app
     * @returns string raw app created
     * @throws ApiError
     */
    public static createRawApp(data: CreateRawAppData): CancelablePromise<CreateRawAppResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/raw_apps/create',
            path: {
                workspace: data.workspace
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * update app
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @param data.requestBody updateraw  app
     * @returns string app updated
     * @throws ApiError
     */
    public static updateRawApp(data: UpdateRawAppData): CancelablePromise<UpdateRawAppResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/raw_apps/update/{path}',
            path: {
                workspace: data.workspace,
                path: data.path
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * delete raw app
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @returns string app deleted
     * @throws ApiError
     */
    public static deleteRawApp(data: DeleteRawAppData): CancelablePromise<DeleteRawAppResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/w/{workspace}/raw_apps/delete/{path}',
            path: {
                workspace: data.workspace,
                path: data.path
            }
        });
    }
    
}

export class ScheduleService {
    /**
     * preview schedule
     * @param data The data for the request.
     * @param data.requestBody schedule
     * @returns string List of 5 estimated upcoming execution events (in UTC)
     * @throws ApiError
     */
    public static previewSchedule(data: PreviewScheduleData): CancelablePromise<PreviewScheduleResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/schedules/preview',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * create schedule
     * @param data The data for the request.
     * @param data.workspace
     * @param data.requestBody new schedule
     * @returns string schedule created
     * @throws ApiError
     */
    public static createSchedule(data: CreateScheduleData): CancelablePromise<CreateScheduleResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/schedules/create',
            path: {
                workspace: data.workspace
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * update schedule
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @param data.requestBody updated schedule
     * @returns string schedule updated
     * @throws ApiError
     */
    public static updateSchedule(data: UpdateScheduleData): CancelablePromise<UpdateScheduleResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/schedules/update/{path}',
            path: {
                workspace: data.workspace,
                path: data.path
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * set enabled schedule
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @param data.requestBody updated schedule enable
     * @returns string schedule enabled set
     * @throws ApiError
     */
    public static setScheduleEnabled(data: SetScheduleEnabledData): CancelablePromise<SetScheduleEnabledResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/schedules/setenabled/{path}',
            path: {
                workspace: data.workspace,
                path: data.path
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * delete schedule
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @returns string schedule deleted
     * @throws ApiError
     */
    public static deleteSchedule(data: DeleteScheduleData): CancelablePromise<DeleteScheduleResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/w/{workspace}/schedules/delete/{path}',
            path: {
                workspace: data.workspace,
                path: data.path
            }
        });
    }
    
    /**
     * get schedule
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @returns Schedule schedule deleted
     * @throws ApiError
     */
    public static getSchedule(data: GetScheduleData): CancelablePromise<GetScheduleResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/schedules/get/{path}',
            path: {
                workspace: data.workspace,
                path: data.path
            }
        });
    }
    
    /**
     * does schedule exists
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @returns boolean schedule exists
     * @throws ApiError
     */
    public static existsSchedule(data: ExistsScheduleData): CancelablePromise<ExistsScheduleResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/schedules/exists/{path}',
            path: {
                workspace: data.workspace,
                path: data.path
            }
        });
    }
    
    /**
     * list schedules
     * @param data The data for the request.
     * @param data.workspace
     * @param data.page which page to return (start at 1, default 1)
     * @param data.perPage number of items to return for a given page (default 30, max 100)
     * @param data.args filter on jobs containing those args as a json subset (@> in postgres)
     * @param data.path filter by path
     * @param data.isFlow
     * @param data.pathStart
     * @returns Schedule schedule list
     * @throws ApiError
     */
    public static listSchedules(data: ListSchedulesData): CancelablePromise<ListSchedulesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/schedules/list',
            path: {
                workspace: data.workspace
            },
            query: {
                page: data.page,
                per_page: data.perPage,
                args: data.args,
                path: data.path,
                is_flow: data.isFlow,
                path_start: data.pathStart
            }
        });
    }
    
    /**
     * list schedules with last 20 jobs
     * @param data The data for the request.
     * @param data.workspace
     * @param data.page which page to return (start at 1, default 1)
     * @param data.perPage number of items to return for a given page (default 30, max 100)
     * @returns ScheduleWJobs schedule list
     * @throws ApiError
     */
    public static listSchedulesWithJobs(data: ListSchedulesWithJobsData): CancelablePromise<ListSchedulesWithJobsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/schedules/list_with_jobs',
            path: {
                workspace: data.workspace
            },
            query: {
                page: data.page,
                per_page: data.perPage
            }
        });
    }
    
    /**
     * Set default error or recoevery handler
     * @param data The data for the request.
     * @param data.workspace
     * @param data.requestBody Handler description
     * @returns unknown default error handler set
     * @throws ApiError
     */
    public static setDefaultErrorOrRecoveryHandler(data: SetDefaultErrorOrRecoveryHandlerData): CancelablePromise<SetDefaultErrorOrRecoveryHandlerResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/schedules/setdefaulthandler',
            path: {
                workspace: data.workspace
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
}

export class GroupService {
    /**
     * list instance groups
     * @returns InstanceGroup instance group list
     * @throws ApiError
     */
    public static listInstanceGroups(): CancelablePromise<ListInstanceGroupsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/groups/list'
        });
    }
    
    /**
     * get instance group
     * @param data The data for the request.
     * @param data.name
     * @returns InstanceGroup instance group
     * @throws ApiError
     */
    public static getInstanceGroup(data: GetInstanceGroupData): CancelablePromise<GetInstanceGroupResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/groups/get/{name}',
            path: {
                name: data.name
            }
        });
    }
    
    /**
     * create instance group
     * @param data The data for the request.
     * @param data.requestBody create instance group
     * @returns string instance group created
     * @throws ApiError
     */
    public static createInstanceGroup(data: CreateInstanceGroupData): CancelablePromise<CreateInstanceGroupResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/groups/create',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * update instance group
     * @param data The data for the request.
     * @param data.name
     * @param data.requestBody update instance group
     * @returns string instance group updated
     * @throws ApiError
     */
    public static updateInstanceGroup(data: UpdateInstanceGroupData): CancelablePromise<UpdateInstanceGroupResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/groups/update/{name}',
            path: {
                name: data.name
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * delete instance group
     * @param data The data for the request.
     * @param data.name
     * @returns string instance group deleted
     * @throws ApiError
     */
    public static deleteInstanceGroup(data: DeleteInstanceGroupData): CancelablePromise<DeleteInstanceGroupResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/groups/delete/{name}',
            path: {
                name: data.name
            }
        });
    }
    
    /**
     * add user to instance group
     * @param data The data for the request.
     * @param data.name
     * @param data.requestBody user to add to instance group
     * @returns string user added to instance group
     * @throws ApiError
     */
    public static addUserToInstanceGroup(data: AddUserToInstanceGroupData): CancelablePromise<AddUserToInstanceGroupResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/groups/adduser/{name}',
            path: {
                name: data.name
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * remove user from instance group
     * @param data The data for the request.
     * @param data.name
     * @param data.requestBody user to remove from instance group
     * @returns string user removed from instance group
     * @throws ApiError
     */
    public static removeUserFromInstanceGroup(data: RemoveUserFromInstanceGroupData): CancelablePromise<RemoveUserFromInstanceGroupResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/groups/removeuser/{name}',
            path: {
                name: data.name
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * export instance groups
     * @returns ExportedInstanceGroup exported instance groups
     * @throws ApiError
     */
    public static exportInstanceGroups(): CancelablePromise<ExportInstanceGroupsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/groups/export'
        });
    }
    
    /**
     * overwrite instance groups
     * @param data The data for the request.
     * @param data.requestBody overwrite instance groups
     * @returns string success message
     * @throws ApiError
     */
    public static overwriteInstanceGroups(data: OverwriteInstanceGroupsData): CancelablePromise<OverwriteInstanceGroupsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/groups/overwrite',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * list groups
     * @param data The data for the request.
     * @param data.workspace
     * @param data.page which page to return (start at 1, default 1)
     * @param data.perPage number of items to return for a given page (default 30, max 100)
     * @returns Group group list
     * @throws ApiError
     */
    public static listGroups(data: ListGroupsData): CancelablePromise<ListGroupsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/groups/list',
            path: {
                workspace: data.workspace
            },
            query: {
                page: data.page,
                per_page: data.perPage
            }
        });
    }
    
    /**
     * list group names
     * @param data The data for the request.
     * @param data.workspace
     * @param data.onlyMemberOf only list the groups the user is member of (default false)
     * @returns string group list
     * @throws ApiError
     */
    public static listGroupNames(data: ListGroupNamesData): CancelablePromise<ListGroupNamesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/groups/listnames',
            path: {
                workspace: data.workspace
            },
            query: {
                only_member_of: data.onlyMemberOf
            }
        });
    }
    
    /**
     * create group
     * @param data The data for the request.
     * @param data.workspace
     * @param data.requestBody create group
     * @returns string group created
     * @throws ApiError
     */
    public static createGroup(data: CreateGroupData): CancelablePromise<CreateGroupResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/groups/create',
            path: {
                workspace: data.workspace
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * update group
     * @param data The data for the request.
     * @param data.workspace
     * @param data.name
     * @param data.requestBody updated group
     * @returns string group updated
     * @throws ApiError
     */
    public static updateGroup(data: UpdateGroupData): CancelablePromise<UpdateGroupResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/groups/update/{name}',
            path: {
                workspace: data.workspace,
                name: data.name
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * delete group
     * @param data The data for the request.
     * @param data.workspace
     * @param data.name
     * @returns string group deleted
     * @throws ApiError
     */
    public static deleteGroup(data: DeleteGroupData): CancelablePromise<DeleteGroupResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/w/{workspace}/groups/delete/{name}',
            path: {
                workspace: data.workspace,
                name: data.name
            }
        });
    }
    
    /**
     * get group
     * @param data The data for the request.
     * @param data.workspace
     * @param data.name
     * @returns Group group
     * @throws ApiError
     */
    public static getGroup(data: GetGroupData): CancelablePromise<GetGroupResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/groups/get/{name}',
            path: {
                workspace: data.workspace,
                name: data.name
            }
        });
    }
    
    /**
     * add user to group
     * @param data The data for the request.
     * @param data.workspace
     * @param data.name
     * @param data.requestBody added user to group
     * @returns string user added to group
     * @throws ApiError
     */
    public static addUserToGroup(data: AddUserToGroupData): CancelablePromise<AddUserToGroupResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/groups/adduser/{name}',
            path: {
                workspace: data.workspace,
                name: data.name
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * remove user to group
     * @param data The data for the request.
     * @param data.workspace
     * @param data.name
     * @param data.requestBody added user to group
     * @returns string user removed from group
     * @throws ApiError
     */
    public static removeUserToGroup(data: RemoveUserToGroupData): CancelablePromise<RemoveUserToGroupResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/groups/removeuser/{name}',
            path: {
                workspace: data.workspace,
                name: data.name
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
}

export class FolderService {
    /**
     * list folders
     * @param data The data for the request.
     * @param data.workspace
     * @param data.page which page to return (start at 1, default 1)
     * @param data.perPage number of items to return for a given page (default 30, max 100)
     * @returns Folder folder list
     * @throws ApiError
     */
    public static listFolders(data: ListFoldersData): CancelablePromise<ListFoldersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/folders/list',
            path: {
                workspace: data.workspace
            },
            query: {
                page: data.page,
                per_page: data.perPage
            }
        });
    }
    
    /**
     * list folder names
     * @param data The data for the request.
     * @param data.workspace
     * @param data.onlyMemberOf only list the folders the user is member of (default false)
     * @returns string folder list
     * @throws ApiError
     */
    public static listFolderNames(data: ListFolderNamesData): CancelablePromise<ListFolderNamesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/folders/listnames',
            path: {
                workspace: data.workspace
            },
            query: {
                only_member_of: data.onlyMemberOf
            }
        });
    }
    
    /**
     * create folder
     * @param data The data for the request.
     * @param data.workspace
     * @param data.requestBody create folder
     * @returns string folder created
     * @throws ApiError
     */
    public static createFolder(data: CreateFolderData): CancelablePromise<CreateFolderResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/folders/create',
            path: {
                workspace: data.workspace
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * update folder
     * @param data The data for the request.
     * @param data.workspace
     * @param data.name
     * @param data.requestBody update folder
     * @returns string folder updated
     * @throws ApiError
     */
    public static updateFolder(data: UpdateFolderData): CancelablePromise<UpdateFolderResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/folders/update/{name}',
            path: {
                workspace: data.workspace,
                name: data.name
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * delete folder
     * @param data The data for the request.
     * @param data.workspace
     * @param data.name
     * @returns string folder deleted
     * @throws ApiError
     */
    public static deleteFolder(data: DeleteFolderData): CancelablePromise<DeleteFolderResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/w/{workspace}/folders/delete/{name}',
            path: {
                workspace: data.workspace,
                name: data.name
            }
        });
    }
    
    /**
     * get folder
     * @param data The data for the request.
     * @param data.workspace
     * @param data.name
     * @returns Folder folder
     * @throws ApiError
     */
    public static getFolder(data: GetFolderData): CancelablePromise<GetFolderResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/folders/get/{name}',
            path: {
                workspace: data.workspace,
                name: data.name
            }
        });
    }
    
    /**
     * get folder usage
     * @param data The data for the request.
     * @param data.workspace
     * @param data.name
     * @returns unknown folder
     * @throws ApiError
     */
    public static getFolderUsage(data: GetFolderUsageData): CancelablePromise<GetFolderUsageResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/folders/getusage/{name}',
            path: {
                workspace: data.workspace,
                name: data.name
            }
        });
    }
    
    /**
     * add owner to folder
     * @param data The data for the request.
     * @param data.workspace
     * @param data.name
     * @param data.requestBody owner user to folder
     * @returns string owner added to folder
     * @throws ApiError
     */
    public static addOwnerToFolder(data: AddOwnerToFolderData): CancelablePromise<AddOwnerToFolderResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/folders/addowner/{name}',
            path: {
                workspace: data.workspace,
                name: data.name
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * remove owner to folder
     * @param data The data for the request.
     * @param data.workspace
     * @param data.name
     * @param data.requestBody added owner to folder
     * @returns string owner removed from folder
     * @throws ApiError
     */
    public static removeOwnerToFolder(data: RemoveOwnerToFolderData): CancelablePromise<RemoveOwnerToFolderResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/folders/removeowner/{name}',
            path: {
                workspace: data.workspace,
                name: data.name
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
}

export class ConfigService {
    /**
     * list worker groups
     * @returns unknown a list of worker group configs
     * @throws ApiError
     */
    public static listWorkerGroups(): CancelablePromise<ListWorkerGroupsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/configs/list_worker_groups'
        });
    }
    
    /**
     * get config
     * @param data The data for the request.
     * @param data.name
     * @returns unknown a config
     * @throws ApiError
     */
    public static getConfig(data: GetConfigData): CancelablePromise<GetConfigResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/configs/get/{name}',
            path: {
                name: data.name
            }
        });
    }
    
    /**
     * Update config
     * @param data The data for the request.
     * @param data.name
     * @param data.requestBody worker group
     * @returns string Update a worker group
     * @throws ApiError
     */
    public static updateConfig(data: UpdateConfigData): CancelablePromise<UpdateConfigResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/configs/update/{name}',
            path: {
                name: data.name
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * Delete Config
     * @param data The data for the request.
     * @param data.name
     * @returns string Delete config
     * @throws ApiError
     */
    public static deleteConfig(data: DeleteConfigData): CancelablePromise<DeleteConfigResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/configs/update/{name}',
            path: {
                name: data.name
            }
        });
    }
    
    /**
     * list configs
     * @returns Config list of configs
     * @throws ApiError
     */
    public static listConfigs(): CancelablePromise<ListConfigsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/configs/list'
        });
    }
    
}

export class GranularAclService {
    /**
     * get granular acls
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @param data.kind
     * @returns boolean acls
     * @throws ApiError
     */
    public static getGranularAcls(data: GetGranularAclsData): CancelablePromise<GetGranularAclsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/acls/get/{kind}/{path}',
            path: {
                workspace: data.workspace,
                path: data.path,
                kind: data.kind
            }
        });
    }
    
    /**
     * add granular acls
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @param data.kind
     * @param data.requestBody acl to add
     * @returns string granular acl added
     * @throws ApiError
     */
    public static addGranularAcls(data: AddGranularAclsData): CancelablePromise<AddGranularAclsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/acls/add/{kind}/{path}',
            path: {
                workspace: data.workspace,
                path: data.path,
                kind: data.kind
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * remove granular acls
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @param data.kind
     * @param data.requestBody acl to add
     * @returns string granular acl removed
     * @throws ApiError
     */
    public static removeGranularAcls(data: RemoveGranularAclsData): CancelablePromise<RemoveGranularAclsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/acls/remove/{kind}/{path}',
            path: {
                workspace: data.workspace,
                path: data.path,
                kind: data.kind
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
}

export class CaptureService {
    /**
     * update flow preview capture
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @returns void flow preview captured
     * @throws ApiError
     */
    public static updateCapture(data: UpdateCaptureData): CancelablePromise<UpdateCaptureResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/capture_u/{path}',
            path: {
                workspace: data.workspace,
                path: data.path
            }
        });
    }
    
    /**
     * create flow preview capture
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @returns unknown flow preview capture created
     * @throws ApiError
     */
    public static createCapture(data: CreateCaptureData): CancelablePromise<CreateCaptureResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/w/{workspace}/capture/{path}',
            path: {
                workspace: data.workspace,
                path: data.path
            }
        });
    }
    
    /**
     * get flow preview capture
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @returns unknown captured flow preview
     * @throws ApiError
     */
    public static getCapture(data: GetCaptureData): CancelablePromise<GetCaptureResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/capture/{path}',
            path: {
                workspace: data.workspace,
                path: data.path
            },
            errors: {
                404: 'capture does not exist for this flow'
            }
        });
    }
    
}

export class FavoriteService {
    /**
     * star item
     * @param data The data for the request.
     * @param data.workspace
     * @param data.requestBody
     * @returns unknown star item
     * @throws ApiError
     */
    public static star(data: StarData): CancelablePromise<StarResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/favorites/star',
            path: {
                workspace: data.workspace
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * unstar item
     * @param data The data for the request.
     * @param data.workspace
     * @param data.requestBody
     * @returns unknown unstar item
     * @throws ApiError
     */
    public static unstar(data: UnstarData): CancelablePromise<UnstarResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/favorites/unstar',
            path: {
                workspace: data.workspace
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
}

export class InputService {
    /**
     * List Inputs used in previously completed jobs
     * @param data The data for the request.
     * @param data.workspace
     * @param data.runnableId
     * @param data.runnableType
     * @param data.page which page to return (start at 1, default 1)
     * @param data.perPage number of items to return for a given page (default 30, max 100)
     * @returns Input Input history for completed jobs
     * @throws ApiError
     */
    public static getInputHistory(data: GetInputHistoryData): CancelablePromise<GetInputHistoryResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/inputs/history',
            path: {
                workspace: data.workspace
            },
            query: {
                runnable_id: data.runnableId,
                runnable_type: data.runnableType,
                page: data.page,
                per_page: data.perPage
            }
        });
    }
    
    /**
     * Get args from history or saved input
     * @param data The data for the request.
     * @param data.workspace
     * @param data.jobOrInputId
     * @param data.input
     * @param data.allowLarge
     * @returns unknown args
     * @throws ApiError
     */
    public static getArgsFromHistoryOrSavedInput(data: GetArgsFromHistoryOrSavedInputData): CancelablePromise<GetArgsFromHistoryOrSavedInputResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/inputs/{jobOrInputId}/args',
            path: {
                workspace: data.workspace,
                jobOrInputId: data.jobOrInputId
            },
            query: {
                input: data.input,
                allow_large: data.allowLarge
            }
        });
    }
    
    /**
     * List saved Inputs for a Runnable
     * @param data The data for the request.
     * @param data.workspace
     * @param data.runnableId
     * @param data.runnableType
     * @param data.page which page to return (start at 1, default 1)
     * @param data.perPage number of items to return for a given page (default 30, max 100)
     * @returns Input Saved Inputs for a Runnable
     * @throws ApiError
     */
    public static listInputs(data: ListInputsData): CancelablePromise<ListInputsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/inputs/list',
            path: {
                workspace: data.workspace
            },
            query: {
                runnable_id: data.runnableId,
                runnable_type: data.runnableType,
                page: data.page,
                per_page: data.perPage
            }
        });
    }
    
    /**
     * Create an Input for future use in a script or flow
     * @param data The data for the request.
     * @param data.workspace
     * @param data.requestBody Input
     * @param data.runnableId
     * @param data.runnableType
     * @returns string Input created
     * @throws ApiError
     */
    public static createInput(data: CreateInputData): CancelablePromise<CreateInputResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/inputs/create',
            path: {
                workspace: data.workspace
            },
            query: {
                runnable_id: data.runnableId,
                runnable_type: data.runnableType
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * Update an Input
     * @param data The data for the request.
     * @param data.workspace
     * @param data.requestBody UpdateInput
     * @returns string Input updated
     * @throws ApiError
     */
    public static updateInput(data: UpdateInputData): CancelablePromise<UpdateInputResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/inputs/update',
            path: {
                workspace: data.workspace
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * Delete a Saved Input
     * @param data The data for the request.
     * @param data.workspace
     * @param data.input
     * @returns string Input deleted
     * @throws ApiError
     */
    public static deleteInput(data: DeleteInputData): CancelablePromise<DeleteInputResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/inputs/delete/{input}',
            path: {
                workspace: data.workspace,
                input: data.input
            }
        });
    }
    
}

export class HelpersService {
    /**
     * Converts an S3 resource to the set of instructions necessary to connect DuckDB to an S3 bucket
     * @param data The data for the request.
     * @param data.workspace
     * @param data.requestBody S3 resource to connect to
     * @returns unknown Connection settings
     * @throws ApiError
     */
    public static duckdbConnectionSettings(data: DuckdbConnectionSettingsData): CancelablePromise<DuckdbConnectionSettingsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/job_helpers/duckdb_connection_settings',
            path: {
                workspace: data.workspace
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * Converts an S3 resource to the set of instructions necessary to connect DuckDB to an S3 bucket
     * @param data The data for the request.
     * @param data.workspace
     * @param data.requestBody S3 resource path to use to generate the connection settings. If empty, the S3 resource defined in the workspace settings will be used
     * @returns unknown Connection settings
     * @throws ApiError
     */
    public static duckdbConnectionSettingsV2(data: DuckdbConnectionSettingsV2Data): CancelablePromise<DuckdbConnectionSettingsV2Response> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/job_helpers/v2/duckdb_connection_settings',
            path: {
                workspace: data.workspace
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * Converts an S3 resource to the set of arguments necessary to connect Polars to an S3 bucket
     * @param data The data for the request.
     * @param data.workspace
     * @param data.requestBody S3 resource to connect to
     * @returns unknown Connection settings
     * @throws ApiError
     */
    public static polarsConnectionSettings(data: PolarsConnectionSettingsData): CancelablePromise<PolarsConnectionSettingsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/job_helpers/polars_connection_settings',
            path: {
                workspace: data.workspace
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * Converts an S3 resource to the set of arguments necessary to connect Polars to an S3 bucket
     * @param data The data for the request.
     * @param data.workspace
     * @param data.requestBody S3 resource path to use to generate the connection settings. If empty, the S3 resource defined in the workspace settings will be used
     * @returns unknown Connection settings
     * @throws ApiError
     */
    public static polarsConnectionSettingsV2(data: PolarsConnectionSettingsV2Data): CancelablePromise<PolarsConnectionSettingsV2Response> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/job_helpers/v2/polars_connection_settings',
            path: {
                workspace: data.workspace
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * Returns the s3 resource associated to the provided path, or the workspace default S3 resource
     * @param data The data for the request.
     * @param data.workspace
     * @param data.requestBody S3 resource path to use. If empty, the S3 resource defined in the workspace settings will be used
     * @returns S3Resource Connection settings
     * @throws ApiError
     */
    public static s3ResourceInfo(data: S3ResourceInfoData): CancelablePromise<S3ResourceInfoResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/job_helpers/v2/s3_resource_info',
            path: {
                workspace: data.workspace
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * Test connection to the workspace object storage
     * @param data The data for the request.
     * @param data.workspace
     * @param data.storage
     * @returns unknown Connection settings
     * @throws ApiError
     */
    public static datasetStorageTestConnection(data: DatasetStorageTestConnectionData): CancelablePromise<DatasetStorageTestConnectionResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/job_helpers/test_connection',
            path: {
                workspace: data.workspace
            },
            query: {
                storage: data.storage
            }
        });
    }
    
    /**
     * List the file keys available in a workspace object storage
     * @param data The data for the request.
     * @param data.workspace
     * @param data.maxKeys
     * @param data.marker
     * @param data.prefix
     * @param data.storage
     * @returns unknown List of file keys
     * @throws ApiError
     */
    public static listStoredFiles(data: ListStoredFilesData): CancelablePromise<ListStoredFilesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/job_helpers/list_stored_files',
            path: {
                workspace: data.workspace
            },
            query: {
                max_keys: data.maxKeys,
                marker: data.marker,
                prefix: data.prefix,
                storage: data.storage
            }
        });
    }
    
    /**
     * Load metadata of the file
     * @param data The data for the request.
     * @param data.workspace
     * @param data.fileKey
     * @param data.storage
     * @returns WindmillFileMetadata FileMetadata
     * @throws ApiError
     */
    public static loadFileMetadata(data: LoadFileMetadataData): CancelablePromise<LoadFileMetadataResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/job_helpers/load_file_metadata',
            path: {
                workspace: data.workspace
            },
            query: {
                file_key: data.fileKey,
                storage: data.storage
            }
        });
    }
    
    /**
     * Load a preview of the file
     * @param data The data for the request.
     * @param data.workspace
     * @param data.fileKey
     * @param data.fileSizeInBytes
     * @param data.fileMimeType
     * @param data.csvSeparator
     * @param data.csvHasHeader
     * @param data.readBytesFrom
     * @param data.readBytesLength
     * @param data.storage
     * @returns WindmillFilePreview FilePreview
     * @throws ApiError
     */
    public static loadFilePreview(data: LoadFilePreviewData): CancelablePromise<LoadFilePreviewResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/job_helpers/load_file_preview',
            path: {
                workspace: data.workspace
            },
            query: {
                file_key: data.fileKey,
                file_size_in_bytes: data.fileSizeInBytes,
                file_mime_type: data.fileMimeType,
                csv_separator: data.csvSeparator,
                csv_has_header: data.csvHasHeader,
                read_bytes_from: data.readBytesFrom,
                read_bytes_length: data.readBytesLength,
                storage: data.storage
            }
        });
    }
    
    /**
     * Load a preview of a parquet file
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @param data.offset
     * @param data.limit
     * @param data.sortCol
     * @param data.sortDesc
     * @param data.searchCol
     * @param data.searchTerm
     * @param data.storage
     * @returns unknown Parquet Preview
     * @throws ApiError
     */
    public static loadParquetPreview(data: LoadParquetPreviewData): CancelablePromise<LoadParquetPreviewResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/job_helpers/load_parquet_preview/{path}',
            path: {
                workspace: data.workspace,
                path: data.path
            },
            query: {
                offset: data.offset,
                limit: data.limit,
                sort_col: data.sortCol,
                sort_desc: data.sortDesc,
                search_col: data.searchCol,
                search_term: data.searchTerm,
                storage: data.storage
            }
        });
    }
    
    /**
     * Load a preview of a csv file
     * @param data The data for the request.
     * @param data.workspace
     * @param data.path
     * @param data.offset
     * @param data.limit
     * @param data.sortCol
     * @param data.sortDesc
     * @param data.searchCol
     * @param data.searchTerm
     * @param data.storage
     * @param data.csvSeparator
     * @returns unknown Csv Preview
     * @throws ApiError
     */
    public static loadCsvPreview(data: LoadCsvPreviewData): CancelablePromise<LoadCsvPreviewResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/job_helpers/load_csv_preview/{path}',
            path: {
                workspace: data.workspace,
                path: data.path
            },
            query: {
                offset: data.offset,
                limit: data.limit,
                sort_col: data.sortCol,
                sort_desc: data.sortDesc,
                search_col: data.searchCol,
                search_term: data.searchTerm,
                storage: data.storage,
                csv_separator: data.csvSeparator
            }
        });
    }
    
    /**
     * Permanently delete file from S3
     * @param data The data for the request.
     * @param data.workspace
     * @param data.fileKey
     * @param data.storage
     * @returns unknown Confirmation
     * @throws ApiError
     */
    public static deleteS3File(data: DeleteS3FileData): CancelablePromise<DeleteS3FileResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/w/{workspace}/job_helpers/delete_s3_file',
            path: {
                workspace: data.workspace
            },
            query: {
                file_key: data.fileKey,
                storage: data.storage
            }
        });
    }
    
    /**
     * Move a S3 file from one path to the other within the same bucket
     * @param data The data for the request.
     * @param data.workspace
     * @param data.srcFileKey
     * @param data.destFileKey
     * @param data.storage
     * @returns unknown Confirmation
     * @throws ApiError
     */
    public static moveS3File(data: MoveS3FileData): CancelablePromise<MoveS3FileResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/job_helpers/move_s3_file',
            path: {
                workspace: data.workspace
            },
            query: {
                src_file_key: data.srcFileKey,
                dest_file_key: data.destFileKey,
                storage: data.storage
            }
        });
    }
    
    /**
     * Upload file to S3 bucket
     * @param data The data for the request.
     * @param data.workspace
     * @param data.requestBody File content
     * @param data.fileKey
     * @param data.fileExtension
     * @param data.s3ResourcePath
     * @param data.resourceType
     * @param data.storage
     * @returns unknown File upload status
     * @throws ApiError
     */
    public static fileUpload(data: FileUploadData): CancelablePromise<FileUploadResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/job_helpers/upload_s3_file',
            path: {
                workspace: data.workspace
            },
            query: {
                file_key: data.fileKey,
                file_extension: data.fileExtension,
                s3_resource_path: data.s3ResourcePath,
                resource_type: data.resourceType,
                storage: data.storage
            },
            body: data.requestBody,
            mediaType: 'application/octet-stream'
        });
    }
    
    /**
     * Download file to S3 bucket
     * @param data The data for the request.
     * @param data.workspace
     * @param data.fileKey
     * @param data.s3ResourcePath
     * @param data.resourceType
     * @param data.storage
     * @returns binary Chunk of the downloaded file
     * @throws ApiError
     */
    public static fileDownload(data: FileDownloadData): CancelablePromise<FileDownloadResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/job_helpers/download_s3_file',
            path: {
                workspace: data.workspace
            },
            query: {
                file_key: data.fileKey,
                s3_resource_path: data.s3ResourcePath,
                resource_type: data.resourceType,
                storage: data.storage
            }
        });
    }
    
    /**
     * Download file to S3 bucket
     * @param data The data for the request.
     * @param data.workspace
     * @param data.fileKey
     * @param data.s3ResourcePath
     * @param data.resourceType
     * @returns string The downloaded file
     * @throws ApiError
     */
    public static fileDownloadParquetAsCsv(data: FileDownloadParquetAsCsvData): CancelablePromise<FileDownloadParquetAsCsvResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/job_helpers/download_s3_parquet_file_as_csv',
            path: {
                workspace: data.workspace
            },
            query: {
                file_key: data.fileKey,
                s3_resource_path: data.s3ResourcePath,
                resource_type: data.resourceType
            }
        });
    }
    
}

export class MetricsService {
    /**
     * get job metrics
     * @param data The data for the request.
     * @param data.workspace
     * @param data.id
     * @param data.requestBody parameters for statistics retrieval
     * @returns unknown job details
     * @throws ApiError
     */
    public static getJobMetrics(data: GetJobMetricsData): CancelablePromise<GetJobMetricsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/w/{workspace}/job_metrics/get/{id}',
            path: {
                workspace: data.workspace,
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
}

export class ConcurrencyGroupsService {
    /**
     * List all concurrency groups
     * @returns ConcurrencyGroup all concurrency groups
     * @throws ApiError
     */
    public static listConcurrencyGroups(): CancelablePromise<ListConcurrencyGroupsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/concurrency_groups/list'
        });
    }
    
    /**
     * Delete concurrency group
     * @param data The data for the request.
     * @param data.concurrencyId
     * @returns unknown concurrency group removed
     * @throws ApiError
     */
    public static deleteConcurrencyGroup(data: DeleteConcurrencyGroupData): CancelablePromise<DeleteConcurrencyGroupResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/concurrency_groups/prune/{concurrency_id}',
            path: {
                concurrency_id: data.concurrencyId
            }
        });
    }
    
    /**
     * Get the concurrency key for a job that has concurrency limits enabled
     * @param data The data for the request.
     * @param data.id
     * @returns string concurrency key for given job
     * @throws ApiError
     */
    public static getConcurrencyKey(data: GetConcurrencyKeyData): CancelablePromise<GetConcurrencyKeyResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/concurrency_groups/{id}/key',
            path: {
                id: data.id
            }
        });
    }
    
    /**
     * Get intervals of job runtime concurrency
     * @param data The data for the request.
     * @param data.workspace
     * @param data.concurrencyKey
     * @param data.rowLimit
     * @param data.createdBy mask to filter exact matching user creator
     * @param data.label mask to filter exact matching job's label (job labels are completed jobs with as a result an object containing a string in the array at key 'wm_labels')
     * @param data.parentJob The parent job that is at the origin and responsible for the execution of this script if any
     * @param data.scriptPathExact mask to filter exact matching path
     * @param data.scriptPathStart mask to filter matching starting path
     * @param data.schedulePath mask to filter by schedule path
     * @param data.scriptHash mask to filter exact matching path
     * @param data.startedBefore filter on started before (inclusive) timestamp
     * @param data.startedAfter filter on started after (exclusive) timestamp
     * @param data.createdOrStartedBefore filter on created_at for non non started job and started_at otherwise before (inclusive) timestamp
     * @param data.running filter on running jobs
     * @param data.scheduledForBeforeNow filter on jobs scheduled_for before now (hence waitinf for a worker)
     * @param data.createdOrStartedAfter filter on created_at for non non started job and started_at otherwise after (exclusive) timestamp
     * @param data.createdOrStartedAfterCompletedJobs filter on created_at for non non started job and started_at otherwise after (exclusive) timestamp but only for the completed jobs
     * @param data.jobKinds filter on job kind (values 'preview', 'script', 'dependencies', 'flow') separated by,
     * @param data.args filter on jobs containing those args as a json subset (@> in postgres)
     * @param data.tag filter on jobs with a given tag/worker group
     * @param data.result filter on jobs containing those result as a json subset (@> in postgres)
     * @param data.page which page to return (start at 1, default 1)
     * @param data.perPage number of items to return for a given page (default 30, max 100)
     * @param data.isSkipped is the job skipped
     * @param data.isFlowStep is the job a flow step
     * @param data.hasNullParent has null parent
     * @param data.success filter on successful jobs
     * @param data.allWorkspaces get jobs from all workspaces (only valid if request come from the `admins` workspace)
     * @param data.isNotSchedule is not a scheduled job
     * @returns ExtendedJobs time
     * @throws ApiError
     */
    public static listExtendedJobs(data: ListExtendedJobsData): CancelablePromise<ListExtendedJobsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/w/{workspace}/concurrency_groups/list_jobs',
            path: {
                workspace: data.workspace
            },
            query: {
                concurrency_key: data.concurrencyKey,
                row_limit: data.rowLimit,
                created_by: data.createdBy,
                label: data.label,
                parent_job: data.parentJob,
                script_path_exact: data.scriptPathExact,
                script_path_start: data.scriptPathStart,
                schedule_path: data.schedulePath,
                script_hash: data.scriptHash,
                started_before: data.startedBefore,
                started_after: data.startedAfter,
                created_or_started_before: data.createdOrStartedBefore,
                running: data.running,
                scheduled_for_before_now: data.scheduledForBeforeNow,
                created_or_started_after: data.createdOrStartedAfter,
                created_or_started_after_completed_jobs: data.createdOrStartedAfterCompletedJobs,
                job_kinds: data.jobKinds,
                args: data.args,
                tag: data.tag,
                result: data.result,
                page: data.page,
                per_page: data.perPage,
                is_skipped: data.isSkipped,
                is_flow_step: data.isFlowStep,
                has_null_parent: data.hasNullParent,
                success: data.success,
                all_workspaces: data.allWorkspaces,
                is_not_schedule: data.isNotSchedule
            }
        });
    }
    
}

export class IndexSearchService {
    /**
     * Search through jobs with a string query
     * @param data The data for the request.
     * @param data.workspace
     * @param data.searchQuery
     * @returns unknown search results
     * @throws ApiError
     */
    public static searchJobsIndex(data: SearchJobsIndexData): CancelablePromise<SearchJobsIndexResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/srch/w/{workspace}/index/search/job',
            path: {
                workspace: data.workspace
            },
            query: {
                search_query: data.searchQuery
            }
        });
    }
    
}