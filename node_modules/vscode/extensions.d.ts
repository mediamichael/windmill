import * as vscode from 'vscode';
import { IExtensionManifest } from './vscode/src/vs/platform/extensions/common/extensions.js';
export { IExtensionContributions } from './vscode/src/vs/platform/extensions/common/extensions.js';
import { IDisposable } from './vscode/src/vs/base/common/lifecycle.js';
export { ITranslations } from './vscode/src/vs/platform/extensionManagement/common/extensionNls.js';
import { ExtensionHostKind } from './vscode/src/vs/workbench/services/extensions/common/extensionHostKind.js';

declare function initialize(): Promise<void>;
interface RegisterExtensionParams {
    builtin?: boolean;
    path?: string;
}
interface RegisterRemoteExtensionParams extends RegisterExtensionParams {
    path: string;
}
interface RegisterExtensionResult {
    id: string;
    dispose(): Promise<void>;
    whenReady(): Promise<void>;
}
interface RegisterRemoteExtensionResult extends RegisterExtensionResult {
}
interface RegisterLocalExtensionResult extends RegisterExtensionResult {
    registerFileUrl: (path: string, url: string) => IDisposable;
}
interface RegisterLocalProcessExtensionResult extends RegisterLocalExtensionResult {
    getApi(): Promise<typeof vscode>;
    setAsDefaultApi(): Promise<void>;
}
declare function registerRemoteExtension(directory: string): Promise<RegisterRemoteExtensionResult>;
declare function registerExtension(manifest: IExtensionManifest, extHostKind: ExtensionHostKind.LocalProcess, params?: RegisterExtensionParams): RegisterLocalProcessExtensionResult;
declare function registerExtension(manifest: IExtensionManifest, extHostKind: ExtensionHostKind.LocalWebWorker, params?: RegisterExtensionParams): RegisterLocalExtensionResult;
declare function registerExtension(manifest: IExtensionManifest, extHostKind: ExtensionHostKind.Remote, params?: RegisterRemoteExtensionParams): RegisterRemoteExtensionResult;
declare function registerExtension(manifest: IExtensionManifest, extHostKind?: ExtensionHostKind, params?: RegisterExtensionParams): RegisterExtensionResult;
declare function onExtHostInitialized(fct: () => void): void;

export { ExtensionHostKind, IExtensionManifest, initialize, onExtHostInitialized, registerExtension, registerRemoteExtension };
