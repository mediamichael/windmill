import { Event } from '../../../../base/common/event.js';
import { IExtensionDescription, ExtensionIdentifier } from '../../../../platform/extensions/common/extensions.js';

declare class DeltaExtensionsResult {
    readonly versionId: number;
    readonly removedDueToLooping: IExtensionDescription[];
    constructor(versionId: number, removedDueToLooping: IExtensionDescription[]);
}
interface IReadOnlyExtensionDescriptionRegistry {
    containsActivationEvent(activationEvent: string): boolean;
    containsExtension(extensionId: ExtensionIdentifier): boolean;
    getExtensionDescriptionsForActivationEvent(activationEvent: string): IExtensionDescription[];
    getAllExtensionDescriptions(): IExtensionDescription[];
    getExtensionDescription(extensionId: ExtensionIdentifier | string): IExtensionDescription | undefined;
    getExtensionDescriptionByUUID(uuid: string): IExtensionDescription | undefined;
    getExtensionDescriptionByIdOrUUID(extensionId: ExtensionIdentifier | string, uuid: string | undefined): IExtensionDescription | undefined;
}
declare class ExtensionDescriptionRegistry implements IReadOnlyExtensionDescriptionRegistry {
    private readonly _activationEventsReader;
    static isHostExtension(extensionId: ExtensionIdentifier | string, myRegistry: ExtensionDescriptionRegistry, globalRegistry: ExtensionDescriptionRegistry): boolean;
    private readonly _onDidChange;
    readonly onDidChange: Event<void>;
    private _versionId;
    private _extensionDescriptions;
    private _extensionsMap;
    private _extensionsArr;
    private _activationMap;
    constructor(_activationEventsReader: IActivationEventsReader, extensionDescriptions: IExtensionDescription[]);
    private _initialize;
    set(extensionDescriptions: IExtensionDescription[]): {
        versionId: number;
    };
    deltaExtensions(toAdd: IExtensionDescription[], toRemove: ExtensionIdentifier[]): DeltaExtensionsResult;
    private static _findLoopingExtensions;
    containsActivationEvent(activationEvent: string): boolean;
    containsExtension(extensionId: ExtensionIdentifier): boolean;
    getExtensionDescriptionsForActivationEvent(activationEvent: string): IExtensionDescription[];
    getAllExtensionDescriptions(): IExtensionDescription[];
    getSnapshot(): ExtensionDescriptionRegistrySnapshot;
    getExtensionDescription(extensionId: ExtensionIdentifier | string): IExtensionDescription | undefined;
    getExtensionDescriptionByUUID(uuid: string): IExtensionDescription | undefined;
    getExtensionDescriptionByIdOrUUID(extensionId: ExtensionIdentifier | string, uuid: string | undefined): IExtensionDescription | undefined;
}
declare class ExtensionDescriptionRegistrySnapshot {
    readonly versionId: number;
    readonly extensions: readonly IExtensionDescription[];
    constructor(versionId: number, extensions: readonly IExtensionDescription[]);
}
interface IActivationEventsReader {
    readActivationEvents(extensionDescription: IExtensionDescription): string[] | undefined;
}

export { DeltaExtensionsResult, ExtensionDescriptionRegistry, ExtensionDescriptionRegistrySnapshot, type IActivationEventsReader, type IReadOnlyExtensionDescriptionRegistry };
