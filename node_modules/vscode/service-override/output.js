import { __decorate, __param } from '../external/tslib/tslib.es6.js';
import { SyncDescriptor } from 'monaco-editor/esm/vs/platform/instantiation/common/descriptors.js';
import { IFileService } from 'monaco-editor/esm/vs/platform/files/common/files.js';
import { ILoggerService, getLogLevel } from 'monaco-editor/esm/vs/platform/log/common/log.js';
import { FileLoggerService } from '../vscode/src/vs/platform/log/common/fileLog.js';
import '../vscode/src/vs/workbench/contrib/output/browser/output.contribution.js';
import { IEnvironmentService } from 'monaco-editor/esm/vs/platform/environment/common/environment.js';
import { logsPath } from '../workbench.js';
let _FileLoggerService = class _FileLoggerService extends FileLoggerService {
    constructor(logLevel, fileService, environmentService) {
        super(logLevel ?? getLogLevel(environmentService), logsPath, fileService);
    }
};
_FileLoggerService = __decorate([
    ( __param(1, IFileService)),
    ( __param(2, IEnvironmentService))
], _FileLoggerService);
function getServiceOverride(logLevel) {
    return {
        [( ILoggerService.toString())]: new SyncDescriptor(_FileLoggerService, [logLevel], true)
    };
}
export { getServiceOverride as default };
