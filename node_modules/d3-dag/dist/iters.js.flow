/**
 * Flowtype definitions for dist/iters.d.ts
 * Generated by Flowgen from a Typescript Definition
 * @flow
 */
/**
 * Stopgap for esnext iterable features
 * @internal
 * @packageDocumentation
 */
/**
 * iterable callback that maps a value into another
 */
export interface MapCallback<T, S> {
  (element: T, index: number): S;
}
/**
 * reduce callback
 */
export interface ReduceCallback<T, S> {
  (accumulator: S, currentValue: T, index: number): S;
}
/**
 * filter guard callback
 */
export interface FilterGuardCallback<T, S: T> {
  (element: T, index: number): boolean;
}
/**
 * elements with their zero based index
 */
declare export function entries<T>(
  iter: Iterable<T>
): IterableIterator<[number, T]>;

/**
 * iterable flat map
 */
declare export function flatMap<T, S>(
  iter: Iterable<T>,
  callback: MapCallback<T, Iterable<S>>
): IterableIterator<S>;

/**
 * iterable reduce
 */
declare export function reduce<T, S>(
  iter: Iterable<T>,
  callback: ReduceCallback<T, S>,
  initialValue: S
): S;

/**
 * iterable map
 */
declare export function map<T, S>(
  iter: Iterable<T>,
  callback: MapCallback<T, S>
): IterableIterator<S>;

/**
 * guard iterable filter
 */
declare export function filter<T, S: T>(
  iter: Iterable<T>,
  callback: FilterGuardCallback<T, S>
): IterableIterator<S>;

/**
 * generic iterable filter
 */
declare export function filter<T>(
  iter: Iterable<T>,
  callback: MapCallback<T, boolean>
): IterableIterator<T>;

/**
 * iterable some
 */
declare export function some<T>(
  iter: Iterable<T>,
  callback: MapCallback<T, boolean>
): boolean;

/**
 * iterable every
 */
declare export function every<T>(
  iter: Iterable<T>,
  callback: MapCallback<T, boolean>
): boolean;

/**
 * iterator over array reverse
 */
declare export function reverse<T>(arr: $ReadOnlyArray<T>): IterableIterator<T>;
