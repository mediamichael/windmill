/**
 * Flowtype definitions for dist/grid/index.d.ts
 * Generated by Flowgen from a Typescript Definition
 * @flow
 */
// see https://gist.github.com/thecotne/6e5969f4aaf8f253985ed36b30ac9fe0
type $FlowGen$If<X: boolean, Then, Else = empty> = $Call<
  ((true, Then, Else) => Then) & ((false, Then, Else) => Else),
  X,
  Then,
  Else
>;

type $FlowGen$Assignable<A, B> = $Call<
  ((...r: [B]) => true) & ((...r: [A]) => false),
  A
>;

import { Dag, DagNode } from "../dag";
import { Up } from "../utils";
import { LaneOperator } from "./lane";
import { GreedyOperator } from "./lane/greedy";

/**
 * an operator for assigning rank priorities to nodes for a grid layout
 *
 * Nodes with lower ranks will be chose first, so for a rank order to work, a
 * node must have a lower rank than it's children.
 * @remarks This is currently implemented naively, which means that nodes without a rank are considered to have the lowest rank, and will come before any nodes given an explicit rank. In addition, if the ranks are inconsistent with the layout of the dag, then they will be silently ignored.
 *
 * Both of these behaviors may change in the future i.e. where unranked means
 * no condition, and an error will be thrown if the ranks are inconsistent.
 */
export interface RankOperator<N = empty, L = empty> {
  (node: DagNode<N, L>): number | void;
}
/**
 * all operators for the grid layout
 */
export interface Operators<N = empty, L = empty> {
  /**
   * the operator for assigning nodes to a lane
   */
  lane: LaneOperator<N, L>;

  /**
   * the operator for assigning nodes a rank
   */
  rank: RankOperator<N, L>;
}
/**
 * the typed dag specified by a set of operators
 */
export type OpDag<Op: Operators<>> = $FlowGen$If<
  $FlowGen$Assignable<Op, Operators<N, L>>,
  Dag<N, L>,
  empty
>;
/**
 * [object Object],[object Object],[object Object]
 */
export interface GridInfo {
  /**
   * the total weight after layout
   */
  width: number;

  /**
   * the total height after layout
   */
  height: number;
}
/**
 * [object Object],[object Object],[object Object]
 * @example <img alt="grid example" src="media://grid-greedy-topdown.png" width="200">
 * @example ```typescript
 * const data = [["parent", "child"], ...];
 * const create = connect();
 * const dag = create(data);
 * const layout = grid();
 * const { width, height } = layout(dag);
 * for (const node of dag) {
 *   console.log(node.x, node.y);
 * }
 * ```
 */
export interface GridOperator<Ops: Operators<>> {
  /**
   * Layout the input dag
   */
  (dag: OpDag<Ops>): GridInfo;

  /**
   * [object Object],[object Object],[object Object],[object Object],[object Object]
   */
  lane<NewLane: LaneOperator>(val: NewLane): GridOperator<
    Up<
      Ops,
      {
        /**
         * new lane
         */
        lane: NewLane,
        ...
      }
    >
  >;

  /**
   * Get the current lane operator
   */
  lane(): $PropertyType<Ops, "lane">;

  /**
   * [object Object],[object Object],[object Object]
   */
  rank<NewRank: RankOperator<>>(val: NewRank): GridOperator<
    Up<
      Ops,
      {
        /**
         * new rank
         */
        rank: NewRank,
        ...
      }
    >
  >;

  /**
   * Get the current lane operator
   */
  rank(): $PropertyType<Ops, "rank">;

  /**
   * Sets this grid layout's node size to the specified two-element array of
   * numbers [ *width*, *height* ] and returns a new operator. These sizes are
   * effectively the grid size, e.g. the spacing between adjacent lanes or rows
   * in the grid. (default: [1, 1])
   *
   * Note, due to the way that edges are meant to rendered, edges won't
   * intersect with nodes if width is half of the actual node width.
   */
  nodeSize(val: [number, number]): GridOperator<Ops>;

  /**
   * Get the current node size.
   */
  nodeSize(): [number, number];

  /**
   * Update the grid layout size
   *
   * Sets this grid layout's node size to the specified two-element array of
   * numbers [ *width*, *height* ] and returns a new operator. After the
   * initial layout, if size is not null, the dag will be rescaled so that it
   * fits in width x height. (default: null)
   */
  size(val: null | [number, number]): GridOperator<Ops>;

  /**
   * Get the current size.
   */
  size(): null | [number, number];
}
/**
 * the default grid operator
 */
export type DefaultGridOperator = GridOperator<{
  /**
   * default lane: greedy
   */
  lane: GreedyOperator,

  /**
   * default rank: none
   */
  rank: RankOperator<mixed, mixed>,
  ...
}>;
/**
 * [object Object],[object Object],[object Object]
 */
declare export function grid(...args: empty[]): DefaultGridOperator;
