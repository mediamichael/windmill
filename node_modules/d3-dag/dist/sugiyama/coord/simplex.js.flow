/**
 * Flowtype definitions for dist/sugiyama/coord/simplex.d.ts
 * Generated by Flowgen from a Typescript Definition
 * @flow
 */
// see https://gist.github.com/thecotne/6e5969f4aaf8f253985ed36b30ac9fe0
type $FlowGen$If<X: boolean, Then, Else = empty> = $Call<
  ((true, Then, Else) => Then) & ((false, Then, Else) => Else),
  X,
  Then,
  Else
>;

type $FlowGen$Assignable<A, B> = $Call<
  ((...r: [B]) => true) & ((...r: [A]) => false),
  A
>;

import { CoordOperator } from ".";
import { DagLink } from "../../dag";

/**
 * An accessor to get how vertical a weight should be.
 *
 * A weight accessor returns three postitive numbers, where higher numbers
 * indicate than edge should be more vertical. The first number corresponds to
 * short edges, the second to medium edges, and the last one to the middle of
 * long edges. These numbers should generally be increasing.
 */
export interface WeightAccessor<NodeDatum = empty, LinkDatum = empty> {
  (link: DagLink<NodeDatum, LinkDatum>): [number, number, number];
}
/**
 * [object Object],[object Object],[object Object]
 */
export type ConstAccessor<
  T: [number, number, number] = [number, number, number]
> = {
  (): T,

  /**
   * the constant value
   */
  value: $ReadOnly<T>,
  ...
} & WeightAccessor<mixed, mixed>;

/**
 * [object Object],[object Object]
 */
declare export function createConstAccessor<T: [number, number, number]>(
  value: T
): ConstAccessor<T>;

/**
 * the operators of the simplex operator
 */
export interface Operators<N = empty, L = empty> {
  /**
   * the weights for each edge
   */
  weight: WeightAccessor<N, L>;
}
/**
 * node datum for operators
 */
declare type OpNodeDatum<O: Operators<>> = $FlowGen$If<
  $FlowGen$Assignable<O, Operators<N, empty>>,
  N,
  empty
>;
/**
 * link datum for operators
 */
declare type OpLinkDatum<O: Operators<>> = $FlowGen$If<
  $FlowGen$Assignable<O, Operators<empty, L>>,
  L,
  empty
>;
/**
 * [object Object],[object Object],[object Object],[object Object],[object Object]
 */
export type SimplexOperator<Ops: Operators<>> = {
  /**
   * Set the weights for how vertical edges should be.
   * The higher the weight, the more vertical an edge should be. Weights are
   * are triplets of numbers describing the weight for different parts of edge.
   * The first is between true nodes, the second is for near true nodes, and
   * the last is for the extents of long edges. Generally the number should be
   * increasing, and all must be positive. (default: () =\> [1, 2, 8])
   */
  weight<NewWeight: WeightAccessor<>>(val: NewWeight): SimplexOperator<{
    /**
     * new weight
     */
    weight: NewWeight,
    ...
  }>,

  /**
   * Gets the current weight accessor
   */
  weight(): $PropertyType<Ops, "weight">,
  ...
} & CoordOperator<OpNodeDatum<Ops>, OpLinkDatum<Ops>>;

/**
 * default simplex operator
 */
export type DefaultSimplexOperator = SimplexOperator<{
  /**
   * default weights taken from graphvis
   */
  weight: ConstAccessor<[1, 2, 8]>,
  ...
}>;
/**
 * [object Object],[object Object],[object Object],[object Object],[object Object]
 */
declare export function simplex(...args: empty[]): DefaultSimplexOperator;
