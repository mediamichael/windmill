/**
 * Flowtype definitions for dist/sugiyama/decross/two-layer.d.ts
 * Generated by Flowgen from a Typescript Definition
 * @flow
 */
// see https://gist.github.com/thecotne/6e5969f4aaf8f253985ed36b30ac9fe0
type $FlowGen$If<X: boolean, Then, Else = empty> = $Call<
  ((true, Then, Else) => Then) & ((false, Then, Else) => Else),
  X,
  Then,
  Else
>;

type $FlowGen$Assignable<A, B> = $Call<
  ((...r: [B]) => true) & ((...r: [A]) => false),
  A
>;

import { DecrossOperator } from ".";
import { Up } from "../../utils";
import { TwolayerOperator as OrderOperator } from "../twolayer";
import { AggOperator } from "../twolayer/agg";
import { GreedyOperator } from "../twolayer/greedy";
import { DfsOperator } from "./dfs";

/**
 * initializers
 */
export type Inits<N = empty, L = empty> = [DecrossOperator<N, L>] &
  DecrossOperator<N, L>[];
/**
 * two layer operators
 */
export interface Operators<N = empty, L = empty> {
  /**
   * the order operator
   */
  order: OrderOperator<N, L>;

  /**
   * the initializers
   */
  inits: Inits<N, L>;
}
/**
 * the node datum of a set of operators
 */
export type OpNodeDatum<O: Operators<>> = $FlowGen$If<
  $FlowGen$Assignable<O, Operators<N, empty>>,
  N,
  empty
>;
/**
 * the link datum of a set of operators
 */
export type OpLinkDatum<O: Operators<>> = $FlowGen$If<
  $FlowGen$Assignable<O, Operators<empty, L>>,
  L,
  empty
>;
/**
 * [object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object]
 */
export type TwoLayerOperator<Ops: Operators<> = Operators<>> = {
  /**
   * [object Object],[object Object],[object Object],[object Object],[object Object]
   */
  order<NewOrder: OrderOperator>(val: NewOrder): TwoLayerOperator<
    Up<
      Ops,
      {
        /**
         * new order
         */
        order: NewOrder,
        ...
      }
    >
  >,

  /**
   * [object Object],[object Object],[object Object]
   */
  order(): $PropertyType<Ops, "order">,

  /**
   * [object Object],[object Object],[object Object]
   */
  inits<NewInits: Inits<>>(val: NewInits): TwoLayerOperator<
    Up<
      Ops,
      {
        /**
         * new inits
         */
        inits: NewInits,
        ...
      }
    >
  >,

  /**
   * Get the current initialization passes
   */
  inits(): $PropertyType<Ops, "inits">,

  /**
   * Sets the number of passes to make, more takes longer, but might result in
   * a better output. (default: 24)
   */
  passes(val: number): TwoLayerOperator<Ops>,

  /**
   * Get the current number of passes
   */
  passes(): number,
  ...
} & DecrossOperator<OpNodeDatum<Ops>, OpLinkDatum<Ops>>;

/**
 * default two layer operator
 */
export type DefaultTwoLayerOperator = TwoLayerOperator<{
  /**
   * default order
   */
  order: GreedyOperator<AggOperator>,

  /**
   * default inits, both dfs based
   */
  inits: [DfsOperator, DfsOperator],
  ...
}>;
/**
 * [object Object],[object Object],[object Object],[object Object],[object Object]
 */
declare export function twoLayer(...args: empty[]): DefaultTwoLayerOperator;
