/**
 * Flowtype definitions for dist/sugiyama/twolayer/agg.d.ts
 * Generated by Flowgen from a Typescript Definition
 * @flow
 */
import { TwolayerOperator } from ".";

/**
 * An interface for aggregating numbers
 */
export interface Aggregator {
  /**
   * add another value to the aggregator
   */
  add(inp: number): void;

  /**
   * return the aggregate of all added values
   */
  val(): number | void;
}
/**
 * A way to create aggregators
 */
export type AggFactory<A: Aggregator = Aggregator> = () => A;
/**
 * [object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object]
 */
declare export var meanFactory: () => Aggregator;
/**
 * [object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object]
 */
declare export var medianFactory: () => Aggregator;
/**
 * [object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object]
 * @remarks [object Object],[object Object],[object Object]
 */
declare export var weightedMedianFactory: () => Aggregator;
/**
 * [object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object]
 */
export type AggOperator<Factory: AggFactory<> = AggFactory<>> = {
  /**
   * [object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object]
   */
  aggregator<NewFactory: AggFactory<>>(
    val: NewFactory
  ): AggOperator<NewFactory>,

  /**
   * Get the current aggregator factory.
   */
  aggregator(): Factory,
  ...
} & TwolayerOperator<mixed, mixed>;

/**
 * [object Object],[object Object],[object Object],[object Object],[object Object]
 */
declare export function agg(...args: empty[]): AggOperator<>;
