/**
 * Flowtype definitions for dist/sugiyama/twolayer/greedy.d.ts
 * Generated by Flowgen from a Typescript Definition
 * @flow
 */
// see https://gist.github.com/thecotne/6e5969f4aaf8f253985ed36b30ac9fe0
type $FlowGen$If<X: boolean, Then, Else = empty> = $Call<
  ((true, Then, Else) => Then) & ((false, Then, Else) => Else),
  X,
  Then,
  Else
>;

type $FlowGen$Assignable<A, B> = $Call<
  ((...r: [B]) => true) & ((...r: [A]) => false),
  A
>;

import { TwolayerOperator } from ".";

/**
 * the node datum of a set of operators
 */
export type OpNodeDatum<Op: TwolayerOperator> = $FlowGen$If<
  $FlowGen$Assignable<Op, TwolayerOperator<D, empty>>,
  D,
  empty
>;
/**
 * the link datum of a set of operators
 */
export type OpLinkDatum<Op: TwolayerOperator> = $FlowGen$If<
  $FlowGen$Assignable<Op, TwolayerOperator<empty, L>>,
  L,
  empty
>;
/**
 * [object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object]
 */
export type GreedyOperator<Op: TwolayerOperator = TwolayerOperator> = {
  /**
   * [object Object],[object Object],[object Object]
   */
  base<NewOp: TwolayerOperator>(val: NewOp): GreedyOperator<NewOp>,

  /**
   * Get the current base operator.
   */
  base(): Op,

  /**
   * Set whether this operator should scan to find swaps.
   *
   * Using the scan method takes longer (quadratic in layer size, versus
   * linear), but produces fewer crossings.
   */
  scan(val: boolean): GreedyOperator<Op>,

  /**
   * Get the current base operator.
   */
  scan(): boolean,
  ...
} & TwolayerOperator<OpNodeDatum<Op>, OpLinkDatum<Op>>;

/**
 * default greedy operator
 */
export type DefaultGreedyOperator = GreedyOperator<
  TwolayerOperator<mixed, mixed>
>;
/**
 * [object Object],[object Object],[object Object],[object Object],[object Object]
 */
declare export function greedy(...args: empty[]): DefaultGreedyOperator;
