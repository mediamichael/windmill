/**
 * Flowtype definitions for dist/utils.d.ts
 * Generated by Flowgen from a Typescript Definition
 * @flow
 */
/**
 * General utilities for use throughout the package
 * @packageDocumentation
 */
/**
 * utility type for replacing keys with new value
 */
export type Up<O, N> = { ...$Diff<O, { [key: $Keys<N>]: any }>, ...N };
/**
 * assert something
 */
declare export function assert(statement: mixed): boolean;

/**
 * determines if two sets are equal
 */
declare export function setEqual<T>(first: Set<T>, second: Set<T>): boolean;

/**
 * determines if two sets intersect
 */
declare export function setIntersect<T>(first: Set<T>, second: Set<T>): boolean;

/**
 * removes a single arbitrary element from the Set, or undefined is missing
 * @remarks if the set contains undefined, then this doesn't distinguish in output,
 * but will properly remove it.
 */
declare export function setPop<T>(elems: Set<T>): T | void;

/**
 * push val onto key list for multimap
 */
declare export function listMultimapPush<K, V>(
  multimap: Map<K, V[]>,
  key: K,
  val: V
): void;

/**
 * add val to key set for multimap
 */
declare export function setMultimapAdd<K, V>(
  multimap: Map<K, Set<V>>,
  key: K,
  val: V
): void;

/**
 * a generic json replacer
 */
export interface Replacer {
  (key: string, value: mixed): mixed;
}
/**
 * replacer for serializing possibly circular json
 */
declare export function getCircularReplacer(): Replacer;

/**
 * format tag for converting inputs to json
 */
declare export function js(
  strings: TemplateStringsArray,
  ...values: mixed[]
): string;

/**
 * iterate over bigrams of an array
 */
declare export function bigrams<T>(
  array: $ReadOnlyArray<T>
): IterableIterator<[T, T]>;

/**
 * a callback for things with children
 */
export interface ChildrenCallback<T> {
  (node: T): Iterable<T>;
}
/**
 * depth first search for arbitrary types
 */
declare export function dfs<T>(
  children: ChildrenCallback<T>,
  ...queue: T[]
): IterableIterator<T>;
