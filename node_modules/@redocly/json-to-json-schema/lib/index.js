import { combineSchemas } from './combine';
import { detectFormat } from './format';
import { mapObjectValues } from './js-utils';
import { formatExample, formatNull, getJsonSchemaType } from './utils';
export function convert(example, options = { targetSchema: 'draft-2020-12' }) {
    return convertValue(example, Object.assign({ targetSchema: 'draft-2020-12' }, options));
}
function convertValue(value, options) {
    if (value === undefined)
        return {};
    const type = getJsonSchemaType(value);
    const exampleObj = options.includeExamples ? formatExample(value, options.targetSchema) : {};
    switch (type) {
        case 'string':
            const format = detectFormat(value);
            return Object.assign(Object.assign({ type }, exampleObj), (format ? { format } : null));
        case 'number':
        case 'integer':
        case 'boolean':
            return Object.assign({ type }, exampleObj);
        case 'null':
            return formatNull(options.targetSchema);
        case 'array':
            return {
                type,
                items: value.length
                    ? combineSchemas(value.map(v => convertValue(v, options)), options)
                    : undefined,
            };
        case 'object':
            const propsLength = Object.keys(value).length;
            const additionalPropertiesObj = options.disableAdditionalProperties || !propsLength ? {} : { additionalProperties: false };
            return Object.assign({ type, properties: propsLength
                    ? mapObjectValues(value, (_key, fieldValue) => {
                        return convertValue(fieldValue, options);
                    })
                    : undefined }, additionalPropertiesObj);
    }
}
