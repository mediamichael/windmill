export function mapObjectValues(obj, cb) {
    if (obj === undefined)
        return undefined;
    const res = {};
    for (const key of Object.keys(obj)) {
        res[key] = cb(key, obj[key]);
    }
    return res;
}
export function groupByField(collection, field) {
    const groups = {};
    for (const item of collection) {
        const group = item[field];
        groups[group] = groups[group] || [];
        groups[group].push(item);
    }
    return Object.entries(groups).map(([group, values]) => {
        return { group: group, values };
    });
}
export function intersect(sets) {
    if (!sets.length)
        return new Set();
    const i = sets.reduce((m, s, i) => (s.size < sets[m].size ? i : m), 0);
    const [smallest] = sets.splice(i, 1);
    const res = new Set();
    for (let val of smallest)
        if (sets.every(s => s.has(val)))
            res.add(val);
    return res;
}
