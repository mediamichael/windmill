import { buildASTSchema, printSchema } from 'graphql';
import { Position } from 'graphql-language-service';
export const getModelLanguageId = (model) => {
    if ('getModeId' in model) {
        return model.getModeId();
    }
    return model.getLanguageId();
};
export function toMonacoRange(range) {
    return {
        startLineNumber: range.start.line + 1,
        startColumn: range.start.character + 1,
        endLineNumber: range.end.line + 1,
        endColumn: range.end.character + 1,
    };
}
export function toGraphQLPosition(position) {
    return new Position(position.lineNumber - 1, position.column - 1);
}
export function toCompletion(entry, range) {
    const results = {
        label: entry.label,
        insertText: entry.insertText,
        insertTextFormat: entry.insertTextFormat,
        sortText: entry.sortText,
        filterText: entry.filterText,
        documentation: entry.documentation,
        detail: entry.detail,
        range: range ? toMonacoRange(range) : undefined,
        kind: entry.kind,
    };
    if (entry.insertTextFormat) {
        results.insertTextFormat = entry.insertTextFormat;
    }
    if (entry.command) {
        results.command = { ...entry.command, id: entry.command.command };
    }
    return results;
}
export function toMarkerData(diagnostic) {
    return {
        startLineNumber: diagnostic.range.start.line + 1,
        endLineNumber: diagnostic.range.end.line + 1,
        startColumn: diagnostic.range.start.character + 1,
        endColumn: diagnostic.range.end.character,
        message: diagnostic.message,
        severity: 5,
        code: diagnostic.code || undefined,
    };
}
export const getStringSchema = (schemaConfig) => {
    const { schema: graphQLSchema, documentAST, introspectionJSON, introspectionJSONString, documentString, ...rest } = schemaConfig;
    if (graphQLSchema) {
        return {
            ...rest,
            documentString: printSchema(graphQLSchema),
        };
    }
    if (introspectionJSONString) {
        return {
            ...rest,
            introspectionJSONString,
        };
    }
    if (documentString) {
        return {
            ...rest,
            documentString,
        };
    }
    if (introspectionJSON) {
        return {
            ...rest,
            introspectionJSONString: JSON.stringify(introspectionJSON),
        };
    }
    if (documentAST) {
        const schema = buildASTSchema(documentAST, rest.buildSchemaOptions);
        return {
            ...rest,
            documentString: printSchema(schema),
        };
    }
    throw new Error('no schema supplied');
};
//# sourceMappingURL=utils.js.map