"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupMode = void 0;
var monaco_editor_1 = require("./monaco-editor");
var workerManager_1 = require("./workerManager");
var languageFeatures = __importStar(require("./languageFeatures"));
function setupMode(defaults) {
    var disposables = [];
    var providers = [];
    var client = new workerManager_1.WorkerManager(defaults);
    disposables.push(client);
    var worker = function () {
        var uris = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            uris[_i] = arguments[_i];
        }
        try {
            return client.getLanguageServiceWorker.apply(client, __spreadArray([], __read(uris), false));
        }
        catch (_a) {
            throw new Error('Error fetching graphql language service worker');
        }
    };
    function registerSchemaLessProviders() {
        var modeConfiguration = defaults.modeConfiguration, languageId = defaults.languageId;
        if (modeConfiguration.documentFormattingEdits) {
            providers.push(monaco_editor_1.languages.registerDocumentFormattingEditProvider(languageId, new languageFeatures.DocumentFormattingAdapter(worker)));
        }
    }
    function registerAllProviders(api) {
        var modeConfiguration = defaults.modeConfiguration, languageId = defaults.languageId;
        disposeAll(providers);
        if (modeConfiguration.completionItems) {
            providers.push(monaco_editor_1.languages.registerCompletionItemProvider(languageId, new languageFeatures.CompletionAdapter(worker)));
        }
        if (modeConfiguration.diagnostics) {
            providers.push(new languageFeatures.DiagnosticsAdapter(api, worker));
        }
        if (modeConfiguration.hovers) {
            providers.push(monaco_editor_1.languages.registerHoverProvider(languageId, new languageFeatures.HoverAdapter(worker)));
        }
        registerSchemaLessProviders();
    }
    var modeConfiguration = defaults.modeConfiguration, formattingOptions = defaults.formattingOptions, diagnosticSettings = defaults.diagnosticSettings, externalFragmentDefinitions = defaults.externalFragmentDefinitions, schemas = defaults.schemas;
    registerAllProviders(defaults);
    defaults.onDidChange(function (newDefaults) {
        if (newDefaults.modeConfiguration !== modeConfiguration) {
            modeConfiguration = newDefaults.modeConfiguration;
            registerAllProviders(newDefaults);
        }
        if (newDefaults.formattingOptions !== formattingOptions) {
            formattingOptions = newDefaults.formattingOptions;
            registerSchemaLessProviders();
        }
        if (newDefaults.externalFragmentDefinitions !== externalFragmentDefinitions) {
            externalFragmentDefinitions = newDefaults.externalFragmentDefinitions;
            registerAllProviders(newDefaults);
        }
        if (newDefaults.diagnosticSettings !== diagnosticSettings) {
            diagnosticSettings = newDefaults.diagnosticSettings;
            registerAllProviders(newDefaults);
        }
        if (newDefaults.schemas !== schemas) {
            schemas = newDefaults.schemas;
            registerAllProviders(newDefaults);
        }
    });
    disposables.push(asDisposable(providers));
    return asDisposable(disposables);
}
exports.setupMode = setupMode;
function asDisposable(disposables) {
    return { dispose: function () { return disposeAll(disposables); } };
}
function disposeAll(disposables) {
    while (disposables.length) {
        disposables.pop().dispose();
    }
}
//# sourceMappingURL=graphqlMode.js.map