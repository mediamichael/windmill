"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LanguageService = void 0;
var graphql_1 = require("graphql");
var picomatch_browser_1 = __importDefault(require("picomatch-browser"));
var graphql_language_service_1 = require("graphql-language-service");
var schemaLoader_1 = require("./schemaLoader");
var schemaCache = new Map();
var LanguageService = (function () {
    function LanguageService(_a) {
        var parser = _a.parser, schemas = _a.schemas, parseOptions = _a.parseOptions, externalFragmentDefinitions = _a.externalFragmentDefinitions, customValidationRules = _a.customValidationRules, fillLeafsOnComplete = _a.fillLeafsOnComplete;
        var _this = this;
        this._parser = graphql_1.parse;
        this._schemas = [];
        this._schemaCache = schemaCache;
        this._schemaLoader = schemaLoader_1.defaultSchemaLoader;
        this._parseOptions = undefined;
        this._customValidationRules = undefined;
        this._externalFragmentDefinitionNodes = null;
        this._externalFragmentDefinitionsString = null;
        this._fillLeafsOnComplete = false;
        this.getCompletion = function (uri, documentText, position) {
            var schema = _this.getSchemaForFile(uri);
            if (!documentText || documentText.length < 1 || !(schema === null || schema === void 0 ? void 0 : schema.schema)) {
                return [];
            }
            return (0, graphql_language_service_1.getAutocompleteSuggestions)(schema.schema, documentText, position, undefined, _this.getExternalFragmentDefinitions(), { uri: uri, fillLeafsOnComplete: _this._fillLeafsOnComplete });
        };
        this.getDiagnostics = function (uri, documentText, customRules) {
            var schema = _this.getSchemaForFile(uri);
            if (!documentText || documentText.trim().length < 2 || !(schema === null || schema === void 0 ? void 0 : schema.schema)) {
                return [];
            }
            return (0, graphql_language_service_1.getDiagnostics)(documentText, schema.schema, customRules !== null && customRules !== void 0 ? customRules : _this._customValidationRules, false, _this.getExternalFragmentDefinitions());
        };
        this.getHover = function (uri, documentText, position, options) {
            var schema = _this.getSchemaForFile(uri);
            if (schema && (documentText === null || documentText === void 0 ? void 0 : documentText.length) > 3) {
                return (0, graphql_language_service_1.getHoverInformation)(schema.schema, documentText, position, undefined, __assign({ useMarkdown: true }, options));
            }
        };
        this.getVariablesJSONSchema = function (uri, documentText, options) {
            var schema = _this.getSchemaForFile(uri);
            if (schema && documentText.length > 3) {
                try {
                    var documentAST = _this.parse(documentText);
                    var operationFacts = (0, graphql_language_service_1.getOperationASTFacts)(documentAST, schema.schema);
                    if (operationFacts === null || operationFacts === void 0 ? void 0 : operationFacts.variableToType) {
                        return (0, graphql_language_service_1.getVariablesJSONSchema)(operationFacts.variableToType, __assign(__assign({}, options), { scalarSchemas: schema.customScalarSchemas }));
                    }
                }
                catch (_a) { }
            }
            return null;
        };
        this._schemaLoader = schemaLoader_1.defaultSchemaLoader;
        if (schemas) {
            this._schemas = schemas;
            this._cacheSchemas();
        }
        if (parser) {
            this._parser = parser;
        }
        this._fillLeafsOnComplete = fillLeafsOnComplete;
        if (parseOptions) {
            this._parseOptions = parseOptions;
        }
        if (customValidationRules) {
            this._customValidationRules = customValidationRules;
        }
        if (externalFragmentDefinitions) {
            if (Array.isArray(externalFragmentDefinitions)) {
                this._externalFragmentDefinitionNodes = externalFragmentDefinitions;
            }
            else {
                this._externalFragmentDefinitionsString = externalFragmentDefinitions;
            }
        }
    }
    LanguageService.prototype._cacheSchemas = function () {
        var e_1, _a;
        try {
            for (var _b = __values(this._schemas), _c = _b.next(); !_c.done; _c = _b.next()) {
                var schema = _c.value;
                this._cacheSchema(schema);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    LanguageService.prototype._cacheSchema = function (schemaConfig) {
        var schema = this._schemaLoader(schemaConfig, this.parse.bind(this));
        return this._schemaCache.set(schemaConfig.uri, __assign(__assign({}, schemaConfig), { schema: schema }));
    };
    LanguageService.prototype.getSchemaForFile = function (uri) {
        var _a;
        if (!((_a = this._schemas) === null || _a === void 0 ? void 0 : _a.length)) {
            return;
        }
        if (this._schemas.length === 1) {
            return this._schemaCache.get(this._schemas[0].uri);
        }
        var schema = this._schemas.find(function (schemaConfig) {
            if (!schemaConfig.fileMatch) {
                return false;
            }
            return schemaConfig.fileMatch.some(function (glob) {
                var isMatch = (0, picomatch_browser_1.default)(glob);
                return isMatch(uri);
            });
        });
        if (schema) {
            var cacheEntry = this._schemaCache.get(schema.uri);
            if (cacheEntry) {
                return cacheEntry;
            }
            var cache = this._cacheSchema(schema);
            return cache.get(schema.uri);
        }
    };
    LanguageService.prototype.getExternalFragmentDefinitions = function () {
        if (!this._externalFragmentDefinitionNodes &&
            this._externalFragmentDefinitionsString) {
            var definitionNodes_1 = [];
            try {
                (0, graphql_1.visit)(this._parser(this._externalFragmentDefinitionsString), {
                    FragmentDefinition: function (node) {
                        definitionNodes_1.push(node);
                    },
                });
            }
            catch (_a) {
                throw new Error("Failed parsing externalFragmentDefinitions string:\n".concat(this._externalFragmentDefinitionsString));
            }
            this._externalFragmentDefinitionNodes = definitionNodes_1;
        }
        return this._externalFragmentDefinitionNodes;
    };
    LanguageService.prototype.updateSchemas = function (schemas) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this._schemas = schemas;
                this._cacheSchemas();
                return [2];
            });
        });
    };
    LanguageService.prototype.updateSchema = function (schema) {
        var schemaIndex = this._schemas.findIndex(function (c) { return c.uri === schema.uri; });
        if (schemaIndex < 0) {
            console.warn('updateSchema could not find a schema in your config by that URI', schema.uri);
            return;
        }
        this._schemas[schemaIndex] = schema;
        this._cacheSchema(schema);
    };
    LanguageService.prototype.addSchema = function (schema) {
        this._schemas.push(schema);
        this._cacheSchema(schema);
    };
    LanguageService.prototype.parse = function (text, options) {
        return this._parser(text, options || this._parseOptions);
    };
    return LanguageService;
}());
exports.LanguageService = LanguageService;
//# sourceMappingURL=LanguageService.js.map