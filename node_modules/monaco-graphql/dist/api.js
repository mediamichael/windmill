"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.completionSettingDefault = exports.diagnosticSettingDefault = exports.formattingDefaults = exports.modeConfigurationDefault = exports.create = exports.MonacoGraphQLAPI = void 0;
var monaco_editor_1 = require("./monaco-editor");
var MonacoGraphQLAPI = (function () {
    function MonacoGraphQLAPI(_a) {
        var languageId = _a.languageId, schemas = _a.schemas, modeConfiguration = _a.modeConfiguration, formattingOptions = _a.formattingOptions, diagnosticSettings = _a.diagnosticSettings, completionSettings = _a.completionSettings;
        this._onDidChange = new monaco_editor_1.Emitter();
        this._schemas = null;
        this._schemasById = Object.create(null);
        this._externalFragmentDefinitions = null;
        this._languageId = languageId;
        if (schemas) {
            this.setSchemaConfig(schemas);
        }
        this._modeConfiguration = modeConfiguration !== null && modeConfiguration !== void 0 ? modeConfiguration : exports.modeConfigurationDefault;
        this._completionSettings = completionSettings !== null && completionSettings !== void 0 ? completionSettings : exports.completionSettingDefault;
        this._diagnosticSettings = diagnosticSettings !== null && diagnosticSettings !== void 0 ? diagnosticSettings : exports.diagnosticSettingDefault;
        this._formattingOptions = formattingOptions !== null && formattingOptions !== void 0 ? formattingOptions : exports.formattingDefaults;
    }
    Object.defineProperty(MonacoGraphQLAPI.prototype, "onDidChange", {
        get: function () {
            return this._onDidChange.event;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MonacoGraphQLAPI.prototype, "languageId", {
        get: function () {
            return this._languageId;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MonacoGraphQLAPI.prototype, "modeConfiguration", {
        get: function () {
            return this._modeConfiguration;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MonacoGraphQLAPI.prototype, "schemas", {
        get: function () {
            return this._schemas;
        },
        enumerable: false,
        configurable: true
    });
    MonacoGraphQLAPI.prototype.schemasById = function () {
        return this._schemasById;
    };
    Object.defineProperty(MonacoGraphQLAPI.prototype, "formattingOptions", {
        get: function () {
            return this._formattingOptions;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MonacoGraphQLAPI.prototype, "diagnosticSettings", {
        get: function () {
            return this._diagnosticSettings;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MonacoGraphQLAPI.prototype, "completionSettings", {
        get: function () {
            var _a, _b, _c;
            return __assign(__assign({}, this._completionSettings), { fillLeafsOnComplete: (_b = (_a = this._completionSettings) === null || _a === void 0 ? void 0 : _a.__experimental__fillLeafsOnComplete) !== null && _b !== void 0 ? _b : (_c = this._completionSettings) === null || _c === void 0 ? void 0 : _c.fillLeafsOnComplete });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MonacoGraphQLAPI.prototype, "externalFragmentDefinitions", {
        get: function () {
            return this._externalFragmentDefinitions;
        },
        enumerable: false,
        configurable: true
    });
    MonacoGraphQLAPI.prototype.setSchemaConfig = function (schemas) {
        this._schemas = schemas || null;
        this._schemasById = schemas.reduce(function (result, schema) {
            result[schema.uri] = schema;
            return result;
        }, Object.create(null));
        this._onDidChange.fire(this);
    };
    MonacoGraphQLAPI.prototype.setExternalFragmentDefinitions = function (externalFragmentDefinitions) {
        this._externalFragmentDefinitions = externalFragmentDefinitions;
    };
    MonacoGraphQLAPI.prototype.setModeConfiguration = function (modeConfiguration) {
        this._modeConfiguration = modeConfiguration || Object.create(null);
        this._onDidChange.fire(this);
    };
    MonacoGraphQLAPI.prototype.setFormattingOptions = function (formattingOptions) {
        this._formattingOptions = formattingOptions || Object.create(null);
        this._onDidChange.fire(this);
    };
    MonacoGraphQLAPI.prototype.setDiagnosticSettings = function (diagnosticSettings) {
        this._diagnosticSettings = diagnosticSettings || Object.create(null);
        this._onDidChange.fire(this);
    };
    MonacoGraphQLAPI.prototype.setCompletionSettings = function (completionSettings) {
        this._completionSettings = completionSettings || Object.create(null);
        this._onDidChange.fire(this);
    };
    return MonacoGraphQLAPI;
}());
exports.MonacoGraphQLAPI = MonacoGraphQLAPI;
function create(languageId, config) {
    if (!config) {
        return new MonacoGraphQLAPI({
            languageId: languageId,
            schemas: [],
            formattingOptions: exports.formattingDefaults,
            modeConfiguration: exports.modeConfigurationDefault,
            diagnosticSettings: exports.diagnosticSettingDefault,
            completionSettings: exports.completionSettingDefault,
        });
    }
    var schemas = config.schemas, formattingOptions = config.formattingOptions, modeConfiguration = config.modeConfiguration, diagnosticSettings = config.diagnosticSettings, completionSettings = config.completionSettings;
    return new MonacoGraphQLAPI({
        languageId: languageId,
        schemas: schemas,
        formattingOptions: __assign(__assign(__assign({}, exports.formattingDefaults), formattingOptions), { prettierConfig: __assign(__assign({}, exports.formattingDefaults.prettierConfig), formattingOptions === null || formattingOptions === void 0 ? void 0 : formattingOptions.prettierConfig) }),
        modeConfiguration: __assign(__assign({}, exports.modeConfigurationDefault), modeConfiguration),
        diagnosticSettings: __assign(__assign({}, exports.diagnosticSettingDefault), diagnosticSettings),
        completionSettings: __assign(__assign({}, exports.completionSettingDefault), completionSettings),
    });
}
exports.create = create;
exports.modeConfigurationDefault = {
    documentFormattingEdits: true,
    documentRangeFormattingEdits: false,
    completionItems: true,
    hovers: true,
    documentSymbols: false,
    tokens: false,
    colors: false,
    foldingRanges: false,
    diagnostics: true,
    selectionRanges: false,
};
exports.formattingDefaults = {
    prettierConfig: {
        tabWidth: 2,
    },
};
exports.diagnosticSettingDefault = {
    jsonDiagnosticSettings: {
        schemaValidation: 'error',
    },
};
exports.completionSettingDefault = {
    __experimental__fillLeafsOnComplete: false,
};
//# sourceMappingURL=api.js.map