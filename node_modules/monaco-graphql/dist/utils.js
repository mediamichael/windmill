"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getStringSchema = exports.toMarkerData = exports.toCompletion = exports.toGraphQLPosition = exports.toMonacoRange = exports.getModelLanguageId = void 0;
var graphql_1 = require("graphql");
var graphql_language_service_1 = require("graphql-language-service");
var getModelLanguageId = function (model) {
    if ('getModeId' in model) {
        return model.getModeId();
    }
    return model.getLanguageId();
};
exports.getModelLanguageId = getModelLanguageId;
function toMonacoRange(range) {
    return {
        startLineNumber: range.start.line + 1,
        startColumn: range.start.character + 1,
        endLineNumber: range.end.line + 1,
        endColumn: range.end.character + 1,
    };
}
exports.toMonacoRange = toMonacoRange;
function toGraphQLPosition(position) {
    return new graphql_language_service_1.Position(position.lineNumber - 1, position.column - 1);
}
exports.toGraphQLPosition = toGraphQLPosition;
function toCompletion(entry, range) {
    var results = {
        label: entry.label,
        insertText: entry === null || entry === void 0 ? void 0 : entry.insertText,
        sortText: entry.sortText,
        filterText: entry === null || entry === void 0 ? void 0 : entry.filterText,
        documentation: entry.documentation,
        detail: entry.detail,
        range: range ? toMonacoRange(range) : undefined,
        kind: entry.kind,
    };
    if (entry.insertTextFormat) {
        results.insertTextFormat = entry.insertTextFormat;
    }
    if (entry.insertTextMode) {
        results.insertTextMode = entry.insertTextMode;
    }
    if (entry.command) {
        results.command = __assign(__assign({}, entry.command), { id: entry.command.command });
    }
    if (entry.labelDetails) {
        results.labelDetails = entry.labelDetails;
    }
    return results;
}
exports.toCompletion = toCompletion;
function toMarkerData(diagnostic) {
    return {
        startLineNumber: diagnostic.range.start.line + 1,
        endLineNumber: diagnostic.range.end.line + 1,
        startColumn: diagnostic.range.start.character + 1,
        endColumn: diagnostic.range.end.character,
        message: diagnostic.message,
        severity: 5,
        code: diagnostic.code || undefined,
    };
}
exports.toMarkerData = toMarkerData;
var getStringSchema = function (schemaConfig) {
    var graphQLSchema = schemaConfig.schema, documentAST = schemaConfig.documentAST, introspectionJSON = schemaConfig.introspectionJSON, introspectionJSONString = schemaConfig.introspectionJSONString, documentString = schemaConfig.documentString, rest = __rest(schemaConfig, ["schema", "documentAST", "introspectionJSON", "introspectionJSONString", "documentString"]);
    if (graphQLSchema) {
        return __assign(__assign({}, rest), { documentString: (0, graphql_1.printSchema)(graphQLSchema) });
    }
    if (introspectionJSONString) {
        return __assign(__assign({}, rest), { introspectionJSONString: introspectionJSONString });
    }
    if (documentString) {
        return __assign(__assign({}, rest), { documentString: documentString });
    }
    if (introspectionJSON) {
        return __assign(__assign({}, rest), { introspectionJSONString: JSON.stringify(introspectionJSON) });
    }
    if (documentAST) {
        var schema = (0, graphql_1.buildASTSchema)(documentAST, rest.buildSchemaOptions);
        return __assign(__assign({}, rest), { documentString: (0, graphql_1.printSchema)(schema) });
    }
    throw new Error('no schema supplied');
};
exports.getStringSchema = getStringSchema;
//# sourceMappingURL=utils.js.map